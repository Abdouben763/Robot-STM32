
Robot STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009064  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  080091a8  080091a8  0000a1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009548  08009548  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009548  08009548  0000a548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009550  08009550  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009550  08009550  0000a550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009554  08009554  0000a554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009558  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001d8  08009730  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08009730  0000b5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7b3  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ff  00000000  00000000  000199b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a94  00000000  00000000  0001ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001812c  00000000  00000000  0001d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e64b  00000000  00000000  00035630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095eb0  00000000  00000000  00043c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c7c  00000000  00000000  000d9b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000de7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800918c 	.word	0x0800918c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	0800918c 	.word	0x0800918c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_frsub>:
 8000af8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	e002      	b.n	8000b04 <__addsf3>
 8000afe:	bf00      	nop

08000b00 <__aeabi_fsub>:
 8000b00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b04 <__addsf3>:
 8000b04:	0042      	lsls	r2, r0, #1
 8000b06:	bf1f      	itttt	ne
 8000b08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b0c:	ea92 0f03 	teqne	r2, r3
 8000b10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b18:	d06a      	beq.n	8000bf0 <__addsf3+0xec>
 8000b1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b22:	bfc1      	itttt	gt
 8000b24:	18d2      	addgt	r2, r2, r3
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	4048      	eorgt	r0, r1
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	bfb8      	it	lt
 8000b2e:	425b      	neglt	r3, r3
 8000b30:	2b19      	cmp	r3, #25
 8000b32:	bf88      	it	hi
 8000b34:	4770      	bxhi	lr
 8000b36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4249      	negne	r1, r1
 8000b56:	ea92 0f03 	teq	r2, r3
 8000b5a:	d03f      	beq.n	8000bdc <__addsf3+0xd8>
 8000b5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b60:	fa41 fc03 	asr.w	ip, r1, r3
 8000b64:	eb10 000c 	adds.w	r0, r0, ip
 8000b68:	f1c3 0320 	rsb	r3, r3, #32
 8000b6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b74:	d502      	bpl.n	8000b7c <__addsf3+0x78>
 8000b76:	4249      	negs	r1, r1
 8000b78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b80:	d313      	bcc.n	8000baa <__addsf3+0xa6>
 8000b82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b86:	d306      	bcc.n	8000b96 <__addsf3+0x92>
 8000b88:	0840      	lsrs	r0, r0, #1
 8000b8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8e:	f102 0201 	add.w	r2, r2, #1
 8000b92:	2afe      	cmp	r2, #254	@ 0xfe
 8000b94:	d251      	bcs.n	8000c3a <__addsf3+0x136>
 8000b96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9e:	bf08      	it	eq
 8000ba0:	f020 0001 	biceq.w	r0, r0, #1
 8000ba4:	ea40 0003 	orr.w	r0, r0, r3
 8000ba8:	4770      	bx	lr
 8000baa:	0049      	lsls	r1, r1, #1
 8000bac:	eb40 0000 	adc.w	r0, r0, r0
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bb8:	d2ed      	bcs.n	8000b96 <__addsf3+0x92>
 8000bba:	fab0 fc80 	clz	ip, r0
 8000bbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bca:	bfaa      	itet	ge
 8000bcc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd0:	4252      	neglt	r2, r2
 8000bd2:	4318      	orrge	r0, r3
 8000bd4:	bfbc      	itt	lt
 8000bd6:	40d0      	lsrlt	r0, r2
 8000bd8:	4318      	orrlt	r0, r3
 8000bda:	4770      	bx	lr
 8000bdc:	f092 0f00 	teq	r2, #0
 8000be0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000be4:	bf06      	itte	eq
 8000be6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bea:	3201      	addeq	r2, #1
 8000bec:	3b01      	subne	r3, #1
 8000bee:	e7b5      	b.n	8000b5c <__addsf3+0x58>
 8000bf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf8:	bf18      	it	ne
 8000bfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfe:	d021      	beq.n	8000c44 <__addsf3+0x140>
 8000c00:	ea92 0f03 	teq	r2, r3
 8000c04:	d004      	beq.n	8000c10 <__addsf3+0x10c>
 8000c06:	f092 0f00 	teq	r2, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	4608      	moveq	r0, r1
 8000c0e:	4770      	bx	lr
 8000c10:	ea90 0f01 	teq	r0, r1
 8000c14:	bf1c      	itt	ne
 8000c16:	2000      	movne	r0, #0
 8000c18:	4770      	bxne	lr
 8000c1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c1e:	d104      	bne.n	8000c2a <__addsf3+0x126>
 8000c20:	0040      	lsls	r0, r0, #1
 8000c22:	bf28      	it	cs
 8000c24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c28:	4770      	bx	lr
 8000c2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c2e:	bf3c      	itt	cc
 8000c30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bxcc	lr
 8000c36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c42:	4770      	bx	lr
 8000c44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c48:	bf16      	itet	ne
 8000c4a:	4608      	movne	r0, r1
 8000c4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c50:	4601      	movne	r1, r0
 8000c52:	0242      	lsls	r2, r0, #9
 8000c54:	bf06      	itte	eq
 8000c56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5a:	ea90 0f01 	teqeq	r0, r1
 8000c5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c62:	4770      	bx	lr

08000c64 <__aeabi_ui2f>:
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e004      	b.n	8000c74 <__aeabi_i2f+0x8>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_i2f>:
 8000c6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c70:	bf48      	it	mi
 8000c72:	4240      	negmi	r0, r0
 8000c74:	ea5f 0c00 	movs.w	ip, r0
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c80:	4601      	mov	r1, r0
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	e01c      	b.n	8000cc2 <__aeabi_l2f+0x2a>

08000c88 <__aeabi_ul2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e00a      	b.n	8000cac <__aeabi_l2f+0x14>
 8000c96:	bf00      	nop

08000c98 <__aeabi_l2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ca4:	d502      	bpl.n	8000cac <__aeabi_l2f+0x14>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	ea5f 0c01 	movs.w	ip, r1
 8000cb0:	bf02      	ittt	eq
 8000cb2:	4684      	moveq	ip, r0
 8000cb4:	4601      	moveq	r1, r0
 8000cb6:	2000      	moveq	r0, #0
 8000cb8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cbc:	bf08      	it	eq
 8000cbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cc6:	fabc f28c 	clz	r2, ip
 8000cca:	3a08      	subs	r2, #8
 8000ccc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd0:	db10      	blt.n	8000cf4 <__aeabi_l2f+0x5c>
 8000cd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ce4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	f020 0001 	biceq.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	f102 0220 	add.w	r2, r2, #32
 8000cf8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d04:	fa21 f202 	lsr.w	r2, r1, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_fmul>:
 8000d14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d22:	ea92 0f0c 	teqne	r2, ip
 8000d26:	ea93 0f0c 	teqne	r3, ip
 8000d2a:	d06f      	beq.n	8000e0c <__aeabi_fmul+0xf8>
 8000d2c:	441a      	add	r2, r3
 8000d2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d32:	0240      	lsls	r0, r0, #9
 8000d34:	bf18      	it	ne
 8000d36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3a:	d01e      	beq.n	8000d7a <__aeabi_fmul+0x66>
 8000d3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d48:	fba0 3101 	umull	r3, r1, r0, r1
 8000d4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d54:	bf3e      	ittt	cc
 8000d56:	0049      	lslcc	r1, r1, #1
 8000d58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	ea40 0001 	orr.w	r0, r0, r1
 8000d62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d66:	2afd      	cmp	r2, #253	@ 0xfd
 8000d68:	d81d      	bhi.n	8000da6 <__aeabi_fmul+0x92>
 8000d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d72:	bf08      	it	eq
 8000d74:	f020 0001 	biceq.w	r0, r0, #1
 8000d78:	4770      	bx	lr
 8000d7a:	f090 0f00 	teq	r0, #0
 8000d7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	0249      	lsleq	r1, r1, #9
 8000d86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d90:	bfc2      	ittt	gt
 8000d92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9a:	4770      	bxgt	lr
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	3a01      	subs	r2, #1
 8000da6:	dc5d      	bgt.n	8000e64 <__aeabi_fmul+0x150>
 8000da8:	f112 0f19 	cmn.w	r2, #25
 8000dac:	bfdc      	itt	le
 8000dae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	4770      	bxle	lr
 8000db4:	f1c2 0200 	rsb	r2, r2, #0
 8000db8:	0041      	lsls	r1, r0, #1
 8000dba:	fa21 f102 	lsr.w	r1, r1, r2
 8000dbe:	f1c2 0220 	rsb	r2, r2, #32
 8000dc2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dca:	f140 0000 	adc.w	r0, r0, #0
 8000dce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd2:	bf08      	it	eq
 8000dd4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd8:	4770      	bx	lr
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fmul+0xce>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fmul+0xe6>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e78f      	b.n	8000d2c <__aeabi_fmul+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	bf18      	it	ne
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d00a      	beq.n	8000e32 <__aeabi_fmul+0x11e>
 8000e1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e20:	bf18      	it	ne
 8000e22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e26:	d1d8      	bne.n	8000dda <__aeabi_fmul+0xc6>
 8000e28:	ea80 0001 	eor.w	r0, r0, r1
 8000e2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	bf17      	itett	ne
 8000e38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e3c:	4608      	moveq	r0, r1
 8000e3e:	f091 0f00 	teqne	r1, #0
 8000e42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e46:	d014      	beq.n	8000e72 <__aeabi_fmul+0x15e>
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	d101      	bne.n	8000e52 <__aeabi_fmul+0x13e>
 8000e4e:	0242      	lsls	r2, r0, #9
 8000e50:	d10f      	bne.n	8000e72 <__aeabi_fmul+0x15e>
 8000e52:	ea93 0f0c 	teq	r3, ip
 8000e56:	d103      	bne.n	8000e60 <__aeabi_fmul+0x14c>
 8000e58:	024b      	lsls	r3, r1, #9
 8000e5a:	bf18      	it	ne
 8000e5c:	4608      	movne	r0, r1
 8000e5e:	d108      	bne.n	8000e72 <__aeabi_fmul+0x15e>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e70:	4770      	bx	lr
 8000e72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e7a:	4770      	bx	lr

08000e7c <__aeabi_fdiv>:
 8000e7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e84:	bf1e      	ittt	ne
 8000e86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8a:	ea92 0f0c 	teqne	r2, ip
 8000e8e:	ea93 0f0c 	teqne	r3, ip
 8000e92:	d069      	beq.n	8000f68 <__aeabi_fdiv+0xec>
 8000e94:	eba2 0203 	sub.w	r2, r2, r3
 8000e98:	ea80 0c01 	eor.w	ip, r0, r1
 8000e9c:	0249      	lsls	r1, r1, #9
 8000e9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea2:	d037      	beq.n	8000f14 <__aeabi_fdiv+0x98>
 8000ea4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ea8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	bf38      	it	cc
 8000eb8:	005b      	lslcc	r3, r3, #1
 8000eba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ebe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	bf24      	itt	cs
 8000ec6:	1a5b      	subcs	r3, r3, r1
 8000ec8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ecc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ed6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ede:	bf24      	itt	cs
 8000ee0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ee8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	bf18      	it	ne
 8000efa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000efe:	d1e0      	bne.n	8000ec2 <__aeabi_fdiv+0x46>
 8000f00:	2afd      	cmp	r2, #253	@ 0xfd
 8000f02:	f63f af50 	bhi.w	8000da6 <__aeabi_fmul+0x92>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f0c:	bf08      	it	eq
 8000f0e:	f020 0001 	biceq.w	r0, r0, #1
 8000f12:	4770      	bx	lr
 8000f14:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f1c:	327f      	adds	r2, #127	@ 0x7f
 8000f1e:	bfc2      	ittt	gt
 8000f20:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f28:	4770      	bxgt	lr
 8000f2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	3a01      	subs	r2, #1
 8000f34:	e737      	b.n	8000da6 <__aeabi_fmul+0x92>
 8000f36:	f092 0f00 	teq	r2, #0
 8000f3a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f3e:	bf02      	ittt	eq
 8000f40:	0040      	lsleq	r0, r0, #1
 8000f42:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f46:	3a01      	subeq	r2, #1
 8000f48:	d0f9      	beq.n	8000f3e <__aeabi_fdiv+0xc2>
 8000f4a:	ea40 000c 	orr.w	r0, r0, ip
 8000f4e:	f093 0f00 	teq	r3, #0
 8000f52:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0049      	lsleq	r1, r1, #1
 8000f5a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f5e:	3b01      	subeq	r3, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fdiv+0xda>
 8000f62:	ea41 010c 	orr.w	r1, r1, ip
 8000f66:	e795      	b.n	8000e94 <__aeabi_fdiv+0x18>
 8000f68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d108      	bne.n	8000f84 <__aeabi_fdiv+0x108>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	f47f af7d 	bne.w	8000e72 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	f47f af70 	bne.w	8000e60 <__aeabi_fmul+0x14c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e776      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000f84:	ea93 0f0c 	teq	r3, ip
 8000f88:	d104      	bne.n	8000f94 <__aeabi_fdiv+0x118>
 8000f8a:	024b      	lsls	r3, r1, #9
 8000f8c:	f43f af4c 	beq.w	8000e28 <__aeabi_fmul+0x114>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e76e      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000f94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f98:	bf18      	it	ne
 8000f9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f9e:	d1ca      	bne.n	8000f36 <__aeabi_fdiv+0xba>
 8000fa0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fa4:	f47f af5c 	bne.w	8000e60 <__aeabi_fmul+0x14c>
 8000fa8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fac:	f47f af3c 	bne.w	8000e28 <__aeabi_fmul+0x114>
 8000fb0:	e75f      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000fb2:	bf00      	nop

08000fb4 <__gesf2>:
 8000fb4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fb8:	e006      	b.n	8000fc8 <__cmpsf2+0x4>
 8000fba:	bf00      	nop

08000fbc <__lesf2>:
 8000fbc:	f04f 0c01 	mov.w	ip, #1
 8000fc0:	e002      	b.n	8000fc8 <__cmpsf2+0x4>
 8000fc2:	bf00      	nop

08000fc4 <__cmpsf2>:
 8000fc4:	f04f 0c01 	mov.w	ip, #1
 8000fc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	bf18      	it	ne
 8000fda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fde:	d011      	beq.n	8001004 <__cmpsf2+0x40>
 8000fe0:	b001      	add	sp, #4
 8000fe2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fe6:	bf18      	it	ne
 8000fe8:	ea90 0f01 	teqne	r0, r1
 8000fec:	bf58      	it	pl
 8000fee:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff2:	bf88      	it	hi
 8000ff4:	17c8      	asrhi	r0, r1, #31
 8000ff6:	bf38      	it	cc
 8000ff8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ffc:	bf18      	it	ne
 8000ffe:	f040 0001 	orrne.w	r0, r0, #1
 8001002:	4770      	bx	lr
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	d102      	bne.n	8001010 <__cmpsf2+0x4c>
 800100a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800100e:	d105      	bne.n	800101c <__cmpsf2+0x58>
 8001010:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001014:	d1e4      	bne.n	8000fe0 <__cmpsf2+0x1c>
 8001016:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101a:	d0e1      	beq.n	8000fe0 <__cmpsf2+0x1c>
 800101c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__aeabi_cfrcmple>:
 8001024:	4684      	mov	ip, r0
 8001026:	4608      	mov	r0, r1
 8001028:	4661      	mov	r1, ip
 800102a:	e7ff      	b.n	800102c <__aeabi_cfcmpeq>

0800102c <__aeabi_cfcmpeq>:
 800102c:	b50f      	push	{r0, r1, r2, r3, lr}
 800102e:	f7ff ffc9 	bl	8000fc4 <__cmpsf2>
 8001032:	2800      	cmp	r0, #0
 8001034:	bf48      	it	mi
 8001036:	f110 0f00 	cmnmi.w	r0, #0
 800103a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800103c <__aeabi_fcmpeq>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff fff4 	bl	800102c <__aeabi_cfcmpeq>
 8001044:	bf0c      	ite	eq
 8001046:	2001      	moveq	r0, #1
 8001048:	2000      	movne	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmplt>:
 8001050:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001054:	f7ff ffea 	bl	800102c <__aeabi_cfcmpeq>
 8001058:	bf34      	ite	cc
 800105a:	2001      	movcc	r0, #1
 800105c:	2000      	movcs	r0, #0
 800105e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001062:	bf00      	nop

08001064 <__aeabi_fcmple>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff ffe0 	bl	800102c <__aeabi_cfcmpeq>
 800106c:	bf94      	ite	ls
 800106e:	2001      	movls	r0, #1
 8001070:	2000      	movhi	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmpge>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffd2 	bl	8001024 <__aeabi_cfrcmple>
 8001080:	bf94      	ite	ls
 8001082:	2001      	movls	r0, #1
 8001084:	2000      	movhi	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmpgt>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffc8 	bl	8001024 <__aeabi_cfrcmple>
 8001094:	bf34      	ite	cc
 8001096:	2001      	movcc	r0, #1
 8001098:	2000      	movcs	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_f2iz>:
 80010a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010a8:	d30f      	bcc.n	80010ca <__aeabi_f2iz+0x2a>
 80010aa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b2:	d90d      	bls.n	80010d0 <__aeabi_f2iz+0x30>
 80010b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010bc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010c0:	fa23 f002 	lsr.w	r0, r3, r2
 80010c4:	bf18      	it	ne
 80010c6:	4240      	negne	r0, r0
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr
 80010d0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010d4:	d101      	bne.n	80010da <__aeabi_f2iz+0x3a>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	d105      	bne.n	80010e6 <__aeabi_f2iz+0x46>
 80010da:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010de:	bf08      	it	eq
 80010e0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <__aeabi_uldivmod>:
 80010ec:	b953      	cbnz	r3, 8001104 <__aeabi_uldivmod+0x18>
 80010ee:	b94a      	cbnz	r2, 8001104 <__aeabi_uldivmod+0x18>
 80010f0:	2900      	cmp	r1, #0
 80010f2:	bf08      	it	eq
 80010f4:	2800      	cmpeq	r0, #0
 80010f6:	bf1c      	itt	ne
 80010f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80010fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001100:	f000 b968 	b.w	80013d4 <__aeabi_idiv0>
 8001104:	f1ad 0c08 	sub.w	ip, sp, #8
 8001108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800110c:	f000 f806 	bl	800111c <__udivmoddi4>
 8001110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <__udivmoddi4>:
 800111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001120:	9d08      	ldr	r5, [sp, #32]
 8001122:	460c      	mov	r4, r1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d14e      	bne.n	80011c6 <__udivmoddi4+0xaa>
 8001128:	4694      	mov	ip, r2
 800112a:	458c      	cmp	ip, r1
 800112c:	4686      	mov	lr, r0
 800112e:	fab2 f282 	clz	r2, r2
 8001132:	d962      	bls.n	80011fa <__udivmoddi4+0xde>
 8001134:	b14a      	cbz	r2, 800114a <__udivmoddi4+0x2e>
 8001136:	f1c2 0320 	rsb	r3, r2, #32
 800113a:	4091      	lsls	r1, r2
 800113c:	fa20 f303 	lsr.w	r3, r0, r3
 8001140:	fa0c fc02 	lsl.w	ip, ip, r2
 8001144:	4319      	orrs	r1, r3
 8001146:	fa00 fe02 	lsl.w	lr, r0, r2
 800114a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800114e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001152:	fb07 1114 	mls	r1, r7, r4, r1
 8001156:	fa1f f68c 	uxth.w	r6, ip
 800115a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800115e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001162:	fb04 f106 	mul.w	r1, r4, r6
 8001166:	4299      	cmp	r1, r3
 8001168:	d90a      	bls.n	8001180 <__udivmoddi4+0x64>
 800116a:	eb1c 0303 	adds.w	r3, ip, r3
 800116e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001172:	f080 8110 	bcs.w	8001396 <__udivmoddi4+0x27a>
 8001176:	4299      	cmp	r1, r3
 8001178:	f240 810d 	bls.w	8001396 <__udivmoddi4+0x27a>
 800117c:	3c02      	subs	r4, #2
 800117e:	4463      	add	r3, ip
 8001180:	1a59      	subs	r1, r3, r1
 8001182:	fbb1 f0f7 	udiv	r0, r1, r7
 8001186:	fb07 1110 	mls	r1, r7, r0, r1
 800118a:	fb00 f606 	mul.w	r6, r0, r6
 800118e:	fa1f f38e 	uxth.w	r3, lr
 8001192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001196:	429e      	cmp	r6, r3
 8001198:	d90a      	bls.n	80011b0 <__udivmoddi4+0x94>
 800119a:	eb1c 0303 	adds.w	r3, ip, r3
 800119e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80011a2:	f080 80fa 	bcs.w	800139a <__udivmoddi4+0x27e>
 80011a6:	429e      	cmp	r6, r3
 80011a8:	f240 80f7 	bls.w	800139a <__udivmoddi4+0x27e>
 80011ac:	4463      	add	r3, ip
 80011ae:	3802      	subs	r0, #2
 80011b0:	2100      	movs	r1, #0
 80011b2:	1b9b      	subs	r3, r3, r6
 80011b4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011b8:	b11d      	cbz	r5, 80011c2 <__udivmoddi4+0xa6>
 80011ba:	40d3      	lsrs	r3, r2
 80011bc:	2200      	movs	r2, #0
 80011be:	e9c5 3200 	strd	r3, r2, [r5]
 80011c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c6:	428b      	cmp	r3, r1
 80011c8:	d905      	bls.n	80011d6 <__udivmoddi4+0xba>
 80011ca:	b10d      	cbz	r5, 80011d0 <__udivmoddi4+0xb4>
 80011cc:	e9c5 0100 	strd	r0, r1, [r5]
 80011d0:	2100      	movs	r1, #0
 80011d2:	4608      	mov	r0, r1
 80011d4:	e7f5      	b.n	80011c2 <__udivmoddi4+0xa6>
 80011d6:	fab3 f183 	clz	r1, r3
 80011da:	2900      	cmp	r1, #0
 80011dc:	d146      	bne.n	800126c <__udivmoddi4+0x150>
 80011de:	42a3      	cmp	r3, r4
 80011e0:	d302      	bcc.n	80011e8 <__udivmoddi4+0xcc>
 80011e2:	4290      	cmp	r0, r2
 80011e4:	f0c0 80ee 	bcc.w	80013c4 <__udivmoddi4+0x2a8>
 80011e8:	1a86      	subs	r6, r0, r2
 80011ea:	eb64 0303 	sbc.w	r3, r4, r3
 80011ee:	2001      	movs	r0, #1
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d0e6      	beq.n	80011c2 <__udivmoddi4+0xa6>
 80011f4:	e9c5 6300 	strd	r6, r3, [r5]
 80011f8:	e7e3      	b.n	80011c2 <__udivmoddi4+0xa6>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	f040 808f 	bne.w	800131e <__udivmoddi4+0x202>
 8001200:	eba1 040c 	sub.w	r4, r1, ip
 8001204:	2101      	movs	r1, #1
 8001206:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800120a:	fa1f f78c 	uxth.w	r7, ip
 800120e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001212:	fb08 4416 	mls	r4, r8, r6, r4
 8001216:	fb07 f006 	mul.w	r0, r7, r6
 800121a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800121e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001222:	4298      	cmp	r0, r3
 8001224:	d908      	bls.n	8001238 <__udivmoddi4+0x11c>
 8001226:	eb1c 0303 	adds.w	r3, ip, r3
 800122a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800122e:	d202      	bcs.n	8001236 <__udivmoddi4+0x11a>
 8001230:	4298      	cmp	r0, r3
 8001232:	f200 80cb 	bhi.w	80013cc <__udivmoddi4+0x2b0>
 8001236:	4626      	mov	r6, r4
 8001238:	1a1c      	subs	r4, r3, r0
 800123a:	fbb4 f0f8 	udiv	r0, r4, r8
 800123e:	fb08 4410 	mls	r4, r8, r0, r4
 8001242:	fb00 f707 	mul.w	r7, r0, r7
 8001246:	fa1f f38e 	uxth.w	r3, lr
 800124a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800124e:	429f      	cmp	r7, r3
 8001250:	d908      	bls.n	8001264 <__udivmoddi4+0x148>
 8001252:	eb1c 0303 	adds.w	r3, ip, r3
 8001256:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800125a:	d202      	bcs.n	8001262 <__udivmoddi4+0x146>
 800125c:	429f      	cmp	r7, r3
 800125e:	f200 80ae 	bhi.w	80013be <__udivmoddi4+0x2a2>
 8001262:	4620      	mov	r0, r4
 8001264:	1bdb      	subs	r3, r3, r7
 8001266:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800126a:	e7a5      	b.n	80011b8 <__udivmoddi4+0x9c>
 800126c:	f1c1 0720 	rsb	r7, r1, #32
 8001270:	408b      	lsls	r3, r1
 8001272:	fa22 fc07 	lsr.w	ip, r2, r7
 8001276:	ea4c 0c03 	orr.w	ip, ip, r3
 800127a:	fa24 f607 	lsr.w	r6, r4, r7
 800127e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001282:	fbb6 f8f9 	udiv	r8, r6, r9
 8001286:	fa1f fe8c 	uxth.w	lr, ip
 800128a:	fb09 6618 	mls	r6, r9, r8, r6
 800128e:	fa20 f307 	lsr.w	r3, r0, r7
 8001292:	408c      	lsls	r4, r1
 8001294:	fa00 fa01 	lsl.w	sl, r0, r1
 8001298:	fb08 f00e 	mul.w	r0, r8, lr
 800129c:	431c      	orrs	r4, r3
 800129e:	0c23      	lsrs	r3, r4, #16
 80012a0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012a4:	4298      	cmp	r0, r3
 80012a6:	fa02 f201 	lsl.w	r2, r2, r1
 80012aa:	d90a      	bls.n	80012c2 <__udivmoddi4+0x1a6>
 80012ac:	eb1c 0303 	adds.w	r3, ip, r3
 80012b0:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 80012b4:	f080 8081 	bcs.w	80013ba <__udivmoddi4+0x29e>
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d97e      	bls.n	80013ba <__udivmoddi4+0x29e>
 80012bc:	f1a8 0802 	sub.w	r8, r8, #2
 80012c0:	4463      	add	r3, ip
 80012c2:	1a1e      	subs	r6, r3, r0
 80012c4:	fbb6 f3f9 	udiv	r3, r6, r9
 80012c8:	fb09 6613 	mls	r6, r9, r3, r6
 80012cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80012d0:	b2a4      	uxth	r4, r4
 80012d2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012d6:	45a6      	cmp	lr, r4
 80012d8:	d908      	bls.n	80012ec <__udivmoddi4+0x1d0>
 80012da:	eb1c 0404 	adds.w	r4, ip, r4
 80012de:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80012e2:	d266      	bcs.n	80013b2 <__udivmoddi4+0x296>
 80012e4:	45a6      	cmp	lr, r4
 80012e6:	d964      	bls.n	80013b2 <__udivmoddi4+0x296>
 80012e8:	3b02      	subs	r3, #2
 80012ea:	4464      	add	r4, ip
 80012ec:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012f0:	fba0 8302 	umull	r8, r3, r0, r2
 80012f4:	eba4 040e 	sub.w	r4, r4, lr
 80012f8:	429c      	cmp	r4, r3
 80012fa:	46c6      	mov	lr, r8
 80012fc:	461e      	mov	r6, r3
 80012fe:	d350      	bcc.n	80013a2 <__udivmoddi4+0x286>
 8001300:	d04d      	beq.n	800139e <__udivmoddi4+0x282>
 8001302:	b155      	cbz	r5, 800131a <__udivmoddi4+0x1fe>
 8001304:	ebba 030e 	subs.w	r3, sl, lr
 8001308:	eb64 0406 	sbc.w	r4, r4, r6
 800130c:	fa04 f707 	lsl.w	r7, r4, r7
 8001310:	40cb      	lsrs	r3, r1
 8001312:	431f      	orrs	r7, r3
 8001314:	40cc      	lsrs	r4, r1
 8001316:	e9c5 7400 	strd	r7, r4, [r5]
 800131a:	2100      	movs	r1, #0
 800131c:	e751      	b.n	80011c2 <__udivmoddi4+0xa6>
 800131e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001322:	f1c2 0320 	rsb	r3, r2, #32
 8001326:	40d9      	lsrs	r1, r3
 8001328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800132c:	fa20 f303 	lsr.w	r3, r0, r3
 8001330:	fa00 fe02 	lsl.w	lr, r0, r2
 8001334:	fbb1 f0f8 	udiv	r0, r1, r8
 8001338:	fb08 1110 	mls	r1, r8, r0, r1
 800133c:	4094      	lsls	r4, r2
 800133e:	431c      	orrs	r4, r3
 8001340:	fa1f f78c 	uxth.w	r7, ip
 8001344:	0c23      	lsrs	r3, r4, #16
 8001346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800134a:	fb00 f107 	mul.w	r1, r0, r7
 800134e:	4299      	cmp	r1, r3
 8001350:	d908      	bls.n	8001364 <__udivmoddi4+0x248>
 8001352:	eb1c 0303 	adds.w	r3, ip, r3
 8001356:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800135a:	d22c      	bcs.n	80013b6 <__udivmoddi4+0x29a>
 800135c:	4299      	cmp	r1, r3
 800135e:	d92a      	bls.n	80013b6 <__udivmoddi4+0x29a>
 8001360:	3802      	subs	r0, #2
 8001362:	4463      	add	r3, ip
 8001364:	1a5b      	subs	r3, r3, r1
 8001366:	fbb3 f1f8 	udiv	r1, r3, r8
 800136a:	fb08 3311 	mls	r3, r8, r1, r3
 800136e:	b2a4      	uxth	r4, r4
 8001370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001374:	fb01 f307 	mul.w	r3, r1, r7
 8001378:	42a3      	cmp	r3, r4
 800137a:	d908      	bls.n	800138e <__udivmoddi4+0x272>
 800137c:	eb1c 0404 	adds.w	r4, ip, r4
 8001380:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001384:	d213      	bcs.n	80013ae <__udivmoddi4+0x292>
 8001386:	42a3      	cmp	r3, r4
 8001388:	d911      	bls.n	80013ae <__udivmoddi4+0x292>
 800138a:	3902      	subs	r1, #2
 800138c:	4464      	add	r4, ip
 800138e:	1ae4      	subs	r4, r4, r3
 8001390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001394:	e73b      	b.n	800120e <__udivmoddi4+0xf2>
 8001396:	4604      	mov	r4, r0
 8001398:	e6f2      	b.n	8001180 <__udivmoddi4+0x64>
 800139a:	4608      	mov	r0, r1
 800139c:	e708      	b.n	80011b0 <__udivmoddi4+0x94>
 800139e:	45c2      	cmp	sl, r8
 80013a0:	d2af      	bcs.n	8001302 <__udivmoddi4+0x1e6>
 80013a2:	ebb8 0e02 	subs.w	lr, r8, r2
 80013a6:	eb63 060c 	sbc.w	r6, r3, ip
 80013aa:	3801      	subs	r0, #1
 80013ac:	e7a9      	b.n	8001302 <__udivmoddi4+0x1e6>
 80013ae:	4631      	mov	r1, r6
 80013b0:	e7ed      	b.n	800138e <__udivmoddi4+0x272>
 80013b2:	4603      	mov	r3, r0
 80013b4:	e79a      	b.n	80012ec <__udivmoddi4+0x1d0>
 80013b6:	4630      	mov	r0, r6
 80013b8:	e7d4      	b.n	8001364 <__udivmoddi4+0x248>
 80013ba:	46b0      	mov	r8, r6
 80013bc:	e781      	b.n	80012c2 <__udivmoddi4+0x1a6>
 80013be:	4463      	add	r3, ip
 80013c0:	3802      	subs	r0, #2
 80013c2:	e74f      	b.n	8001264 <__udivmoddi4+0x148>
 80013c4:	4606      	mov	r6, r0
 80013c6:	4623      	mov	r3, r4
 80013c8:	4608      	mov	r0, r1
 80013ca:	e711      	b.n	80011f0 <__udivmoddi4+0xd4>
 80013cc:	3e02      	subs	r6, #2
 80013ce:	4463      	add	r3, ip
 80013d0:	e732      	b.n	8001238 <__udivmoddi4+0x11c>
 80013d2:	bf00      	nop

080013d4 <__aeabi_idiv0>:
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <main>:
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/* Main entry point ----------------------------------------------------------*/
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  HAL_Init();                       // Reset of all peripherals, init Flash and Systick
 80013dc:	f001 fbf3 	bl	8002bc6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  SystemClock_Config();            // Configure system clock
 80013e0:	f000 f882 	bl	80014e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  MX_GPIO_Init();
 80013e4:	f000 faae 	bl	8001944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013e8:	f000 fa58 	bl	800189c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013ec:	f000 fa80 	bl	80018f0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80013f0:	f000 f920 	bl	8001634 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013f4:	f000 f970 	bl	80016d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013f8:	f000 f9c4 	bl	8001784 <MX_TIM4_Init>
  MX_TIM6_Init();
 80013fc:	f000 fa18 	bl	8001830 <MX_TIM6_Init>
  MX_ADC_Init();
 8001400:	f000 f8c0 	bl	8001584 <MX_ADC_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001404:	2104      	movs	r1, #4
 8001406:	482d      	ldr	r0, [pc, #180]	@ (80014bc <main+0xe4>)
 8001408:	f003 fa82 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800140c:	2100      	movs	r1, #0
 800140e:	482c      	ldr	r0, [pc, #176]	@ (80014c0 <main+0xe8>)
 8001410:	f003 fa7e 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001414:	482b      	ldr	r0, [pc, #172]	@ (80014c4 <main+0xec>)
 8001416:	f003 f9e9 	bl	80047ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800141a:	2100      	movs	r1, #0
 800141c:	482a      	ldr	r0, [pc, #168]	@ (80014c8 <main+0xf0>)
 800141e:	f003 fb4d 	bl	8004abc <HAL_TIM_IC_Start_IT>

  start_uart_receive();
 8001422:	f000 fedd 	bl	80021e0 <start_uart_receive>

  /* Infinite loop -----------------------------------------------------------*/
  while (1)
  {
    /* USER CODE BEGIN WHILE */
    Rx_commandes();
 8001426:	f000 fe33 	bl	8002090 <Rx_commandes>

    switch (current_state)
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <main+0xf4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b04      	cmp	r3, #4
 8001430:	dc3e      	bgt.n	80014b0 <main+0xd8>
 8001432:	2b03      	cmp	r3, #3
 8001434:	da16      	bge.n	8001464 <main+0x8c>
 8001436:	2b00      	cmp	r3, #0
 8001438:	d033      	beq.n	80014a2 <main+0xca>
 800143a:	2b00      	cmp	r3, #0
 800143c:	db38      	blt.n	80014b0 <main+0xd8>
 800143e:	3b01      	subs	r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d835      	bhi.n	80014b0 <main+0xd8>
    {
      case AVANCER:
      case ARRIERE:
        if ((encodeur_L + encodeur_R) / 2 >= target_ticks)
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <main+0xf8>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <main+0xfc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4413      	add	r3, r2
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	4a21      	ldr	r2, [pc, #132]	@ (80014d8 <main+0x100>)
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	4293      	cmp	r3, r2
 8001456:	d32d      	bcc.n	80014b4 <main+0xdc>
        {
          stop_robot();
 8001458:	f000 fc1c 	bl	8001c94 <stop_robot>
          current_state = IDLE;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <main+0xf4>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001462:	e027      	b.n	80014b4 <main+0xdc>

      case TOURNER_GAUCHE:
      case TOURNER_DROITE:
        if (abs(Angle) >= fabsf(target_angle))
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <main+0x104>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe19 	bl	80010a0 <__aeabi_f2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bfb8      	it	lt
 8001474:	425b      	neglt	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fbf8 	bl	8000c6c <__aeabi_i2f>
 800147c:	4602      	mov	r2, r0
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <main+0x108>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fdf5 	bl	8001078 <__aeabi_fcmpge>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d100      	bne.n	8001496 <main+0xbe>
        {
          stop_robot();
          current_state = IDLE;
        }
        break;
 8001494:	e011      	b.n	80014ba <main+0xe2>
          stop_robot();
 8001496:	f000 fbfd 	bl	8001c94 <stop_robot>
          current_state = IDLE;
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <main+0xf4>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
        break;
 80014a0:	e00b      	b.n	80014ba <main+0xe2>

      case IDLE:
        if (auto_enabled)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <main+0x10c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <main+0xe0>
        {
          auto_mode();
 80014aa:	f000 fdbb 	bl	8002024 <auto_mode>
        }
        break;
 80014ae:	e003      	b.n	80014b8 <main+0xe0>

      default:
        break;
 80014b0:	bf00      	nop
 80014b2:	e7b8      	b.n	8001426 <main+0x4e>
        break;
 80014b4:	bf00      	nop
 80014b6:	e7b6      	b.n	8001426 <main+0x4e>
        break;
 80014b8:	bf00      	nop
    Rx_commandes();
 80014ba:	e7b4      	b.n	8001426 <main+0x4e>
 80014bc:	20000288 	.word	0x20000288
 80014c0:	200002c8 	.word	0x200002c8
 80014c4:	20000308 	.word	0x20000308
 80014c8:	20000248 	.word	0x20000248
 80014cc:	200003e6 	.word	0x200003e6
 80014d0:	200003fc 	.word	0x200003fc
 80014d4:	20000400 	.word	0x20000400
 80014d8:	200003e8 	.word	0x200003e8
 80014dc:	200004a0 	.word	0x200004a0
 80014e0:	200003ec 	.word	0x200003ec
 80014e4:	200003f0 	.word	0x200003f0

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b092      	sub	sp, #72	@ 0x48
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2234      	movs	r2, #52	@ 0x34
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fd75 	bl	8006fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <SystemClock_Config+0x98>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001512:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <SystemClock_Config+0x98>)
 8001514:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001518:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151a:	2302      	movs	r3, #2
 800151c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001522:	2310      	movs	r3, #16
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152a:	2300      	movs	r3, #0
 800152c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800152e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001532:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001534:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001538:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fb1e 	bl	8003b80 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800154a:	f000 fad9 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2303      	movs	r3, #3
 8001554:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	2101      	movs	r1, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fe3a 	bl	80041e0 <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001572:	f000 fac5 	bl	8001b00 <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3748      	adds	r7, #72	@ 0x48
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40007000 	.word	0x40007000

08001584 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <MX_ADC_Init+0xa8>)
 8001596:	4a26      	ldr	r2, [pc, #152]	@ (8001630 <MX_ADC_Init+0xac>)
 8001598:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <MX_ADC_Init+0xa8>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <MX_ADC_Init+0xa8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <MX_ADC_Init+0xa8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <MX_ADC_Init+0xa8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_ADC_Init+0xa8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_ADC_Init+0xa8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_ADC_Init+0xa8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <MX_ADC_Init+0xa8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_ADC_Init+0xa8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <MX_ADC_Init+0xa8>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <MX_ADC_Init+0xa8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <MX_ADC_Init+0xa8>)
 80015e2:	2210      	movs	r2, #16
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_ADC_Init+0xa8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_ADC_Init+0xa8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <MX_ADC_Init+0xa8>)
 80015f6:	f001 fb55 	bl	8002ca4 <HAL_ADC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001600:	f000 fa7e 	bl	8001b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001604:	2308      	movs	r3, #8
 8001606:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001608:	2301      	movs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_ADC_Init+0xa8>)
 8001616:	f001 fd87 	bl	8003128 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001620:	f000 fa6e 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200001f4 	.word	0x200001f4
 8001630:	40012400 	.word	0x40012400

08001634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001650:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 8001652:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 800165a:	221f      	movs	r2, #31
 800165c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 8001666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800166a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001678:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 800167a:	f003 f9df 	bl	8004a3c <HAL_TIM_IC_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001684:	f000 fa3c 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	480f      	ldr	r0, [pc, #60]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 8001698:	f004 f80e 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016a2:	f000 fa2d 	bl	8001b00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016aa:	2301      	movs	r3, #1
 80016ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_TIM2_Init+0xa0>)
 80016be:	f003 fb99 	bl	8004df4 <HAL_TIM_IC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80016c8:	f000 fa1a 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000248 	.word	0x20000248

080016d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f4:	4b21      	ldr	r3, [pc, #132]	@ (800177c <MX_TIM3_Init+0xa4>)
 80016f6:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <MX_TIM3_Init+0xa8>)
 80016f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 80016fa:	4b20      	ldr	r3, [pc, #128]	@ (800177c <MX_TIM3_Init+0xa4>)
 80016fc:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <MX_TIM3_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_TIM3_Init+0xa4>)
 800170a:	2264      	movs	r2, #100	@ 0x64
 800170c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_TIM3_Init+0xa4>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_TIM3_Init+0xa4>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800171a:	4818      	ldr	r0, [pc, #96]	@ (800177c <MX_TIM3_Init+0xa4>)
 800171c:	f003 f8b8 	bl	8004890 <HAL_TIM_PWM_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001726:	f000 f9eb 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4619      	mov	r1, r3
 8001738:	4810      	ldr	r0, [pc, #64]	@ (800177c <MX_TIM3_Init+0xa4>)
 800173a:	f003 ffbd 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001744:	f000 f9dc 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001748:	2360      	movs	r3, #96	@ 0x60
 800174a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	2204      	movs	r2, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	@ (800177c <MX_TIM3_Init+0xa4>)
 8001760:	f003 fbe4 	bl	8004f2c <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800176a:	f000 f9c9 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800176e:	4803      	ldr	r0, [pc, #12]	@ (800177c <MX_TIM3_Init+0xa4>)
 8001770:	f000 fff4 	bl	800275c <HAL_TIM_MspPostInit>

}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000288 	.word	0x20000288
 8001780:	40000400 	.word	0x40000400

08001784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017a2:	4a22      	ldr	r2, [pc, #136]	@ (800182c <MX_TIM4_Init+0xa8>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017a8:	f240 623f 	movw	r2, #1599	@ 0x63f
 80017ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017b6:	2264      	movs	r2, #100	@ 0x64
 80017b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017c6:	4818      	ldr	r0, [pc, #96]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017c8:	f003 f862 	bl	8004890 <HAL_TIM_PWM_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017d2:	f000 f995 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	4810      	ldr	r0, [pc, #64]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017e6:	f003 ff67 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80017f0:	f000 f986 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	@ 0x60
 80017f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <MX_TIM4_Init+0xa4>)
 800180c:	f003 fb8e 	bl	8004f2c <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001816:	f000 f973 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800181a:	4803      	ldr	r0, [pc, #12]	@ (8001828 <MX_TIM4_Init+0xa4>)
 800181c:	f000 ff9e 	bl	800275c <HAL_TIM_MspPostInit>

}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200002c8 	.word	0x200002c8
 800182c:	40000800 	.word	0x40000800

08001830 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <MX_TIM6_Init+0x64>)
 8001840:	4a15      	ldr	r2, [pc, #84]	@ (8001898 <MX_TIM6_Init+0x68>)
 8001842:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <MX_TIM6_Init+0x64>)
 8001846:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800184a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_TIM6_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <MX_TIM6_Init+0x64>)
 8001854:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001858:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_TIM6_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <MX_TIM6_Init+0x64>)
 8001862:	f002 ff83 	bl	800476c <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800186c:	f000 f948 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_TIM6_Init+0x64>)
 800187e:	f003 ff1b 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001888:	f000 f93a 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000308 	.word	0x20000308
 8001898:	40001000 	.word	0x40001000

0800189c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <MX_USART2_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f003 ff4e 	bl	8005774 <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f000 f90f 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000348 	.word	0x20000348
 80018ec:	40004400 	.word	0x40004400

080018f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <MX_USART3_UART_Init+0x50>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <MX_USART3_UART_Init+0x4c>)
 8001928:	f003 ff24 	bl	8005774 <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001932:	f000 f8e5 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000390 	.word	0x20000390
 8001940:	40004800 	.word	0x40004800

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a44 <MX_GPIO_Init+0x100>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a39      	ldr	r2, [pc, #228]	@ (8001a44 <MX_GPIO_Init+0x100>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <MX_GPIO_Init+0x100>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <MX_GPIO_Init+0x100>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a33      	ldr	r2, [pc, #204]	@ (8001a44 <MX_GPIO_Init+0x100>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <MX_GPIO_Init+0x100>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <MX_GPIO_Init+0x100>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a44 <MX_GPIO_Init+0x100>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <MX_GPIO_Init+0x100>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <MX_GPIO_Init+0x100>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a27      	ldr	r2, [pc, #156]	@ (8001a44 <MX_GPIO_Init+0x100>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <MX_GPIO_Init+0x100>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f240 3102 	movw	r1, #770	@ 0x302
 80019c0:	4821      	ldr	r0, [pc, #132]	@ (8001a48 <MX_GPIO_Init+0x104>)
 80019c2:	f002 f8ac 	bl	8003b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Trig_Pin DIR1_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|DIR1_Pin|DIR2_Pin;
 80019c6:	f240 3302 	movw	r3, #770	@ 0x302
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	481a      	ldr	r0, [pc, #104]	@ (8001a48 <MX_GPIO_Init+0x104>)
 80019e0:	f001 fef6 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_Pin */
  GPIO_InitStruct.Pin = ENC1_Pin;
 80019e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019ea:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC1_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4813      	ldr	r0, [pc, #76]	@ (8001a48 <MX_GPIO_Init+0x104>)
 80019fc:	f001 fee8 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_Pin */
  GPIO_InitStruct.Pin = ENC2_Pin;
 8001a00:	2308      	movs	r3, #8
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a04:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC2_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <MX_GPIO_Init+0x108>)
 8001a16:	f001 fedb 	bl	80037d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 2);
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2009      	movs	r0, #9
 8001a20:	f001 fe21 	bl	8003666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a24:	2009      	movs	r0, #9
 8001a26:	f001 fe3a 	bl	800369e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2028      	movs	r0, #40	@ 0x28
 8001a30:	f001 fe19 	bl	8003666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a34:	2028      	movs	r0, #40	@ 0x28
 8001a36:	f001 fe32 	bl	800369e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	@ 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400

08001a50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//  interruption TMER6
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x16>
     update_and_transmit_data();
 8001a62:	f000 f895 	bl	8001b90 <update_and_transmit_data>
    }
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40001000 	.word	0x40001000

08001a74 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <HAL_UART_TxCpltCallback+0x24>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d102      	bne.n	8001a8c <HAL_UART_TxCpltCallback+0x18>
	        TX_busy = 0;
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_UART_TxCpltCallback+0x28>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
	    }
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40004800 	.word	0x40004800
 8001a9c:	20000484 	.word	0x20000484

08001aa0 <HAL_UART_RxCpltCallback>:


// Interruption UART RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a10      	ldr	r2, [pc, #64]	@ (8001af0 <HAL_UART_RxCpltCallback+0x50>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d118      	bne.n	8001ae4 <HAL_UART_RxCpltCallback+0x44>
		if (rx_data != '\n') {
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <HAL_UART_RxCpltCallback+0x54>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b0a      	cmp	r3, #10
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_UART_RxCpltCallback+0x32>
			rx_buffer[rx_index++] = rx_data;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_UART_RxCpltCallback+0x58>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	b2d1      	uxtb	r1, r2
 8001ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <HAL_UART_RxCpltCallback+0x58>)
 8001ac4:	7011      	strb	r1, [r2, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_UART_RxCpltCallback+0x54>)
 8001aca:	7819      	ldrb	r1, [r3, #0]
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_UART_RxCpltCallback+0x5c>)
 8001ace:	5499      	strb	r1, [r3, r2]
 8001ad0:	e008      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x44>
		}else {
			 rx_buffer[rx_index] = '\0';
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_UART_RxCpltCallback+0x58>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_UART_RxCpltCallback+0x5c>)
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]
			 rx_index = 0 ;
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_UART_RxCpltCallback+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]

		}
	}
			start_uart_receive() ;
 8001ae4:	f000 fb7c 	bl	80021e0 <start_uart_receive>
	}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40004800 	.word	0x40004800
 8001af4:	20000404 	.word	0x20000404
 8001af8:	20000448 	.word	0x20000448
 8001afc:	20000408 	.word	0x20000408

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <Error_Handler+0x8>

08001b0c <Measure_battery>:
float distancetotale = 0.0f;
float Angle = 0.0f;

/* -------------------- FONCTIONS UTILITAIRES -------------------- */

uint32_t Measure_battery(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc);
 8001b12:	481a      	ldr	r0, [pc, #104]	@ (8001b7c <Measure_battery+0x70>)
 8001b14:	f001 fa0c 	bl	8002f30 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, 20);
 8001b18:	2114      	movs	r1, #20
 8001b1a:	4818      	ldr	r0, [pc, #96]	@ (8001b7c <Measure_battery+0x70>)
 8001b1c:	f001 fa68 	bl	8002ff0 <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(&hadc);
 8001b20:	4816      	ldr	r0, [pc, #88]	@ (8001b7c <Measure_battery+0x70>)
 8001b22:	f001 faf5 	bl	8003110 <HAL_ADC_GetValue>
 8001b26:	60f8      	str	r0, [r7, #12]
    float V_shunt = (adc_value * 3.3f) / 4096.0f;
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff f89b 	bl	8000c64 <__aeabi_ui2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4913      	ldr	r1, [pc, #76]	@ (8001b80 <Measure_battery+0x74>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8ee 	bl	8000d14 <__aeabi_fmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f99c 	bl	8000e7c <__aeabi_fdiv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	60bb      	str	r3, [r7, #8]
    float gain_diviseur = (10000.0f + 4700.0f) / 4700.0f;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <Measure_battery+0x78>)
 8001b4a:	607b      	str	r3, [r7, #4]
    float V_batterie = gain_diviseur * V_shunt;
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff f8e0 	bl	8000d14 <__aeabi_fmul>
 8001b54:	4603      	mov	r3, r0
 8001b56:	603b      	str	r3, [r7, #0]
    return (int)((V_batterie * 100.0f) / 8.4f);
 8001b58:	490b      	ldr	r1, [pc, #44]	@ (8001b88 <Measure_battery+0x7c>)
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f7ff f8da 	bl	8000d14 <__aeabi_fmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	490a      	ldr	r1, [pc, #40]	@ (8001b8c <Measure_battery+0x80>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff f989 	bl	8000e7c <__aeabi_fdiv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fa97 	bl	80010a0 <__aeabi_f2iz>
 8001b72:	4603      	mov	r3, r0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200001f4 	.word	0x200001f4
 8001b80:	40533333 	.word	0x40533333
 8001b84:	40482b93 	.word	0x40482b93
 8001b88:	42c80000 	.word	0x42c80000
 8001b8c:	41066666 	.word	0x41066666

08001b90 <update_and_transmit_data>:



void update_and_transmit_data(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af04      	add	r7, sp, #16
    battery_level = Measure_battery();
 8001b96:	f7ff ffb9 	bl	8001b0c <Measure_battery>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <update_and_transmit_data+0x70>)
 8001ba0:	601a      	str	r2, [r3, #0]

    uart_buffer_len = snprintf(uart_buffer, sizeof(uart_buffer), "%.2f;%d\r\n", distancetotale, battery_level);
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <update_and_transmit_data+0x74>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fc56 	bl	8000458 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4913      	ldr	r1, [pc, #76]	@ (8001c00 <update_and_transmit_data+0x70>)
 8001bb2:	6809      	ldr	r1, [r1, #0]
 8001bb4:	9102      	str	r1, [sp, #8]
 8001bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8001bba:	4a13      	ldr	r2, [pc, #76]	@ (8001c08 <update_and_transmit_data+0x78>)
 8001bbc:	2132      	movs	r1, #50	@ 0x32
 8001bbe:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <update_and_transmit_data+0x7c>)
 8001bc0:	f005 f99a 	bl	8006ef8 <sniprintf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <update_and_transmit_data+0x80>)
 8001bc8:	6013      	str	r3, [r2, #0]

    if (uart_buffer_len > 0 && uart_buffer_len < sizeof(uart_buffer)) {
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <update_and_transmit_data+0x80>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	dd13      	ble.n	8001bfa <update_and_transmit_data+0x6a>
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <update_and_transmit_data+0x80>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b31      	cmp	r3, #49	@ 0x31
 8001bd8:	d80f      	bhi.n	8001bfa <update_and_transmit_data+0x6a>
        if (TX_busy == 0) {
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <update_and_transmit_data+0x84>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <update_and_transmit_data+0x6a>
            TX_busy = 1;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <update_and_transmit_data+0x84>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart3, (uint8_t *)uart_buffer, uart_buffer_len);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <update_and_transmit_data+0x80>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4906      	ldr	r1, [pc, #24]	@ (8001c0c <update_and_transmit_data+0x7c>)
 8001bf4:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <update_and_transmit_data+0x88>)
 8001bf6:	f003 fe0d 	bl	8005814 <HAL_UART_Transmit_IT>
        }
    }
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000048c 	.word	0x2000048c
 8001c04:	2000049c 	.word	0x2000049c
 8001c08:	080091a8 	.word	0x080091a8
 8001c0c:	2000044c 	.word	0x2000044c
 8001c10:	20000480 	.word	0x20000480
 8001c14:	20000484 	.word	0x20000484
 8001c18:	20000390 	.word	0x20000390

08001c1c <move_m1>:

/* -------------------- CONTROLE DES MOTEURS -------------------- */

void move_m1(GPIO_PinState dir, uint8_t duty_cycle) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	460a      	mov	r2, r1
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	71bb      	strb	r3, [r7, #6]
    if (duty_cycle > 80) return;
 8001c2c:	79bb      	ldrb	r3, [r7, #6]
 8001c2e:	2b50      	cmp	r3, #80	@ 0x50
 8001c30:	d80a      	bhi.n	8001c48 <move_m1+0x2c>
    HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, dir);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	461a      	mov	r2, r3
 8001c36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <move_m1+0x34>)
 8001c3c:	f001 ff6f 	bl	8003b1e <HAL_GPIO_WritePin>
    TIM3->CCR2 = duty_cycle;
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <move_m1+0x38>)
 8001c42:	79bb      	ldrb	r3, [r7, #6]
 8001c44:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c46:	e000      	b.n	8001c4a <move_m1+0x2e>
    if (duty_cycle > 80) return;
 8001c48:	bf00      	nop
}
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40000400 	.word	0x40000400

08001c58 <move_m2>:

void move_m2(GPIO_PinState dir, uint8_t duty_cycle) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]
    if (duty_cycle > 80) return;
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	2b50      	cmp	r3, #80	@ 0x50
 8001c6c:	d80a      	bhi.n	8001c84 <move_m2+0x2c>
    HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, dir);
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	461a      	mov	r2, r3
 8001c72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <move_m2+0x34>)
 8001c78:	f001 ff51 	bl	8003b1e <HAL_GPIO_WritePin>
    TIM4->CCR1 = duty_cycle;
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <move_m2+0x38>)
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c82:	e000      	b.n	8001c86 <move_m2+0x2e>
    if (duty_cycle > 80) return;
 8001c84:	bf00      	nop
}
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40000800 	.word	0x40000800

08001c94 <stop_robot>:

void stop_robot(void) {
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
    Angle = 0;
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <stop_robot+0x40>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
    encodeur1_cnt = encodeur2_cnt = encodeur_L = encodeur_R = 0;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <stop_robot+0x44>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <stop_robot+0x44>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <stop_robot+0x48>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <stop_robot+0x48>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce0 <stop_robot+0x4c>)
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <stop_robot+0x4c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <stop_robot+0x50>)
 8001cbc:	6013      	str	r3, [r2, #0]
    TIM3->CCR2 = 0;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <stop_robot+0x54>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR1 = 0;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <stop_robot+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200004a0 	.word	0x200004a0
 8001cd8:	20000400 	.word	0x20000400
 8001cdc:	200003fc 	.word	0x200003fc
 8001ce0:	200003f8 	.word	0x200003f8
 8001ce4:	200003f4 	.word	0x200003f4
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40000800 	.word	0x40000800

08001cf0 <move_forward_robot>:

/* -------------------- FONCTIONS DE DEPLACEMENT -------------------- */

void move_forward_robot(void) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    Angle = 0;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <move_forward_robot+0x48>)
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    encodeur1_cnt = encodeur2_cnt = encodeur_L = encodeur_R = 0;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <move_forward_robot+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <move_forward_robot+0x4c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	@ (8001d40 <move_forward_robot+0x50>)
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <move_forward_robot+0x50>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <move_forward_robot+0x54>)
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <move_forward_robot+0x54>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <move_forward_robot+0x58>)
 8001d18:	6013      	str	r3, [r2, #0]
    move_m1(1, duty);
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <move_forward_robot+0x5c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff ff7b 	bl	8001c1c <move_m1>
    move_m2(1, duty);
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <move_forward_robot+0x5c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff ff93 	bl	8001c58 <move_m2>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200004a0 	.word	0x200004a0
 8001d3c:	20000400 	.word	0x20000400
 8001d40:	200003fc 	.word	0x200003fc
 8001d44:	200003f8 	.word	0x200003f8
 8001d48:	200003f4 	.word	0x200003f4
 8001d4c:	20000000 	.word	0x20000000

08001d50 <move_backward_robot>:

void move_backward_robot(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
    Angle = 0;
 8001d54:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <move_backward_robot+0x48>)
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    encodeur1_cnt = encodeur2_cnt = encodeur_L = encodeur_R = 0;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <move_backward_robot+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <move_backward_robot+0x4c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0e      	ldr	r2, [pc, #56]	@ (8001da0 <move_backward_robot+0x50>)
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <move_backward_robot+0x50>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <move_backward_robot+0x54>)
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <move_backward_robot+0x54>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <move_backward_robot+0x58>)
 8001d78:	6013      	str	r3, [r2, #0]
    move_m1(0, duty);
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <move_backward_robot+0x5c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff ff4b 	bl	8001c1c <move_m1>
    move_m2(0, duty);
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <move_backward_robot+0x5c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff ff63 	bl	8001c58 <move_m2>
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200004a0 	.word	0x200004a0
 8001d9c:	20000400 	.word	0x20000400
 8001da0:	200003fc 	.word	0x200003fc
 8001da4:	200003f8 	.word	0x200003f8
 8001da8:	200003f4 	.word	0x200003f4
 8001dac:	20000000 	.word	0x20000000

08001db0 <left_rotation_robot>:

void left_rotation_robot(void) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
    encodeur1_cnt = encodeur2_cnt = encodeur_L = encodeur_R = 0;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <left_rotation_robot+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <left_rotation_robot+0x40>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <left_rotation_robot+0x44>)
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <left_rotation_robot+0x44>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <left_rotation_robot+0x48>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <left_rotation_robot+0x48>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <left_rotation_robot+0x4c>)
 8001dd0:	6013      	str	r3, [r2, #0]
    move_m1(1, duty);
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <left_rotation_robot+0x50>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff ff1f 	bl	8001c1c <move_m1>
    move_m2(0, duty);
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <left_rotation_robot+0x50>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff ff37 	bl	8001c58 <move_m2>
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000400 	.word	0x20000400
 8001df4:	200003fc 	.word	0x200003fc
 8001df8:	200003f8 	.word	0x200003f8
 8001dfc:	200003f4 	.word	0x200003f4
 8001e00:	20000000 	.word	0x20000000

08001e04 <right_rotation_robot>:

void right_rotation_robot(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
    encodeur1_cnt = encodeur2_cnt = encodeur_L = encodeur_R = 0;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <right_rotation_robot+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <right_rotation_robot+0x40>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <right_rotation_robot+0x44>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <right_rotation_robot+0x44>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e4c <right_rotation_robot+0x48>)
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <right_rotation_robot+0x48>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <right_rotation_robot+0x4c>)
 8001e24:	6013      	str	r3, [r2, #0]
    move_m1(0, duty);
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <right_rotation_robot+0x50>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff fef5 	bl	8001c1c <move_m1>
    move_m2(1, duty);
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <right_rotation_robot+0x50>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ff0d 	bl	8001c58 <move_m2>
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000400 	.word	0x20000400
 8001e48:	200003fc 	.word	0x200003fc
 8001e4c:	200003f8 	.word	0x200003f8
 8001e50:	200003f4 	.word	0x200003f4
 8001e54:	20000000 	.word	0x20000000

08001e58 <Avancer>:

void Avancer(float distance) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    robot_tourne = 0;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <Avancer+0x80>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
    encodeur_L = encodeur_R = 0;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <Avancer+0x84>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <Avancer+0x84>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <Avancer+0x88>)
 8001e72:	6013      	str	r3, [r2, #0]
    target_ticks = (int)((distance / (PI * D_ROUE)) * TICKS_PAR_TOUR);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe faef 	bl	8000458 <__aeabi_f2d>
 8001e7a:	a315      	add	r3, pc, #84	@ (adr r3, 8001ed0 <Avancer+0x78>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fc6c 	bl	800075c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <Avancer+0x8c>)
 8001e92:	f7fe fb39 	bl	8000508 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe fde3 	bl	8000a68 <__aeabi_d2iz>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <Avancer+0x90>)
 8001ea6:	6013      	str	r3, [r2, #0]
    move_m1(1, duty);
 8001ea8:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <Avancer+0x94>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff feb4 	bl	8001c1c <move_m1>
    move_m2(1, duty);
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <Avancer+0x94>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff fecc 	bl	8001c58 <move_m2>
    current_state = AVANCER;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <Avancer+0x98>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	4edb2f66 	.word	0x4edb2f66
 8001ed4:	3fca235b 	.word	0x3fca235b
 8001ed8:	20000488 	.word	0x20000488
 8001edc:	20000400 	.word	0x20000400
 8001ee0:	200003fc 	.word	0x200003fc
 8001ee4:	40340000 	.word	0x40340000
 8001ee8:	200003e8 	.word	0x200003e8
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	200003e6 	.word	0x200003e6
 8001ef4:	00000000 	.word	0x00000000

08001ef8 <Arriere>:

void Arriere(float distance) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    robot_tourne = 0;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <Arriere+0x80>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    encodeur_L = encodeur_R = 0;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <Arriere+0x84>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <Arriere+0x84>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <Arriere+0x88>)
 8001f12:	6013      	str	r3, [r2, #0]
    target_ticks = (int)((distance / (PI * D_ROUE)) * TICKS_PAR_TOUR);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe fa9f 	bl	8000458 <__aeabi_f2d>
 8001f1a:	a315      	add	r3, pc, #84	@ (adr r3, 8001f70 <Arriere+0x78>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe fc1c 	bl	800075c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <Arriere+0x8c>)
 8001f32:	f7fe fae9 	bl	8000508 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fd93 	bl	8000a68 <__aeabi_d2iz>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <Arriere+0x90>)
 8001f46:	6013      	str	r3, [r2, #0]
    move_m1(0, duty);
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <Arriere+0x94>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fe64 	bl	8001c1c <move_m1>
    move_m2(0, duty);
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <Arriere+0x94>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff fe7c 	bl	8001c58 <move_m2>
    current_state = ARRIERE;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <Arriere+0x98>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	701a      	strb	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	4edb2f66 	.word	0x4edb2f66
 8001f74:	3fca235b 	.word	0x3fca235b
 8001f78:	20000488 	.word	0x20000488
 8001f7c:	20000400 	.word	0x20000400
 8001f80:	200003fc 	.word	0x200003fc
 8001f84:	40340000 	.word	0x40340000
 8001f88:	200003e8 	.word	0x200003e8
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	200003e6 	.word	0x200003e6

08001f94 <Tourner>:

void Tourner(float angle) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    robot_tourne = 1;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <Tourner+0x78>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    encodeur1_cnt = encodeur2_cnt = 0;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <Tourner+0x7c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <Tourner+0x7c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	@ (8002014 <Tourner+0x80>)
 8001fae:	6013      	str	r3, [r2, #0]
    target_angle = angle;
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <Tourner+0x84>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
    if (angle < 0) {
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff f848 	bl	8001050 <__aeabi_fcmplt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00f      	beq.n	8001fe6 <Tourner+0x52>
        move_m1(1, duty);
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <Tourner+0x88>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7ff fe25 	bl	8001c1c <move_m1>
        move_m2(0, duty);
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <Tourner+0x88>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fe3d 	bl	8001c58 <move_m2>
        current_state = TOURNER_GAUCHE;
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <Tourner+0x8c>)
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	701a      	strb	r2, [r3, #0]
    } else {
        move_m1(0, duty);
        move_m2(1, duty);
        current_state = TOURNER_DROITE;
    }
}
 8001fe4:	e00e      	b.n	8002004 <Tourner+0x70>
        move_m1(0, duty);
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <Tourner+0x88>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fe15 	bl	8001c1c <move_m1>
        move_m2(1, duty);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <Tourner+0x88>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fe2d 	bl	8001c58 <move_m2>
        current_state = TOURNER_DROITE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <Tourner+0x8c>)
 8002000:	2204      	movs	r2, #4
 8002002:	701a      	strb	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000488 	.word	0x20000488
 8002010:	200003f8 	.word	0x200003f8
 8002014:	200003f4 	.word	0x200003f4
 8002018:	200003ec 	.word	0x200003ec
 800201c:	20000000 	.word	0x20000000
 8002020:	200003e6 	.word	0x200003e6

08002024 <auto_mode>:

/* -------------------- MODE AUTOMATIQUE -------------------- */

void auto_mode(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
    uint32_t somme = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 5; i++) {
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	e00e      	b.n	8002052 <auto_mode+0x2e>
        Trig_read();
 8002034:	f000 fa62 	bl	80024fc <Trig_read>
        delay_us(30000);
 8002038:	f247 5030 	movw	r0, #30000	@ 0x7530
 800203c:	f000 f9b4 	bl	80023a8 <delay_us>
        somme += Distance_u;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <auto_mode+0x5c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 5; i++) {
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b04      	cmp	r3, #4
 8002056:	dded      	ble.n	8002034 <auto_mode+0x10>
    }

    uint32_t moyenne = somme / 5;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <auto_mode+0x60>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	607b      	str	r3, [r7, #4]
    if (moyenne < 10) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b09      	cmp	r3, #9
 8002068:	d803      	bhi.n	8002072 <auto_mode+0x4e>
        Tourner(90.0);
 800206a:	4807      	ldr	r0, [pc, #28]	@ (8002088 <auto_mode+0x64>)
 800206c:	f7ff ff92 	bl	8001f94 <Tourner>
    } else {
        Avancer(0.1);
    }
}
 8002070:	e002      	b.n	8002078 <auto_mode+0x54>
        Avancer(0.1);
 8002072:	4806      	ldr	r0, [pc, #24]	@ (800208c <auto_mode+0x68>)
 8002074:	f7ff fef0 	bl	8001e58 <Avancer>
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200003e5 	.word	0x200003e5
 8002084:	cccccccd 	.word	0xcccccccd
 8002088:	42b40000 	.word	0x42b40000
 800208c:	3dcccccd 	.word	0x3dcccccd

08002090 <Rx_commandes>:

/* -------------------- COMMANDES UART -------------------- */

void Rx_commandes(void) {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
    if (current_state != IDLE || rx_buffer[0] == 0) return;
 8002094:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <Rx_commandes+0x12c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f040 808c 	bne.w	80021b6 <Rx_commandes+0x126>
 800209e:	4b48      	ldr	r3, [pc, #288]	@ (80021c0 <Rx_commandes+0x130>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8087 	beq.w	80021b6 <Rx_commandes+0x126>

    if (rx_buffer[0] == 'V') {
 80020a8:	4b45      	ldr	r3, [pc, #276]	@ (80021c0 <Rx_commandes+0x130>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b56      	cmp	r3, #86	@ 0x56
 80020ae:	d107      	bne.n	80020c0 <Rx_commandes+0x30>
        duty = (uint8_t)atoi(&rx_buffer[1]);
 80020b0:	4844      	ldr	r0, [pc, #272]	@ (80021c4 <Rx_commandes+0x134>)
 80020b2:	f004 f97b 	bl	80063ac <atoi>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b43      	ldr	r3, [pc, #268]	@ (80021c8 <Rx_commandes+0x138>)
 80020bc:	701a      	strb	r2, [r3, #0]
        return;
 80020be:	e07b      	b.n	80021b8 <Rx_commandes+0x128>
    }

    if (rx_buffer[0] == 'A') {
 80020c0:	4b3f      	ldr	r3, [pc, #252]	@ (80021c0 <Rx_commandes+0x130>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b41      	cmp	r3, #65	@ 0x41
 80020c6:	d103      	bne.n	80020d0 <Rx_commandes+0x40>
        auto_enabled = 1;
 80020c8:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <Rx_commandes+0x13c>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
        return;
 80020ce:	e073      	b.n	80021b8 <Rx_commandes+0x128>
    }
    auto_enabled = 0;
 80020d0:	4b3e      	ldr	r3, [pc, #248]	@ (80021cc <Rx_commandes+0x13c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]

    switch (rx_buffer[0]) {
 80020d6:	4b3a      	ldr	r3, [pc, #232]	@ (80021c0 <Rx_commandes+0x130>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3b42      	subs	r3, #66	@ 0x42
 80020dc:	2b13      	cmp	r3, #19
 80020de:	d865      	bhi.n	80021ac <Rx_commandes+0x11c>
 80020e0:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <Rx_commandes+0x58>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	0800219f 	.word	0x0800219f
 80020ec:	080021ad 	.word	0x080021ad
 80020f0:	080021ad 	.word	0x080021ad
 80020f4:	080021ad 	.word	0x080021ad
 80020f8:	08002139 	.word	0x08002139
 80020fc:	080021ad 	.word	0x080021ad
 8002100:	080021ad 	.word	0x080021ad
 8002104:	080021ad 	.word	0x080021ad
 8002108:	080021ad 	.word	0x080021ad
 800210c:	08002183 	.word	0x08002183
 8002110:	08002145 	.word	0x08002145
 8002114:	08002191 	.word	0x08002191
 8002118:	080021ad 	.word	0x080021ad
 800211c:	08002175 	.word	0x08002175
 8002120:	080021ad 	.word	0x080021ad
 8002124:	080021ad 	.word	0x080021ad
 8002128:	08002151 	.word	0x08002151
 800212c:	0800215d 	.word	0x0800215d
 8002130:	080021ad 	.word	0x080021ad
 8002134:	08002169 	.word	0x08002169
        case 'F': robot_tourne = 0; move_forward_robot(); break;
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <Rx_commandes+0x140>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f7ff fdd7 	bl	8001cf0 <move_forward_robot>
 8002142:	e034      	b.n	80021ae <Rx_commandes+0x11e>
        case 'L': robot_tourne = 1; left_rotation_robot(); break;
 8002144:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <Rx_commandes+0x140>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f7ff fe31 	bl	8001db0 <left_rotation_robot>
 800214e:	e02e      	b.n	80021ae <Rx_commandes+0x11e>
        case 'R': robot_tourne = 1; right_rotation_robot(); break;
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <Rx_commandes+0x140>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f7ff fe55 	bl	8001e04 <right_rotation_robot>
 800215a:	e028      	b.n	80021ae <Rx_commandes+0x11e>
        case 'S': robot_tourne = 0;  stop_robot(); break;
 800215c:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <Rx_commandes+0x140>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f7ff fd97 	bl	8001c94 <stop_robot>
 8002166:	e022      	b.n	80021ae <Rx_commandes+0x11e>
        case 'U': robot_tourne = 0; move_backward_robot(); break;
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <Rx_commandes+0x140>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f7ff fdef 	bl	8001d50 <move_backward_robot>
 8002172:	e01c      	b.n	80021ae <Rx_commandes+0x11e>
        case 'O': robot_tourne = 0; Avancer(0.1); break;
 8002174:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <Rx_commandes+0x140>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	4816      	ldr	r0, [pc, #88]	@ (80021d4 <Rx_commandes+0x144>)
 800217c:	f7ff fe6c 	bl	8001e58 <Avancer>
 8002180:	e015      	b.n	80021ae <Rx_commandes+0x11e>
        case 'K': robot_tourne = 1; Tourner(-90.0); break;
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <Rx_commandes+0x140>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4813      	ldr	r0, [pc, #76]	@ (80021d8 <Rx_commandes+0x148>)
 800218a:	f7ff ff03 	bl	8001f94 <Tourner>
 800218e:	e00e      	b.n	80021ae <Rx_commandes+0x11e>
        case 'M': robot_tourne = 1; Tourner(90.0); break;
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <Rx_commandes+0x140>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4811      	ldr	r0, [pc, #68]	@ (80021dc <Rx_commandes+0x14c>)
 8002198:	f7ff fefc 	bl	8001f94 <Tourner>
 800219c:	e007      	b.n	80021ae <Rx_commandes+0x11e>
        case 'B': robot_tourne = 0; Arriere(0.1); break;
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <Rx_commandes+0x140>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	480b      	ldr	r0, [pc, #44]	@ (80021d4 <Rx_commandes+0x144>)
 80021a6:	f7ff fea7 	bl	8001ef8 <Arriere>
 80021aa:	e000      	b.n	80021ae <Rx_commandes+0x11e>
        default: break;
 80021ac:	bf00      	nop
    }

    rx_buffer[0] = 0;
 80021ae:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <Rx_commandes+0x130>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e000      	b.n	80021b8 <Rx_commandes+0x128>
    if (current_state != IDLE || rx_buffer[0] == 0) return;
 80021b6:	bf00      	nop
}
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200003e6 	.word	0x200003e6
 80021c0:	20000408 	.word	0x20000408
 80021c4:	20000409 	.word	0x20000409
 80021c8:	20000000 	.word	0x20000000
 80021cc:	200003f0 	.word	0x200003f0
 80021d0:	20000488 	.word	0x20000488
 80021d4:	3dcccccd 	.word	0x3dcccccd
 80021d8:	c2b40000 	.word	0xc2b40000
 80021dc:	42b40000 	.word	0x42b40000

080021e0 <start_uart_receive>:

void start_uart_receive(void) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80021e4:	2201      	movs	r2, #1
 80021e6:	4903      	ldr	r1, [pc, #12]	@ (80021f4 <start_uart_receive+0x14>)
 80021e8:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <start_uart_receive+0x18>)
 80021ea:	f003 fb48 	bl	800587e <HAL_UART_Receive_IT>
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000404 	.word	0x20000404
 80021f8:	20000390 	.word	0x20000390

080021fc <HAL_GPIO_EXTI_Callback>:

/* -------------------- INTERRUPTIONS & CALLBACKS -------------------- */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
    float delta = (PI * D_ROUE) / TICKS_PAR_TOUR;
 8002206:	4b5a      	ldr	r3, [pc, #360]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x174>)
 8002208:	60fb      	str	r3, [r7, #12]

    if (!robot_tourne) {
 800220a:	4b5a      	ldr	r3, [pc, #360]	@ (8002374 <HAL_GPIO_EXTI_Callback+0x178>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d161      	bne.n	80022d6 <HAL_GPIO_EXTI_Callback+0xda>
        if (GPIO_Pin == ENC1_Pin) {
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002218:	d123      	bne.n	8002262 <HAL_GPIO_EXTI_Callback+0x66>
            encodeur_L++;
 800221a:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x17c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a55      	ldr	r2, [pc, #340]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002222:	6013      	str	r3, [r2, #0]
            distance_G = delta * encodeur_L;
 8002224:	4b54      	ldr	r3, [pc, #336]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fd1b 	bl	8000c64 <__aeabi_ui2f>
 800222e:	4603      	mov	r3, r0
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fd6e 	bl	8000d14 <__aeabi_fmul>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b4f      	ldr	r3, [pc, #316]	@ (800237c <HAL_GPIO_EXTI_Callback+0x180>)
 800223e:	601a      	str	r2, [r3, #0]
            distancetotale += delta / 2.0f;
 8002240:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7fe fe19 	bl	8000e7c <__aeabi_fdiv>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b4c      	ldr	r3, [pc, #304]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x184>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f7fe fc55 	bl	8000b04 <__addsf3>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	4b48      	ldr	r3, [pc, #288]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x184>)
 8002260:	601a      	str	r2, [r3, #0]
        }
        if (GPIO_Pin == ENC2_Pin) {
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_EXTI_Callback+0xb4>
            encodeur_R++;
 8002268:	4b46      	ldr	r3, [pc, #280]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x188>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a45      	ldr	r2, [pc, #276]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x188>)
 8002270:	6013      	str	r3, [r2, #0]
            distance_D = delta * encodeur_R;
 8002272:	4b44      	ldr	r3, [pc, #272]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x188>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fcf4 	bl	8000c64 <__aeabi_ui2f>
 800227c:	4603      	mov	r3, r0
 800227e:	68f9      	ldr	r1, [r7, #12]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fd47 	bl	8000d14 <__aeabi_fmul>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4b3f      	ldr	r3, [pc, #252]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x18c>)
 800228c:	601a      	str	r2, [r3, #0]
            distancetotale += delta / 2.0f;
 800228e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7fe fdf2 	bl	8000e7c <__aeabi_fdiv>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b38      	ldr	r3, [pc, #224]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x184>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7fe fc2e 	bl	8000b04 <__addsf3>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x184>)
 80022ae:	601a      	str	r2, [r3, #0]
        }
        distance = (distance_D + distance_G) / 2.0f;
 80022b0:	4b35      	ldr	r3, [pc, #212]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x18c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a31      	ldr	r2, [pc, #196]	@ (800237c <HAL_GPIO_EXTI_Callback+0x180>)
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fc22 	bl	8000b04 <__addsf3>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fdd8 	bl	8000e7c <__aeabi_fdiv>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <HAL_GPIO_EXTI_Callback+0x190>)
 80022d2:	601a      	str	r2, [r3, #0]
        if (GPIO_Pin == ENC2_Pin && HAL_GPIO_ReadPin(DIR2_GPIO_Port, DIR2_Pin) == GPIO_PIN_RESET) {
            encodeur2_cnt++;
            Angle = -((float)encodeur2_cnt / TICKS_PAR_ROTATION) * 360.0f;
        }
    }
}
 80022d4:	e048      	b.n	8002368 <HAL_GPIO_EXTI_Callback+0x16c>
        if (GPIO_Pin == ENC1_Pin && HAL_GPIO_ReadPin(DIR1_GPIO_Port, DIR1_Pin) == GPIO_PIN_RESET) {
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022dc:	d11f      	bne.n	800231e <HAL_GPIO_EXTI_Callback+0x122>
 80022de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e2:	482b      	ldr	r0, [pc, #172]	@ (8002390 <HAL_GPIO_EXTI_Callback+0x194>)
 80022e4:	f001 fc04 	bl	8003af0 <HAL_GPIO_ReadPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d117      	bne.n	800231e <HAL_GPIO_EXTI_Callback+0x122>
            encodeur1_cnt++;
 80022ee:	4b29      	ldr	r3, [pc, #164]	@ (8002394 <HAL_GPIO_EXTI_Callback+0x198>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a27      	ldr	r2, [pc, #156]	@ (8002394 <HAL_GPIO_EXTI_Callback+0x198>)
 80022f6:	6013      	str	r3, [r2, #0]
            Angle = ((float)encodeur1_cnt / TICKS_PAR_ROTATION) * 360.0f;
 80022f8:	4b26      	ldr	r3, [pc, #152]	@ (8002394 <HAL_GPIO_EXTI_Callback+0x198>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fcb1 	bl	8000c64 <__aeabi_ui2f>
 8002302:	4603      	mov	r3, r0
 8002304:	4924      	ldr	r1, [pc, #144]	@ (8002398 <HAL_GPIO_EXTI_Callback+0x19c>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fdb8 	bl	8000e7c <__aeabi_fdiv>
 800230c:	4603      	mov	r3, r0
 800230e:	4923      	ldr	r1, [pc, #140]	@ (800239c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fcff 	bl	8000d14 <__aeabi_fmul>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	4b21      	ldr	r3, [pc, #132]	@ (80023a0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800231c:	601a      	str	r2, [r3, #0]
        if (GPIO_Pin == ENC2_Pin && HAL_GPIO_ReadPin(DIR2_GPIO_Port, DIR2_Pin) == GPIO_PIN_RESET) {
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d121      	bne.n	8002368 <HAL_GPIO_EXTI_Callback+0x16c>
 8002324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002328:	4819      	ldr	r0, [pc, #100]	@ (8002390 <HAL_GPIO_EXTI_Callback+0x194>)
 800232a:	f001 fbe1 	bl	8003af0 <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d119      	bne.n	8002368 <HAL_GPIO_EXTI_Callback+0x16c>
            encodeur2_cnt++;
 8002334:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a1a      	ldr	r2, [pc, #104]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800233c:	6013      	str	r3, [r2, #0]
            Angle = -((float)encodeur2_cnt / TICKS_PAR_ROTATION) * 360.0f;
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fc8e 	bl	8000c64 <__aeabi_ui2f>
 8002348:	4603      	mov	r3, r0
 800234a:	4913      	ldr	r1, [pc, #76]	@ (8002398 <HAL_GPIO_EXTI_Callback+0x19c>)
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fd95 	bl	8000e7c <__aeabi_fdiv>
 8002352:	4603      	mov	r3, r0
 8002354:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002358:	4910      	ldr	r1, [pc, #64]	@ (800239c <HAL_GPIO_EXTI_Callback+0x1a0>)
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fcda 	bl	8000d14 <__aeabi_fmul>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002366:	601a      	str	r2, [r3, #0]
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	3c2748af 	.word	0x3c2748af
 8002374:	20000488 	.word	0x20000488
 8002378:	200003fc 	.word	0x200003fc
 800237c:	20000490 	.word	0x20000490
 8002380:	2000049c 	.word	0x2000049c
 8002384:	20000400 	.word	0x20000400
 8002388:	20000494 	.word	0x20000494
 800238c:	20000498 	.word	0x20000498
 8002390:	40020000 	.word	0x40020000
 8002394:	200003f4 	.word	0x200003f4
 8002398:	42200000 	.word	0x42200000
 800239c:	43b40000 	.word	0x43b40000
 80023a0:	200004a0 	.word	0x200004a0
 80023a4:	200003f8 	.word	0x200003f8

080023a8 <delay_us>:

/* -------------------- CAPTEUR ULTRASONS -------------------- */

void delay_us(uint16_t delay) {
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <delay_us+0x2c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80023ba:	bf00      	nop
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <delay_us+0x2c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3f9      	bcc.n	80023bc <delay_us+0x14>
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000248 	.word	0x20000248

080023d8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7e1b      	ldrb	r3, [r3, #24]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d176      	bne.n	80024d6 <HAL_TIM_IC_CaptureCallback+0xfe>
        if (!Is_First_Captured) {
 80023e8:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11a      	bne.n	8002426 <HAL_TIM_IC_CaptureCallback+0x4e>
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80023f0:	2100      	movs	r1, #0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f002 fe5c 	bl	80050b0 <HAL_TIM_ReadCapturedValue>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a3c      	ldr	r2, [pc, #240]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0x114>)
 80023fc:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;
 80023fe:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6a1a      	ldr	r2, [r3, #32]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 020a 	bic.w	r2, r2, #10
 8002412:	621a      	str	r2, [r3, #32]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6a1a      	ldr	r2, [r3, #32]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0202 	orr.w	r2, r2, #2
 8002422:	621a      	str	r2, [r3, #32]
            Is_First_Captured = 0;
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
        }
    }
}
 8002424:	e057      	b.n	80024d6 <HAL_TIM_IC_CaptureCallback+0xfe>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002426:	2100      	movs	r1, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f002 fe41 	bl	80050b0 <HAL_TIM_ReadCapturedValue>
 800242e:	4603      	mov	r3, r0
 8002430:	4a2f      	ldr	r2, [pc, #188]	@ (80024f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002432:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
            Difference = (IC_Val2 > IC_Val1) ? (IC_Val2 - IC_Val1) : ((0xFFFF - IC_Val1) + IC_Val2);
 800243c:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d905      	bls.n	8002454 <HAL_TIM_IC_CaptureCallback+0x7c>
 8002448:	4b29      	ldr	r3, [pc, #164]	@ (80024f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0x114>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	e007      	b.n	8002464 <HAL_TIM_IC_CaptureCallback+0x8c>
 8002454:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0x114>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002462:	33ff      	adds	r3, #255	@ 0xff
 8002464:	4a23      	ldr	r2, [pc, #140]	@ (80024f4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002466:	6013      	str	r3, [r2, #0]
            Distance_u = Difference * 0.034 / 2;
 8002468:	4b22      	ldr	r3, [pc, #136]	@ (80024f4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd ffd1 	bl	8000414 <__aeabi_ui2d>
 8002472:	a31b      	add	r3, pc, #108	@ (adr r3, 80024e0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f846 	bl	8000508 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800248c:	f7fe f966 	bl	800075c <__aeabi_ddiv>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb0e 	bl	8000ab8 <__aeabi_d2uiz>
 800249c:	4603      	mov	r3, r0
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_TIM_IC_CaptureCallback+0x120>)
 80024a2:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0;
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 020a 	bic.w	r2, r2, #10
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a12      	ldr	r2, [r2, #32]
 80024c4:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0202 	bic.w	r2, r2, #2
 80024d4:	60da      	str	r2, [r3, #12]
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	b020c49c 	.word	0xb020c49c
 80024e4:	3fa16872 	.word	0x3fa16872
 80024e8:	200003e4 	.word	0x200003e4
 80024ec:	200003d8 	.word	0x200003d8
 80024f0:	200003dc 	.word	0x200003dc
 80024f4:	200003e0 	.word	0x200003e0
 80024f8:	200003e5 	.word	0x200003e5

080024fc <Trig_read>:

void Trig_read(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Trig_Pin, GPIO_PIN_SET);
 8002500:	2201      	movs	r2, #1
 8002502:	2102      	movs	r1, #2
 8002504:	480a      	ldr	r0, [pc, #40]	@ (8002530 <Trig_read+0x34>)
 8002506:	f001 fb0a 	bl	8003b1e <HAL_GPIO_WritePin>
    delay_us(10);
 800250a:	200a      	movs	r0, #10
 800250c:	f7ff ff4c 	bl	80023a8 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Trig_Pin, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	2102      	movs	r1, #2
 8002514:	4806      	ldr	r0, [pc, #24]	@ (8002530 <Trig_read+0x34>)
 8002516:	f001 fb02 	bl	8003b1e <HAL_GPIO_WritePin>
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <Trig_read+0x38>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <Trig_read+0x38>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0202 	orr.w	r2, r2, #2
 8002528:	60da      	str	r2, [r3, #12]
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40020000 	.word	0x40020000
 8002534:	20000248 	.word	0x20000248

08002538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <HAL_MspInit+0x5c>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	4a14      	ldr	r2, [pc, #80]	@ (8002594 <HAL_MspInit+0x5c>)
 8002544:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002548:	6253      	str	r3, [r2, #36]	@ 0x24
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_MspInit+0x5c>)
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <HAL_MspInit+0x5c>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_MspInit+0x5c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <HAL_MspInit+0x5c>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_MspInit+0x5c>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <HAL_MspInit+0x5c>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002578:	6253      	str	r3, [r2, #36]	@ 0x24
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_MspInit+0x5c>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002586:	2007      	movs	r0, #7
 8002588:	f001 f862 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800

08002598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	@ 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a15      	ldr	r2, [pc, #84]	@ (800260c <HAL_ADC_MspInit+0x74>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d123      	bne.n	8002602 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_ADC_MspInit+0x78>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <HAL_ADC_MspInit+0x78>)
 80025c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_ADC_MspInit+0x78>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_ADC_MspInit+0x78>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002610 <HAL_ADC_MspInit+0x78>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_ADC_MspInit+0x78>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ea:	2301      	movs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ee:	2303      	movs	r3, #3
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	@ (8002614 <HAL_ADC_MspInit+0x7c>)
 80025fe:	f001 f8e7 	bl	80037d0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	@ 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40012400 	.word	0x40012400
 8002610:	40023800 	.word	0x40023800
 8002614:	40020400 	.word	0x40020400

08002618 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002638:	d12f      	bne.n	800269a <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <HAL_TIM_IC_MspInit+0x8c>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <HAL_TIM_IC_MspInit+0x8c>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6253      	str	r3, [r2, #36]	@ 0x24
 8002646:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <HAL_TIM_IC_MspInit+0x8c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_TIM_IC_MspInit+0x8c>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <HAL_TIM_IC_MspInit+0x8c>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	61d3      	str	r3, [r2, #28]
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <HAL_TIM_IC_MspInit+0x8c>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP1     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800266a:	2301      	movs	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800267a:	2301      	movs	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4808      	ldr	r0, [pc, #32]	@ (80026a8 <HAL_TIM_IC_MspInit+0x90>)
 8002686:	f001 f8a3 	bl	80037d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	201c      	movs	r0, #28
 8002690:	f000 ffe9 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002694:	201c      	movs	r0, #28
 8002696:	f001 f802 	bl	800369e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	@ 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <HAL_TIM_PWM_MspInit+0x58>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10c      	bne.n	80026d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_TIM_PWM_MspInit+0x5c>)
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_TIM_PWM_MspInit+0x5c>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80026ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <HAL_TIM_PWM_MspInit+0x5c>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026d6:	e010      	b.n	80026fa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	@ (800270c <HAL_TIM_PWM_MspInit+0x60>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10b      	bne.n	80026fa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_TIM_PWM_MspInit+0x5c>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <HAL_TIM_PWM_MspInit+0x5c>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6253      	str	r3, [r2, #36]	@ 0x24
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_TIM_PWM_MspInit+0x5c>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40000400 	.word	0x40000400
 8002708:	40023800 	.word	0x40023800
 800270c:	40000800 	.word	0x40000800

08002710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_TIM_Base_MspInit+0x44>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d113      	bne.n	800274a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002722:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <HAL_TIM_Base_MspInit+0x48>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	4a0c      	ldr	r2, [pc, #48]	@ (8002758 <HAL_TIM_Base_MspInit+0x48>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	6253      	str	r3, [r2, #36]	@ 0x24
 800272e:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <HAL_TIM_Base_MspInit+0x48>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	202b      	movs	r0, #43	@ 0x2b
 8002740:	f000 ff91 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002744:	202b      	movs	r0, #43	@ 0x2b
 8002746:	f000 ffaa 	bl	800369e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40001000 	.word	0x40001000
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	@ 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_TIM_MspPostInit+0xa8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d11c      	bne.n	80027b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <HAL_TIM_MspPostInit+0xac>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a21      	ldr	r2, [pc, #132]	@ (8002808 <HAL_TIM_MspPostInit+0xac>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <HAL_TIM_MspPostInit+0xac>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027a6:	2302      	movs	r3, #2
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4816      	ldr	r0, [pc, #88]	@ (800280c <HAL_TIM_MspPostInit+0xb0>)
 80027b2:	f001 f80d 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027b6:	e020      	b.n	80027fa <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <HAL_TIM_MspPostInit+0xb4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11b      	bne.n	80027fa <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_TIM_MspPostInit+0xac>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a10      	ldr	r2, [pc, #64]	@ (8002808 <HAL_TIM_MspPostInit+0xac>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	61d3      	str	r3, [r2, #28]
 80027ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <HAL_TIM_MspPostInit+0xac>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027da:	2340      	movs	r3, #64	@ 0x40
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027ea:	2302      	movs	r3, #2
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4807      	ldr	r0, [pc, #28]	@ (8002814 <HAL_TIM_MspPostInit+0xb8>)
 80027f6:	f000 ffeb 	bl	80037d0 <HAL_GPIO_Init>
}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	@ 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40000400 	.word	0x40000400
 8002808:	40023800 	.word	0x40023800
 800280c:	40020800 	.word	0x40020800
 8002810:	40000800 	.word	0x40000800
 8002814:	40020400 	.word	0x40020400

08002818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	@ 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a36      	ldr	r2, [pc, #216]	@ (8002910 <HAL_UART_MspInit+0xf8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d130      	bne.n	800289c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800283a:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	4a35      	ldr	r2, [pc, #212]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 8002840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002844:	6253      	str	r3, [r2, #36]	@ 0x24
 8002846:	4b33      	ldr	r3, [pc, #204]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b30      	ldr	r3, [pc, #192]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a2f      	ldr	r2, [pc, #188]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	61d3      	str	r3, [r2, #28]
 800285e:	4b2d      	ldr	r3, [pc, #180]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800286a:	230c      	movs	r3, #12
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287a:	2307      	movs	r3, #7
 800287c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	4824      	ldr	r0, [pc, #144]	@ (8002918 <HAL_UART_MspInit+0x100>)
 8002886:	f000 ffa3 	bl	80037d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800288a:	2201      	movs	r2, #1
 800288c:	2100      	movs	r1, #0
 800288e:	2026      	movs	r0, #38	@ 0x26
 8002890:	f000 fee9 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002894:	2026      	movs	r0, #38	@ 0x26
 8002896:	f000 ff02 	bl	800369e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800289a:	e035      	b.n	8002908 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1e      	ldr	r2, [pc, #120]	@ (800291c <HAL_UART_MspInit+0x104>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d130      	bne.n	8002908 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b0:	6253      	str	r3, [r2, #36]	@ 0x24
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a14      	ldr	r2, [pc, #80]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	61d3      	str	r3, [r2, #28]
 80028ca:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e8:	2307      	movs	r3, #7
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	480b      	ldr	r0, [pc, #44]	@ (8002920 <HAL_UART_MspInit+0x108>)
 80028f4:	f000 ff6c 	bl	80037d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2027      	movs	r0, #39	@ 0x27
 80028fe:	f000 feb2 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002902:	2027      	movs	r0, #39	@ 0x27
 8002904:	f000 fecb 	bl	800369e <HAL_NVIC_EnableIRQ>
}
 8002908:	bf00      	nop
 800290a:	3730      	adds	r7, #48	@ 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40004400 	.word	0x40004400
 8002914:	40023800 	.word	0x40023800
 8002918:	40020000 	.word	0x40020000
 800291c:	40004800 	.word	0x40004800
 8002920:	40020400 	.word	0x40020400

08002924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <NMI_Handler+0x4>

0800292c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <HardFault_Handler+0x4>

08002934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <MemManage_Handler+0x4>

0800293c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <BusFault_Handler+0x4>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <UsageFault_Handler+0x4>

0800294c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002974:	f000 f97a 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 8002980:	2008      	movs	r0, #8
 8002982:	f001 f8e5 	bl	8003b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002990:	4802      	ldr	r0, [pc, #8]	@ (800299c <TIM2_IRQHandler+0x10>)
 8002992:	f002 f963 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000248 	.word	0x20000248

080029a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029a4:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <USART2_IRQHandler+0x10>)
 80029a6:	f002 ff8f 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000348 	.word	0x20000348

080029b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <USART3_IRQHandler+0x10>)
 80029ba:	f002 ff85 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000390 	.word	0x20000390

080029c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 80029cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80029d0:	f001 f8be 	bl	8003b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <TIM6_IRQHandler+0x10>)
 80029de:	f002 f93d 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000308 	.word	0x20000308

080029ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return 1;
 80029f0:	2301      	movs	r3, #1
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <_kill>:

int _kill(int pid, int sig)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a04:	f004 fb42 	bl	800708c <__errno>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2216      	movs	r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_exit>:

void _exit (int status)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a22:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffe7 	bl	80029fa <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <_exit+0x12>

08002a30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e00a      	b.n	8002a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a42:	f3af 8000 	nop.w
 8002a46:	4601      	mov	r1, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	b2ca      	uxtb	r2, r1
 8002a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	dbf0      	blt.n	8002a42 <_read+0x12>
  }

  return len;
 8002a60:	687b      	ldr	r3, [r7, #4]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e009      	b.n	8002a90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	60ba      	str	r2, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	dbf1      	blt.n	8002a7c <_write+0x12>
  }
  return len;
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_close>:

int _close(int file)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <_isatty>:

int _isatty(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b0c:	4a14      	ldr	r2, [pc, #80]	@ (8002b60 <_sbrk+0x5c>)
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <_sbrk+0x60>)
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b20:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <_sbrk+0x64>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <_sbrk+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d207      	bcs.n	8002b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b34:	f004 faaa 	bl	800708c <__errno>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b42:	e009      	b.n	8002b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b44:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <_sbrk+0x64>)
 8002b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20014000 	.word	0x20014000
 8002b64:	00000400 	.word	0x00000400
 8002b68:	200004a4 	.word	0x200004a4
 8002b6c:	200005f8 	.word	0x200005f8

08002b70 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b7c:	f7ff fff8 	bl	8002b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b80:	480b      	ldr	r0, [pc, #44]	@ (8002bb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b82:	490c      	ldr	r1, [pc, #48]	@ (8002bb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b84:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b88:	e002      	b.n	8002b90 <LoopCopyDataInit>

08002b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8e:	3304      	adds	r3, #4

08002b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b94:	d3f9      	bcc.n	8002b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b96:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b98:	4c09      	ldr	r4, [pc, #36]	@ (8002bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b9c:	e001      	b.n	8002ba2 <LoopFillZerobss>

08002b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba0:	3204      	adds	r2, #4

08002ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba4:	d3fb      	bcc.n	8002b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ba6:	f004 fa77 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002baa:	f7fe fc15 	bl	80013d8 <main>
  bx lr
 8002bae:	4770      	bx	lr
  ldr r0, =_sdata
 8002bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002bb8:	08009558 	.word	0x08009558
  ldr r2, =_sbss
 8002bbc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002bc0:	200005f8 	.word	0x200005f8

08002bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bc4:	e7fe      	b.n	8002bc4 <ADC1_IRQHandler>

08002bc6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f000 fd3d 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f000 f80e 	bl	8002bf8 <HAL_InitTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	71fb      	strb	r3, [r7, #7]
 8002be6:	e001      	b.n	8002bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002be8:	f7ff fca6 	bl	8002538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bec:	79fb      	ldrb	r3, [r7, #7]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <HAL_InitTick+0x68>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d022      	beq.n	8002c52 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_InitTick+0x6c>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_InitTick+0x68>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fd4a 	bl	80036ba <HAL_SYSTICK_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10f      	bne.n	8002c4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	d809      	bhi.n	8002c46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c32:	2200      	movs	r2, #0
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c3a:	f000 fd14 	bl	8003666 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <HAL_InitTick+0x70>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e007      	b.n	8002c56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	e004      	b.n	8002c56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e001      	b.n	8002c56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000000c 	.word	0x2000000c
 8002c64:	20000004 	.word	0x20000004
 8002c68:	20000008 	.word	0x20000008

08002c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_IncTick+0x1c>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_IncTick+0x20>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	4a03      	ldr	r2, [pc, #12]	@ (8002c88 <HAL_IncTick+0x1c>)
 8002c7c:	6013      	str	r3, [r2, #0]
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	200004a8 	.word	0x200004a8
 8002c8c:	2000000c 	.word	0x2000000c

08002c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return uwTick;
 8002c94:	4b02      	ldr	r3, [pc, #8]	@ (8002ca0 <HAL_GetTick+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	200004a8 	.word	0x200004a8

08002ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	@ 0x38
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e127      	b.n	8002f14 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8002f1c <HAL_ADC_Init+0x278>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a8d      	ldr	r2, [pc, #564]	@ (8002f1c <HAL_ADC_Init+0x278>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	4b8b      	ldr	r3, [pc, #556]	@ (8002f1c <HAL_ADC_Init+0x278>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fc4d 	bl	8002598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80ff 	bne.w	8002f0a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d14:	f023 0302 	bic.w	r3, r3, #2
 8002d18:	f043 0202 	orr.w	r2, r3, #2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002d20:	4b7f      	ldr	r3, [pc, #508]	@ (8002f20 <HAL_ADC_Init+0x27c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	497c      	ldr	r1, [pc, #496]	@ (8002f20 <HAL_ADC_Init+0x27c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d3a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d42:	4619      	mov	r1, r3
 8002d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d48:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002d5e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2302      	movs	r3, #2
 8002d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002d86:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d007      	beq.n	8002da6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da2:	4313      	orrs	r3, r2
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db0:	2b40      	cmp	r3, #64	@ 0x40
 8002db2:	d04f      	beq.n	8002e54 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002dc6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6912      	ldr	r2, [r2, #16]
 8002dcc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002dd0:	d003      	beq.n	8002dda <HAL_ADC_Init+0x136>
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6912      	ldr	r2, [r2, #16]
 8002dd6:	2a01      	cmp	r2, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_ADC_Init+0x13c>
 8002dda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dde:	e000      	b.n	8002de2 <HAL_ADC_Init+0x13e>
 8002de0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002de2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de6:	4313      	orrs	r3, r2
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d125      	bne.n	8002e40 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d114      	bne.n	8002e28 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002e08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	fa92 f2a2 	rbit	r2, r2
 8002e10:	617a      	str	r2, [r7, #20]
  return result;
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e22:	4313      	orrs	r3, r2
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e26:	e00b      	b.n	8002e40 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4b37      	ldr	r3, [pc, #220]	@ (8002f24 <HAL_ADC_Init+0x280>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	4b33      	ldr	r3, [pc, #204]	@ (8002f28 <HAL_ADC_Init+0x284>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e70:	d003      	beq.n	8002e7a <HAL_ADC_Init+0x1d6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d119      	bne.n	8002eae <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8002e8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	fa92 f2a2 	rbit	r2, r2
 8002e96:	60fa      	str	r2, [r7, #12]
  return result;
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	fa03 f202 	lsl.w	r2, r3, r2
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eac:	e007      	b.n	8002ebe <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_ADC_Init+0x288>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed8:	f023 0303 	bic.w	r3, r3, #3
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002ee4:	e014      	b.n	8002f10 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eea:	f023 0312 	bic.w	r3, r3, #18
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3738      	adds	r7, #56	@ 0x38
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40012700 	.word	0x40012700
 8002f24:	fcfc16ff 	.word	0xfcfc16ff
 8002f28:	c0fff189 	.word	0xc0fff189
 8002f2c:	bf80fffe 	.word	0xbf80fffe

08002f30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Start+0x1a>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e04e      	b.n	8002fe8 <HAL_ADC_Start+0xb8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa54 	bl	8003400 <ADC_Enable>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d141      	bne.n	8002fe6 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f66:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f8c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa6:	f023 0206 	bic.w	r2, r3, #6
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002fc6:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d107      	bne.n	8002fe6 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fe4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300c:	d113      	bne.n	8003036 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301c:	d10b      	bne.n	8003036 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e068      	b.n	8003108 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003036:	f7ff fe2b 	bl	8002c90 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800303c:	e021      	b.n	8003082 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003044:	d01d      	beq.n	8003082 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_ADC_PollForConversion+0x6c>
 800304c:	f7ff fe20 	bl	8002c90 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d212      	bcs.n	8003082 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e042      	b.n	8003108 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0d6      	beq.n	800303e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0212 	mvn.w	r2, #18
 80030a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d124      	bne.n	8003106 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11f      	bne.n	8003106 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d111      	bne.n	8003106 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x20>
 8003144:	2302      	movs	r3, #2
 8003146:	e14f      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x2c0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d81c      	bhi.n	8003192 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	3b05      	subs	r3, #5
 800316a:	221f      	movs	r2, #31
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	4019      	ands	r1, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b05      	subs	r3, #5
 8003184:	fa00 f203 	lsl.w	r2, r0, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003190:	e07e      	b.n	8003290 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d81c      	bhi.n	80031d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b23      	subs	r3, #35	@ 0x23
 80031ac:	221f      	movs	r2, #31
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	4019      	ands	r1, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	3b23      	subs	r3, #35	@ 0x23
 80031c6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031d2:	e05d      	b.n	8003290 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d81c      	bhi.n	8003216 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	3b41      	subs	r3, #65	@ 0x41
 80031ee:	221f      	movs	r2, #31
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4019      	ands	r1, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	3b41      	subs	r3, #65	@ 0x41
 8003208:	fa00 f203 	lsl.w	r2, r0, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	639a      	str	r2, [r3, #56]	@ 0x38
 8003214:	e03c      	b.n	8003290 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b18      	cmp	r3, #24
 800321c:	d81c      	bhi.n	8003258 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	3b5f      	subs	r3, #95	@ 0x5f
 8003230:	221f      	movs	r2, #31
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	4019      	ands	r1, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	3b5f      	subs	r3, #95	@ 0x5f
 800324a:	fa00 f203 	lsl.w	r2, r0, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	635a      	str	r2, [r3, #52]	@ 0x34
 8003256:	e01b      	b.n	8003290 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	3b7d      	subs	r3, #125	@ 0x7d
 800326a:	221f      	movs	r2, #31
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	4019      	ands	r1, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b7d      	subs	r3, #125	@ 0x7d
 8003284:	fa00 f203 	lsl.w	r2, r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b09      	cmp	r3, #9
 8003296:	d81a      	bhi.n	80032ce <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6959      	ldr	r1, [r3, #20]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	2207      	movs	r2, #7
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	4019      	ands	r1, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6898      	ldr	r0, [r3, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	fa00 f203 	lsl.w	r2, r0, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	615a      	str	r2, [r3, #20]
 80032cc:	e05d      	b.n	800338a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b13      	cmp	r3, #19
 80032d4:	d81c      	bhi.n	8003310 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6919      	ldr	r1, [r3, #16]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	3b1e      	subs	r3, #30
 80032e8:	2207      	movs	r2, #7
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	4019      	ands	r1, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6898      	ldr	r0, [r3, #8]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	3b1e      	subs	r3, #30
 8003302:	fa00 f203 	lsl.w	r2, r0, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	611a      	str	r2, [r3, #16]
 800330e:	e03c      	b.n	800338a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b1d      	cmp	r3, #29
 8003316:	d81c      	bhi.n	8003352 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68d9      	ldr	r1, [r3, #12]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	3b3c      	subs	r3, #60	@ 0x3c
 800332a:	2207      	movs	r2, #7
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	4019      	ands	r1, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6898      	ldr	r0, [r3, #8]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	3b3c      	subs	r3, #60	@ 0x3c
 8003344:	fa00 f203 	lsl.w	r2, r0, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	e01b      	b.n	800338a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	3b5a      	subs	r3, #90	@ 0x5a
 8003364:	2207      	movs	r2, #7
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	4019      	ands	r1, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6898      	ldr	r0, [r3, #8]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	3b5a      	subs	r3, #90	@ 0x5a
 800337e:	fa00 f203 	lsl.w	r2, r0, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b10      	cmp	r3, #16
 8003390:	d003      	beq.n	800339a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003396:	2b11      	cmp	r3, #17
 8003398:	d121      	bne.n	80033de <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800339a:	4b16      	ldr	r3, [pc, #88]	@ (80033f4 <HAL_ADC_ConfigChannel+0x2cc>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11b      	bne.n	80033de <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80033a6:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <HAL_ADC_ConfigChannel+0x2cc>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_ADC_ConfigChannel+0x2cc>)
 80033ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033b0:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d111      	bne.n	80033de <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033ba:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a0f      	ldr	r2, [pc, #60]	@ (80033fc <HAL_ADC_ConfigChannel+0x2d4>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	0c9a      	lsrs	r2, r3, #18
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80033d0:	e002      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f9      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012700 	.word	0x40012700
 80033f8:	20000004 	.word	0x20000004
 80033fc:	431bde83 	.word	0x431bde83

08003400 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341a:	2b40      	cmp	r3, #64	@ 0x40
 800341c:	d043      	beq.n	80034a6 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800342e:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <ADC_Enable+0xb0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a20      	ldr	r2, [pc, #128]	@ (80034b4 <ADC_Enable+0xb4>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9a      	lsrs	r2, r3, #18
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003442:	e002      	b.n	800344a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	3b01      	subs	r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f9      	bne.n	8003444 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8003450:	f7ff fc1e 	bl	8002c90 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003456:	e01f      	b.n	8003498 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8003458:	f7ff fc1a 	bl	8002c90 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d918      	bls.n	8003498 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b40      	cmp	r3, #64	@ 0x40
 8003472:	d011      	beq.n	8003498 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	f043 0210 	orr.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e007      	b.n	80034a8 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a2:	2b40      	cmp	r3, #64	@ 0x40
 80034a4:	d1d8      	bne.n	8003458 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000004 	.word	0x20000004
 80034b4:	431bde83 	.word	0x431bde83

080034b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ea:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	60d3      	str	r3, [r2, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4906      	ldr	r1, [pc, #24]	@ (8003550 <__NVIC_EnableIRQ+0x34>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	e000e100 	.word	0xe000e100

08003554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	2b00      	cmp	r3, #0
 8003566:	db0a      	blt.n	800357e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	490c      	ldr	r1, [pc, #48]	@ (80035a0 <__NVIC_SetPriority+0x4c>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	0112      	lsls	r2, r2, #4
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	440b      	add	r3, r1
 8003578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800357c:	e00a      	b.n	8003594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4908      	ldr	r1, [pc, #32]	@ (80035a4 <__NVIC_SetPriority+0x50>)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3b04      	subs	r3, #4
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	440b      	add	r3, r1
 8003592:	761a      	strb	r2, [r3, #24]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	@ 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f1c3 0307 	rsb	r3, r3, #7
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf28      	it	cs
 80035c6:	2304      	movcs	r3, #4
 80035c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d902      	bls.n	80035d8 <NVIC_EncodePriority+0x30>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3b03      	subs	r3, #3
 80035d6:	e000      	b.n	80035da <NVIC_EncodePriority+0x32>
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	401a      	ands	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43d9      	mvns	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	4313      	orrs	r3, r2
         );
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	@ 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800361c:	d301      	bcc.n	8003622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <SysTick_Config+0x40>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362a:	210f      	movs	r1, #15
 800362c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003630:	f7ff ff90 	bl	8003554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003634:	4b05      	ldr	r3, [pc, #20]	@ (800364c <SysTick_Config+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363a:	4b04      	ldr	r3, [pc, #16]	@ (800364c <SysTick_Config+0x40>)
 800363c:	2207      	movs	r2, #7
 800363e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff2d 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003678:	f7ff ff42 	bl	8003500 <__NVIC_GetPriorityGrouping>
 800367c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff ff90 	bl	80035a8 <NVIC_EncodePriority>
 8003688:	4602      	mov	r2, r0
 800368a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff5f 	bl	8003554 <__NVIC_SetPriority>
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff35 	bl	800351c <__NVIC_EnableIRQ>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffa2 	bl	800360c <SysTick_Config>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d008      	beq.n	80036fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e022      	b.n	8003742 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 020e 	bic.w	r2, r2, #14
 800370a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f003 021c 	and.w	r2, r3, #28
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d005      	beq.n	8003770 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e029      	b.n	80037c4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 020e 	bic.w	r2, r2, #14
 800377e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f003 021c 	and.w	r2, r3, #28
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
    }
  }
  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80037e6:	e160      	b.n	8003aaa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	4013      	ands	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8152 	beq.w	8003aa4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d005      	beq.n	8003818 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003814:	2b02      	cmp	r3, #2
 8003816:	d130      	bne.n	800387a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800384e:	2201      	movs	r2, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0201 	and.w	r2, r3, #1
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b03      	cmp	r3, #3
 8003884:	d017      	beq.n	80038b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d123      	bne.n	800390a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3208      	adds	r2, #8
 80038ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	6939      	ldr	r1, [r7, #16]
 8003906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80ac 	beq.w	8003aa4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ac8 <HAL_GPIO_Init+0x2f8>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac8 <HAL_GPIO_Init+0x2f8>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6213      	str	r3, [r2, #32]
 8003958:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac8 <HAL_GPIO_Init+0x2f8>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003964:	4a59      	ldr	r2, [pc, #356]	@ (8003acc <HAL_GPIO_Init+0x2fc>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a51      	ldr	r2, [pc, #324]	@ (8003ad0 <HAL_GPIO_Init+0x300>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d025      	beq.n	80039dc <HAL_GPIO_Init+0x20c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a50      	ldr	r2, [pc, #320]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d01f      	beq.n	80039d8 <HAL_GPIO_Init+0x208>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a4f      	ldr	r2, [pc, #316]	@ (8003ad8 <HAL_GPIO_Init+0x308>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d019      	beq.n	80039d4 <HAL_GPIO_Init+0x204>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a4e      	ldr	r2, [pc, #312]	@ (8003adc <HAL_GPIO_Init+0x30c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <HAL_GPIO_Init+0x200>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae0 <HAL_GPIO_Init+0x310>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00d      	beq.n	80039cc <HAL_GPIO_Init+0x1fc>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ae4 <HAL_GPIO_Init+0x314>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <HAL_GPIO_Init+0x1f8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a4b      	ldr	r2, [pc, #300]	@ (8003ae8 <HAL_GPIO_Init+0x318>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_GPIO_Init+0x1f4>
 80039c0:	2306      	movs	r3, #6
 80039c2:	e00c      	b.n	80039de <HAL_GPIO_Init+0x20e>
 80039c4:	2307      	movs	r3, #7
 80039c6:	e00a      	b.n	80039de <HAL_GPIO_Init+0x20e>
 80039c8:	2305      	movs	r3, #5
 80039ca:	e008      	b.n	80039de <HAL_GPIO_Init+0x20e>
 80039cc:	2304      	movs	r3, #4
 80039ce:	e006      	b.n	80039de <HAL_GPIO_Init+0x20e>
 80039d0:	2303      	movs	r3, #3
 80039d2:	e004      	b.n	80039de <HAL_GPIO_Init+0x20e>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e002      	b.n	80039de <HAL_GPIO_Init+0x20e>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_GPIO_Init+0x20e>
 80039dc:	2300      	movs	r3, #0
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	f002 0203 	and.w	r2, r2, #3
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	4093      	lsls	r3, r2
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039ee:	4937      	ldr	r1, [pc, #220]	@ (8003acc <HAL_GPIO_Init+0x2fc>)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a20:	4a32      	ldr	r2, [pc, #200]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a26:	4b31      	ldr	r3, [pc, #196]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a4a:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a50:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a74:	4a1d      	ldr	r2, [pc, #116]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a9e:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <HAL_GPIO_Init+0x31c>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f47f ae97 	bne.w	80037e8 <HAL_GPIO_Init+0x18>
  }
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	40020400 	.word	0x40020400
 8003ad8:	40020800 	.word	0x40020800
 8003adc:	40020c00 	.word	0x40020c00
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40021400 	.word	0x40021400
 8003ae8:	40021800 	.word	0x40021800
 8003aec:	40010400 	.word	0x40010400

08003af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e001      	b.n	8003b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	807b      	strh	r3, [r7, #2]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b2e:	787b      	ldrb	r3, [r7, #1]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003b3a:	e003      	b.n	8003b44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	041a      	lsls	r2, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b5a:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b66:	4a05      	ldr	r2, [pc, #20]	@ (8003b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fb44 	bl	80021fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40010400 	.word	0x40010400

08003b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e31d      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b92:	4b94      	ldr	r3, [pc, #592]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b9c:	4b91      	ldr	r3, [pc, #580]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d07b      	beq.n	8003caa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d006      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCC_OscConfig+0x5e>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc4:	d10b      	bne.n	8003bde <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc6:	4b87      	ldr	r3, [pc, #540]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d06a      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x128>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d166      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e2f7      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d106      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x74>
 8003be6:	4b7f      	ldr	r3, [pc, #508]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7e      	ldr	r2, [pc, #504]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e02d      	b.n	8003c50 <HAL_RCC_OscConfig+0xd0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCC_OscConfig+0x96>
 8003bfc:	4b79      	ldr	r3, [pc, #484]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a78      	ldr	r2, [pc, #480]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b76      	ldr	r3, [pc, #472]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a75      	ldr	r2, [pc, #468]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0xd0>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0xb8>
 8003c1e:	4b71      	ldr	r3, [pc, #452]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a70      	ldr	r2, [pc, #448]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a6d      	ldr	r2, [pc, #436]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xd0>
 8003c38:	4b6a      	ldr	r3, [pc, #424]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a69      	ldr	r2, [pc, #420]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b67      	ldr	r3, [pc, #412]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a66      	ldr	r2, [pc, #408]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7ff f81a 	bl	8002c90 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7ff f816 	bl	8002c90 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	@ 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e2ad      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c72:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xe0>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7ff f806 	bl	8002c90 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7ff f802 	bl	8002c90 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	@ 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e299      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c9a:	4b52      	ldr	r3, [pc, #328]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x108>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d05a      	beq.n	8003d6c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d119      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x176>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d116      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc8:	4b46      	ldr	r3, [pc, #280]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x160>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e276      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce0:	4b40      	ldr	r3, [pc, #256]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	493d      	ldr	r1, [pc, #244]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf4:	e03a      	b.n	8003d6c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d020      	beq.n	8003d40 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003de8 <HAL_RCC_OscConfig+0x268>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe ffc4 	bl	8002c90 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0c:	f7fe ffc0 	bl	8002c90 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e257      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d1e:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	492a      	ldr	r1, [pc, #168]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
 8003d3e:	e015      	b.n	8003d6c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d40:	4b29      	ldr	r3, [pc, #164]	@ (8003de8 <HAL_RCC_OscConfig+0x268>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d46:	f7fe ffa3 	bl	8002c90 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe ff9f 	bl	8002c90 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e236      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80b8 	beq.w	8003eea <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d170      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d80:	4b18      	ldr	r3, [pc, #96]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x218>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e21a      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d921      	bls.n	8003dec <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fc7d 	bl	80046ac <RCC_SetFlashLatencyFromMSIRange>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e208      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4906      	ldr	r1, [pc, #24]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dce:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	4901      	ldr	r1, [pc, #4]	@ (8003de4 <HAL_RCC_OscConfig+0x264>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
 8003de2:	e020      	b.n	8003e26 <HAL_RCC_OscConfig+0x2a6>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dec:	4b99      	ldr	r3, [pc, #612]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	4996      	ldr	r1, [pc, #600]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dfe:	4b95      	ldr	r3, [pc, #596]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	4991      	ldr	r1, [pc, #580]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fc48 	bl	80046ac <RCC_SetFlashLatencyFromMSIRange>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1d3      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	0b5b      	lsrs	r3, r3, #13
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e36:	4a87      	ldr	r2, [pc, #540]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e38:	6892      	ldr	r2, [r2, #8]
 8003e3a:	0912      	lsrs	r2, r2, #4
 8003e3c:	f002 020f 	and.w	r2, r2, #15
 8003e40:	4985      	ldr	r1, [pc, #532]	@ (8004058 <HAL_RCC_OscConfig+0x4d8>)
 8003e42:	5c8a      	ldrb	r2, [r1, r2]
 8003e44:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e46:	4a85      	ldr	r2, [pc, #532]	@ (800405c <HAL_RCC_OscConfig+0x4dc>)
 8003e48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e4a:	4b85      	ldr	r3, [pc, #532]	@ (8004060 <HAL_RCC_OscConfig+0x4e0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fed2 	bl	8002bf8 <HAL_InitTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d045      	beq.n	8003eea <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	e1b5      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d029      	beq.n	8003ebe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e6a:	4b7e      	ldr	r3, [pc, #504]	@ (8004064 <HAL_RCC_OscConfig+0x4e4>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe ff0e 	bl	8002c90 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e78:	f7fe ff0a 	bl	8002c90 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1a1      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e8a:	4b72      	ldr	r3, [pc, #456]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e96:	4b6f      	ldr	r3, [pc, #444]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	496c      	ldr	r1, [pc, #432]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	4967      	ldr	r1, [pc, #412]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ebe:	4b69      	ldr	r3, [pc, #420]	@ (8004064 <HAL_RCC_OscConfig+0x4e4>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fee4 	bl	8002c90 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fee0 	bl	8002c90 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e177      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ede:	4b5d      	ldr	r3, [pc, #372]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d030      	beq.n	8003f58 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b5a      	ldr	r3, [pc, #360]	@ (8004068 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fe fec4 	bl	8002c90 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fec0 	bl	8002c90 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e157      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x38c>
 8003f2a:	e015      	b.n	8003f58 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8004068 <HAL_RCC_OscConfig+0x4e8>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fead 	bl	8002c90 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fea9 	bl	8002c90 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e140      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f4c:	4b41      	ldr	r3, [pc, #260]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80b5 	beq.w	80040d0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	4b37      	ldr	r3, [pc, #220]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	4a36      	ldr	r2, [pc, #216]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	6253      	str	r3, [r2, #36]	@ 0x24
 8003f82:	4b34      	ldr	r3, [pc, #208]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b36      	ldr	r3, [pc, #216]	@ (800406c <HAL_RCC_OscConfig+0x4ec>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b33      	ldr	r3, [pc, #204]	@ (800406c <HAL_RCC_OscConfig+0x4ec>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a32      	ldr	r2, [pc, #200]	@ (800406c <HAL_RCC_OscConfig+0x4ec>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fe fe71 	bl	8002c90 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fe fe6d 	bl	8002c90 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	@ 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e104      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b29      	ldr	r3, [pc, #164]	@ (800406c <HAL_RCC_OscConfig+0x4ec>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x466>
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe2:	6353      	str	r3, [r2, #52]	@ 0x34
 8003fe4:	e02d      	b.n	8004042 <HAL_RCC_OscConfig+0x4c2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x488>
 8003fee:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff2:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff8:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ffa:	4b16      	ldr	r3, [pc, #88]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffe:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8004000:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004004:	6353      	str	r3, [r2, #52]	@ 0x34
 8004006:	e01c      	b.n	8004042 <HAL_RCC_OscConfig+0x4c2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0x4aa>
 8004010:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8004012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004014:	4a0f      	ldr	r2, [pc, #60]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8004016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800401a:	6353      	str	r3, [r2, #52]	@ 0x34
 800401c:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 800401e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004020:	4a0c      	ldr	r2, [pc, #48]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	6353      	str	r3, [r2, #52]	@ 0x34
 8004028:	e00b      	b.n	8004042 <HAL_RCC_OscConfig+0x4c2>
 800402a:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 800402c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8004030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004034:	6353      	str	r3, [r2, #52]	@ 0x34
 8004036:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	4a06      	ldr	r2, [pc, #24]	@ (8004054 <HAL_RCC_OscConfig+0x4d4>)
 800403c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004040:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d024      	beq.n	8004094 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404a:	f7fe fe21 	bl	8002c90 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004050:	e019      	b.n	8004086 <HAL_RCC_OscConfig+0x506>
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	080091c0 	.word	0x080091c0
 800405c:	20000004 	.word	0x20000004
 8004060:	20000008 	.word	0x20000008
 8004064:	42470020 	.word	0x42470020
 8004068:	42470680 	.word	0x42470680
 800406c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fe fe0e 	bl	8002c90 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0a3      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004086:	4b54      	ldr	r3, [pc, #336]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCC_OscConfig+0x4f0>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004094:	f7fe fdfc 	bl	8002c90 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fe fdf8 	bl	8002c90 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e08d      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040b2:	4b49      	ldr	r3, [pc, #292]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 80040b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040be:	7ffb      	ldrb	r3, [r7, #31]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b44      	ldr	r3, [pc, #272]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	4a43      	ldr	r2, [pc, #268]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 80040ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d079      	beq.n	80041cc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d056      	beq.n	800418c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d13b      	bne.n	800415e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b3d      	ldr	r3, [pc, #244]	@ (80041dc <HAL_RCC_OscConfig+0x65c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fe fdd0 	bl	8002c90 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fe fdcc 	bl	8002c90 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e063      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004106:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004112:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	4319      	orrs	r1, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	430b      	orrs	r3, r1
 800412a:	492b      	ldr	r1, [pc, #172]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 800412c:	4313      	orrs	r3, r2
 800412e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004130:	4b2a      	ldr	r3, [pc, #168]	@ (80041dc <HAL_RCC_OscConfig+0x65c>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fe fdab 	bl	8002c90 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413e:	f7fe fda7 	bl	8002c90 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e03e      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004150:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x5be>
 800415c:	e036      	b.n	80041cc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b1f      	ldr	r3, [pc, #124]	@ (80041dc <HAL_RCC_OscConfig+0x65c>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fe fd94 	bl	8002c90 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fe fd90 	bl	8002c90 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e027      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800417e:	4b16      	ldr	r3, [pc, #88]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x5ec>
 800418a:	e01f      	b.n	80041cc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e01a      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004198:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <HAL_RCC_OscConfig+0x658>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d106      	bne.n	80041c8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	42470060 	.word	0x42470060

080041e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e11a      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d919      	bls.n	8004236 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCC_ClockConfig+0x34>
 8004208:	4b8a      	ldr	r3, [pc, #552]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a89      	ldr	r2, [pc, #548]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b87      	ldr	r3, [pc, #540]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 0201 	bic.w	r2, r3, #1
 800421c:	4985      	ldr	r1, [pc, #532]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004224:	4b83      	ldr	r3, [pc, #524]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d001      	beq.n	8004236 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0f9      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004242:	4b7d      	ldr	r3, [pc, #500]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	497a      	ldr	r1, [pc, #488]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 808e 	beq.w	800437e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800426a:	4b73      	ldr	r3, [pc, #460]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d121      	bne.n	80042ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0d7      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004282:	4b6d      	ldr	r3, [pc, #436]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d115      	bne.n	80042ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0cb      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800429a:	4b67      	ldr	r3, [pc, #412]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0bf      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042aa:	4b63      	ldr	r3, [pc, #396]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0b7      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	495c      	ldr	r1, [pc, #368]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fe fce0 	bl	8002c90 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d112      	bne.n	8004300 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fe fcd8 	bl	8002c90 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e09b      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042f2:	4b51      	ldr	r3, [pc, #324]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d1ee      	bne.n	80042dc <HAL_RCC_ClockConfig+0xfc>
 80042fe:	e03e      	b.n	800437e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d112      	bne.n	800432e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f7fe fcc1 	bl	8002c90 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e084      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004320:	4b45      	ldr	r3, [pc, #276]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b0c      	cmp	r3, #12
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_ClockConfig+0x12a>
 800432c:	e027      	b.n	800437e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d11d      	bne.n	8004372 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fe fcaa 	bl	8002c90 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e06d      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800434e:	4b3a      	ldr	r3, [pc, #232]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b04      	cmp	r3, #4
 8004358:	d1ee      	bne.n	8004338 <HAL_RCC_ClockConfig+0x158>
 800435a:	e010      	b.n	800437e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7fe fc98 	bl	8002c90 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e05b      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ee      	bne.n	800435c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800437e:	4b2d      	ldr	r3, [pc, #180]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d219      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <HAL_RCC_ClockConfig+0x1be>
 8004392:	4b28      	ldr	r3, [pc, #160]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a27      	ldr	r2, [pc, #156]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	4923      	ldr	r1, [pc, #140]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b21      	ldr	r3, [pc, #132]	@ (8004434 <HAL_RCC_ClockConfig+0x254>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e034      	b.n	800442a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4917      	ldr	r1, [pc, #92]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ea:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	490f      	ldr	r1, [pc, #60]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043fe:	f000 f823 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004402:	4602      	mov	r2, r0
 8004404:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <HAL_RCC_ClockConfig+0x258>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	490b      	ldr	r1, [pc, #44]	@ (800443c <HAL_RCC_ClockConfig+0x25c>)
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	4a0a      	ldr	r2, [pc, #40]	@ (8004440 <HAL_RCC_ClockConfig+0x260>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x264>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fbea 	bl	8002bf8 <HAL_InitTick>
 8004424:	4603      	mov	r3, r0
 8004426:	72fb      	strb	r3, [r7, #11]

  return status;
 8004428:	7afb      	ldrb	r3, [r7, #11]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023c00 	.word	0x40023c00
 8004438:	40023800 	.word	0x40023800
 800443c:	080091c0 	.word	0x080091c0
 8004440:	20000004 	.word	0x20000004
 8004444:	20000008 	.word	0x20000008

08004448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b092      	sub	sp, #72	@ 0x48
 800444e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004450:	4b79      	ldr	r3, [pc, #484]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d00d      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x34>
 8004460:	2b0c      	cmp	r3, #12
 8004462:	f200 80d5 	bhi.w	8004610 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004466:	2b04      	cmp	r3, #4
 8004468:	d002      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x28>
 800446a:	2b08      	cmp	r3, #8
 800446c:	d003      	beq.n	8004476 <HAL_RCC_GetSysClockFreq+0x2e>
 800446e:	e0cf      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b72      	ldr	r3, [pc, #456]	@ (800463c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004472:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004474:	e0da      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004476:	4b72      	ldr	r3, [pc, #456]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004478:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800447a:	e0d7      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800447c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800447e:	0c9b      	lsrs	r3, r3, #18
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4b6f      	ldr	r3, [pc, #444]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004486:	5c9b      	ldrb	r3, [r3, r2]
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800448a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448c:	0d9b      	lsrs	r3, r3, #22
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004496:	4b68      	ldr	r3, [pc, #416]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d05d      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	2200      	movs	r2, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	4611      	mov	r1, r2
 80044aa:	4604      	mov	r4, r0
 80044ac:	460d      	mov	r5, r1
 80044ae:	4622      	mov	r2, r4
 80044b0:	462b      	mov	r3, r5
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f04f 0100 	mov.w	r1, #0
 80044ba:	0159      	lsls	r1, r3, #5
 80044bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c0:	0150      	lsls	r0, r2, #5
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4621      	mov	r1, r4
 80044c8:	1a51      	subs	r1, r2, r1
 80044ca:	6139      	str	r1, [r7, #16]
 80044cc:	4629      	mov	r1, r5
 80044ce:	eb63 0301 	sbc.w	r3, r3, r1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e0:	4659      	mov	r1, fp
 80044e2:	018b      	lsls	r3, r1, #6
 80044e4:	4651      	mov	r1, sl
 80044e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ea:	4651      	mov	r1, sl
 80044ec:	018a      	lsls	r2, r1, #6
 80044ee:	46d4      	mov	ip, sl
 80044f0:	ebb2 080c 	subs.w	r8, r2, ip
 80044f4:	4659      	mov	r1, fp
 80044f6:	eb63 0901 	sbc.w	r9, r3, r1
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800450a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450e:	4690      	mov	r8, r2
 8004510:	4699      	mov	r9, r3
 8004512:	4623      	mov	r3, r4
 8004514:	eb18 0303 	adds.w	r3, r8, r3
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	462b      	mov	r3, r5
 800451c:	eb49 0303 	adc.w	r3, r9, r3
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800452e:	4629      	mov	r1, r5
 8004530:	024b      	lsls	r3, r1, #9
 8004532:	4620      	mov	r0, r4
 8004534:	4629      	mov	r1, r5
 8004536:	4604      	mov	r4, r0
 8004538:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800453c:	4601      	mov	r1, r0
 800453e:	024a      	lsls	r2, r1, #9
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004546:	2200      	movs	r2, #0
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800454c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004550:	f7fc fdcc 	bl	80010ec <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	647b      	str	r3, [r7, #68]	@ 0x44
 800455c:	e055      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	2200      	movs	r2, #0
 8004562:	623b      	str	r3, [r7, #32]
 8004564:	627a      	str	r2, [r7, #36]	@ 0x24
 8004566:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800456a:	4642      	mov	r2, r8
 800456c:	464b      	mov	r3, r9
 800456e:	f04f 0000 	mov.w	r0, #0
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	0159      	lsls	r1, r3, #5
 8004578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800457c:	0150      	lsls	r0, r2, #5
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	46c4      	mov	ip, r8
 8004584:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004588:	4640      	mov	r0, r8
 800458a:	4649      	mov	r1, r9
 800458c:	468c      	mov	ip, r1
 800458e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800459e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045a2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045a6:	ebb2 040a 	subs.w	r4, r2, sl
 80045aa:	eb63 050b 	sbc.w	r5, r3, fp
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	00eb      	lsls	r3, r5, #3
 80045b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045bc:	00e2      	lsls	r2, r4, #3
 80045be:	4614      	mov	r4, r2
 80045c0:	461d      	mov	r5, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	18e3      	adds	r3, r4, r3
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	460b      	mov	r3, r1
 80045ca:	eb45 0303 	adc.w	r3, r5, r3
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045dc:	4629      	mov	r1, r5
 80045de:	028b      	lsls	r3, r1, #10
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	4604      	mov	r4, r0
 80045e6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80045ea:	4601      	mov	r1, r0
 80045ec:	028a      	lsls	r2, r1, #10
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	2200      	movs	r2, #0
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	61fa      	str	r2, [r7, #28]
 80045fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fe:	f7fc fd75 	bl	80010ec <__aeabi_uldivmod>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4613      	mov	r3, r2
 8004608:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800460a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800460e:	e00d      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004610:	4b09      	ldr	r3, [pc, #36]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	0b5b      	lsrs	r3, r3, #13
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	3301      	adds	r3, #1
 8004620:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800462a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800462e:	4618      	mov	r0, r3
 8004630:	3748      	adds	r7, #72	@ 0x48
 8004632:	46bd      	mov	sp, r7
 8004634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	00f42400 	.word	0x00f42400
 8004640:	007a1200 	.word	0x007a1200
 8004644:	080091b4 	.word	0x080091b4

08004648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b02      	ldr	r3, [pc, #8]	@ (8004658 <HAL_RCC_GetHCLKFreq+0x10>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	20000004 	.word	0x20000004

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004660:	f7ff fff2 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	@ (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	@ (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	080091d0 	.word	0x080091d0

08004684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004688:	f7ff ffde 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	0adb      	lsrs	r3, r3, #11
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	@ (80046a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40023800 	.word	0x40023800
 80046a8:	080091d0 	.word	0x080091d0

080046ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046b8:	4b29      	ldr	r3, [pc, #164]	@ (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d12c      	bne.n	800471e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046c4:	4b26      	ldr	r3, [pc, #152]	@ (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80046d0:	4b24      	ldr	r3, [pc, #144]	@ (8004764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e016      	b.n	800470a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	6253      	str	r3, [r2, #36]	@ 0x24
 80046e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80046f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80046fc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fe:	4b18      	ldr	r3, [pc, #96]	@ (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004708:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004710:	d105      	bne.n	800471e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004718:	d101      	bne.n	800471e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800471a:	2301      	movs	r3, #1
 800471c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004724:	4b10      	ldr	r3, [pc, #64]	@ (8004768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0f      	ldr	r2, [pc, #60]	@ (8004768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 0201 	bic.w	r2, r3, #1
 8004738:	490b      	ldr	r1, [pc, #44]	@ (8004768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	40007000 	.word	0x40007000
 8004768:	40023c00 	.word	0x40023c00

0800476c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e031      	b.n	80047e2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd ffbc 	bl	8002710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f000 fce0 	bl	8005170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e03a      	b.n	800487a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d00e      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x58>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a16      	ldr	r2, [pc, #88]	@ (8004884 <HAL_TIM_Base_Start_IT+0x98>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x58>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a14      	ldr	r2, [pc, #80]	@ (8004888 <HAL_TIM_Base_Start_IT+0x9c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x58>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a13      	ldr	r2, [pc, #76]	@ (800488c <HAL_TIM_Base_Start_IT+0xa0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d010      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	e007      	b.n	8004878 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40010800 	.word	0x40010800

08004890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e031      	b.n	8004906 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd fef8 	bl	80026ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 fc4e 	bl	8005170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_TIM_PWM_Start+0x24>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e022      	b.n	800497a <HAL_TIM_PWM_Start+0x6a>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b04      	cmp	r3, #4
 8004938:	d109      	bne.n	800494e <HAL_TIM_PWM_Start+0x3e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e015      	b.n	800497a <HAL_TIM_PWM_Start+0x6a>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d109      	bne.n	8004968 <HAL_TIM_PWM_Start+0x58>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e008      	b.n	800497a <HAL_TIM_PWM_Start+0x6a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e051      	b.n	8004a26 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0x82>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004990:	e013      	b.n	80049ba <HAL_TIM_PWM_Start+0xaa>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0x92>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80049a0:	e00b      	b.n	80049ba <HAL_TIM_PWM_Start+0xaa>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xa2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80049b0:	e003      	b.n	80049ba <HAL_TIM_PWM_Start+0xaa>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fe53 	bl	800566e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIM_PWM_Start+0xe0>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a16      	ldr	r2, [pc, #88]	@ (8004a30 <HAL_TIM_PWM_Start+0x120>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_TIM_PWM_Start+0xe0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <HAL_TIM_PWM_Start+0x124>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_PWM_Start+0xe0>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a13      	ldr	r2, [pc, #76]	@ (8004a38 <HAL_TIM_PWM_Start+0x128>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d111      	bne.n	8004a14 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d010      	beq.n	8004a24 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a12:	e007      	b.n	8004a24 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40010800 	.word	0x40010800

08004a3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e031      	b.n	8004ab2 <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fd fdd8 	bl	8002618 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f000 fb78 	bl	8005170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_IC_Start_IT+0x1e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e013      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x46>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_IC_Start_IT+0x2e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e00b      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x46>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_IC_Start_IT+0x3e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	e003      	b.n	8004b02 <HAL_TIM_IC_Start_IT+0x46>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <HAL_TIM_IC_Start_IT+0x52>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e09c      	b.n	8004c48 <HAL_TIM_IC_Start_IT+0x18c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_IC_Start_IT+0x62>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004b1c:	e013      	b.n	8004b46 <HAL_TIM_IC_Start_IT+0x8a>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_IC_Start_IT+0x72>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8004b2c:	e00b      	b.n	8004b46 <HAL_TIM_IC_Start_IT+0x8a>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_IC_Start_IT+0x82>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004b3c:	e003      	b.n	8004b46 <HAL_TIM_IC_Start_IT+0x8a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	d841      	bhi.n	8004bd0 <HAL_TIM_IC_Start_IT+0x114>
 8004b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <HAL_TIM_IC_Start_IT+0x98>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004bd1 	.word	0x08004bd1
 8004b5c:	08004bd1 	.word	0x08004bd1
 8004b60:	08004bd1 	.word	0x08004bd1
 8004b64:	08004b9b 	.word	0x08004b9b
 8004b68:	08004bd1 	.word	0x08004bd1
 8004b6c:	08004bd1 	.word	0x08004bd1
 8004b70:	08004bd1 	.word	0x08004bd1
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004bbf 	.word	0x08004bbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0202 	orr.w	r2, r2, #2
 8004b96:	60da      	str	r2, [r3, #12]
      break;
 8004b98:	e01d      	b.n	8004bd6 <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0204 	orr.w	r2, r2, #4
 8004ba8:	60da      	str	r2, [r3, #12]
      break;
 8004baa:	e014      	b.n	8004bd6 <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	60da      	str	r2, [r3, #12]
      break;
 8004bbc:	e00b      	b.n	8004bd6 <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0210 	orr.w	r2, r2, #16
 8004bcc:	60da      	str	r2, [r3, #12]
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_TIM_IC_Start_IT+0x11a>
    }

    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d134      	bne.n	8004c46 <HAL_TIM_IC_Start_IT+0x18a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2201      	movs	r2, #1
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fd42 	bl	800566e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf2:	d00e      	beq.n	8004c12 <HAL_TIM_IC_Start_IT+0x156>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	@ (8004c50 <HAL_TIM_IC_Start_IT+0x194>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_TIM_IC_Start_IT+0x156>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <HAL_TIM_IC_Start_IT+0x198>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIM_IC_Start_IT+0x156>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a12      	ldr	r2, [pc, #72]	@ (8004c58 <HAL_TIM_IC_Start_IT+0x19c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d111      	bne.n	8004c36 <HAL_TIM_IC_Start_IT+0x17a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b06      	cmp	r3, #6
 8004c22:	d010      	beq.n	8004c46 <HAL_TIM_IC_Start_IT+0x18a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	e007      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x18a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40010800 	.word	0x40010800

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0202 	mvn.w	r2, #2
 8004c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd fb96 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa42 	bl	8005138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa48 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fb70 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa1c 	bl	8005138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa22 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0208 	mvn.w	r2, #8
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fd fb4a 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9f6 	bl	8005138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9fc 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d020      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01b      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0210 	mvn.w	r2, #16
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd fb24 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f9d0 	bl	8005138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f9d6 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0201 	mvn.w	r2, #1
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc fe44 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9b8 	bl	800515c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e088      	b.n	8004f24 <HAL_TIM_IC_ConfigChannel+0x130>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (Channel == TIM_CHANNEL_1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d11b      	bne.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004e30:	f000 fb0a 	bl	8005448 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 020c 	bic.w	r2, r2, #12
 8004e42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	619a      	str	r2, [r3, #24]
 8004e56:	e060      	b.n	8004f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d11c      	bne.n	8004e98 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004e6e:	f000 fb4b 	bl	8005508 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6999      	ldr	r1, [r3, #24]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	619a      	str	r2, [r3, #24]
 8004e96:	e040      	b.n	8004f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d11b      	bne.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004eae:	f000 fb67 	bl	8005580 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 020c 	bic.w	r2, r2, #12
 8004ec0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	61da      	str	r2, [r3, #28]
 8004ed4:	e021      	b.n	8004f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d11c      	bne.n	8004f16 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004eec:	f000 fb83 	bl	80055f6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69da      	ldr	r2, [r3, #28]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004efe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69d9      	ldr	r1, [r3, #28]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	021a      	lsls	r2, r3, #8
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	61da      	str	r2, [r3, #28]
 8004f14:	e001      	b.n	8004f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e0ae      	b.n	80050a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	f200 809f 	bhi.w	8005098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f95 	.word	0x08004f95
 8004f64:	08005099 	.word	0x08005099
 8004f68:	08005099 	.word	0x08005099
 8004f6c:	08005099 	.word	0x08005099
 8004f70:	08004fd5 	.word	0x08004fd5
 8004f74:	08005099 	.word	0x08005099
 8004f78:	08005099 	.word	0x08005099
 8004f7c:	08005099 	.word	0x08005099
 8004f80:	08005017 	.word	0x08005017
 8004f84:	08005099 	.word	0x08005099
 8004f88:	08005099 	.word	0x08005099
 8004f8c:	08005099 	.word	0x08005099
 8004f90:	08005057 	.word	0x08005057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f95e 	bl	800525c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0208 	orr.w	r2, r2, #8
 8004fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6999      	ldr	r1, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	619a      	str	r2, [r3, #24]
      break;
 8004fd2:	e064      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f97a 	bl	80052d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6999      	ldr	r1, [r3, #24]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	619a      	str	r2, [r3, #24]
      break;
 8005014:	e043      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f997 	bl	8005350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0208 	orr.w	r2, r2, #8
 8005030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0204 	bic.w	r2, r2, #4
 8005040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69d9      	ldr	r1, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	61da      	str	r2, [r3, #28]
      break;
 8005054:	e023      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f9b4 	bl	80053ca <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69d9      	ldr	r1, [r3, #28]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	021a      	lsls	r2, r3, #8
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	61da      	str	r2, [r3, #28]
      break;
 8005096:	e002      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	75fb      	strb	r3, [r7, #23]
      break;
 800509c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	d831      	bhi.n	8005128 <HAL_TIM_ReadCapturedValue+0x78>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005101 	.word	0x08005101
 80050d0:	08005129 	.word	0x08005129
 80050d4:	08005129 	.word	0x08005129
 80050d8:	08005129 	.word	0x08005129
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005129 	.word	0x08005129
 80050e4:	08005129 	.word	0x08005129
 80050e8:	08005129 	.word	0x08005129
 80050ec:	08005115 	.word	0x08005115
 80050f0:	08005129 	.word	0x08005129
 80050f4:	08005129 	.word	0x08005129
 80050f8:	08005129 	.word	0x08005129
 80050fc:	0800511f 	.word	0x0800511f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005106:	60fb      	str	r3, [r7, #12]

      break;
 8005108:	e00f      	b.n	800512a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	60fb      	str	r3, [r7, #12]

      break;
 8005112:	e00a      	b.n	800512a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511a:	60fb      	str	r3, [r7, #12]

      break;
 800511c:	e005      	b.n	800512a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	60fb      	str	r3, [r7, #12]

      break;
 8005126:	e000      	b.n	800512a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005128:	bf00      	nop
  }

  return tmpreg;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop

08005138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr
	...

08005170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005186:	d00f      	beq.n	80051a8 <TIM_Base_SetConfig+0x38>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a2e      	ldr	r2, [pc, #184]	@ (8005244 <TIM_Base_SetConfig+0xd4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_Base_SetConfig+0x38>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2d      	ldr	r2, [pc, #180]	@ (8005248 <TIM_Base_SetConfig+0xd8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_Base_SetConfig+0x38>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a2c      	ldr	r2, [pc, #176]	@ (800524c <TIM_Base_SetConfig+0xdc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_Base_SetConfig+0x38>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005250 <TIM_Base_SetConfig+0xe0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d108      	bne.n	80051ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c0:	d017      	beq.n	80051f2 <TIM_Base_SetConfig+0x82>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005244 <TIM_Base_SetConfig+0xd4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <TIM_Base_SetConfig+0x82>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005248 <TIM_Base_SetConfig+0xd8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00f      	beq.n	80051f2 <TIM_Base_SetConfig+0x82>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1d      	ldr	r2, [pc, #116]	@ (800524c <TIM_Base_SetConfig+0xdc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_Base_SetConfig+0x82>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005250 <TIM_Base_SetConfig+0xe0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_Base_SetConfig+0x82>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005254 <TIM_Base_SetConfig+0xe4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0x82>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005258 <TIM_Base_SetConfig+0xe8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f043 0204 	orr.w	r2, r3, #4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40010800 	.word	0x40010800
 8005254:	40010c00 	.word	0x40010c00
 8005258:	40011000 	.word	0x40011000

0800525c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f023 0201 	bic.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 0302 	bic.w	r3, r3, #2
 80052a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f023 0210 	bic.w	r2, r3, #16
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	621a      	str	r2, [r3, #32]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr

080053ca <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005400:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	031b      	lsls	r3, r3, #12
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
	...

08005448 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f023 0201 	bic.w	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005474:	d00f      	beq.n	8005496 <TIM_TI1_SetConfig+0x4e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <TIM_TI1_SetConfig+0xb0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_TI1_SetConfig+0x4e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a1e      	ldr	r2, [pc, #120]	@ (80054fc <TIM_TI1_SetConfig+0xb4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_TI1_SetConfig+0x4e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a1d      	ldr	r2, [pc, #116]	@ (8005500 <TIM_TI1_SetConfig+0xb8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_TI1_SetConfig+0x4e>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a1c      	ldr	r2, [pc, #112]	@ (8005504 <TIM_TI1_SetConfig+0xbc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <TIM_TI1_SetConfig+0x52>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <TIM_TI1_SetConfig+0x54>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e003      	b.n	80054ba <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f023 030a 	bic.w	r3, r3, #10
 80054d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f003 030a 	and.w	r3, r3, #10
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010800 	.word	0x40010800

08005508 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f023 0210 	bic.w	r2, r3, #16
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	031b      	lsls	r3, r3, #12
 800554c:	b29b      	uxth	r3, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800555a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f023 0303 	bic.w	r3, r3, #3
 80055ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005622:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005634:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	b29b      	uxth	r3, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	621a      	str	r2, [r3, #32]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2201      	movs	r2, #1
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	43db      	mvns	r3, r3
 8005690:	401a      	ands	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e046      	b.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005712:	d00e      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a13      	ldr	r2, [pc, #76]	@ (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a12      	ldr	r2, [pc, #72]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a10      	ldr	r2, [pc, #64]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10c      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4313      	orrs	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40010800 	.word	0x40010800

08005774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e042      	b.n	800580c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd f83c 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	@ 0x24
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fd13 	bl	80061e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b20      	cmp	r3, #32
 800582c:	d121      	bne.n	8005872 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_UART_Transmit_IT+0x26>
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e01a      	b.n	8005874 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	88fa      	ldrh	r2, [r7, #6]
 8005848:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2221      	movs	r2, #33	@ 0x21
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800586c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	4613      	mov	r3, r2
 800588a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b20      	cmp	r3, #32
 8005896:	d112      	bne.n	80058be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_UART_Receive_IT+0x26>
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e00b      	b.n	80058c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fac3 	bl	8005e40 <UART_Start_Receive_IT>
 80058ba:	4603      	mov	r3, r0
 80058bc:	e000      	b.n	80058c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b0ba      	sub	sp, #232	@ 0xe8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <HAL_UART_IRQHandler+0x66>
 800591a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fb9d 	bl	8006066 <UART_Receive_IT>
      return;
 800592c:	e271      	b.n	8005e12 <HAL_UART_IRQHandler+0x54a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800592e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80de 	beq.w	8005af4 <HAL_UART_IRQHandler+0x22c>
 8005938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005948:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80d1 	beq.w	8005af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <HAL_UART_IRQHandler+0xae>
 800595e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <HAL_UART_IRQHandler+0xd2>
 8005982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	f043 0202 	orr.w	r2, r3, #2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <HAL_UART_IRQHandler+0xf6>
 80059a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	f043 0204 	orr.w	r2, r3, #4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d011      	beq.n	80059ee <HAL_UART_IRQHandler+0x126>
 80059ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	f043 0208 	orr.w	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8208 	beq.w	8005e08 <HAL_UART_IRQHandler+0x540>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_UART_IRQHandler+0x14e>
 8005a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fb28 	bl	8006066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a20:	2b40      	cmp	r3, #64	@ 0x40
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <HAL_UART_IRQHandler+0x17a>
 8005a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d04f      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa35 	bl	8005eb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a52:	2b40      	cmp	r3, #64	@ 0x40
 8005a54:	d141      	bne.n	8005ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1d9      	bne.n	8005a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aae:	4a89      	ldr	r2, [pc, #548]	@ (8005cd4 <HAL_UART_IRQHandler+0x40c>)
 8005ab0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fd fe48 	bl	800374c <HAL_DMA_Abort_IT>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d016      	beq.n	8005af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005acc:	4610      	mov	r0, r2
 8005ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	e00e      	b.n	8005af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9a0 	bl	8005e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	e00a      	b.n	8005af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f99c 	bl	8005e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e006      	b.n	8005af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f998 	bl	8005e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005aee:	e18b      	b.n	8005e08 <HAL_UART_IRQHandler+0x540>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	bf00      	nop
    return;
 8005af2:	e189      	b.n	8005e08 <HAL_UART_IRQHandler+0x540>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	f040 8165 	bne.w	8005dc8 <HAL_UART_IRQHandler+0x500>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 815e 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x500>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8157 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x500>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3a:	2b40      	cmp	r3, #64	@ 0x40
 8005b3c:	f040 80cc 	bne.w	8005cd8 <HAL_UART_IRQHandler+0x410>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80a8 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x3de>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f080 80a1 	bcs.w	8005ca6 <HAL_UART_IRQHandler+0x3de>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	f000 8088 	beq.w	8005c88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ba4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1d9      	bne.n	8005b78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3314      	adds	r3, #20
 8005be4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005be8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e1      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3314      	adds	r3, #20
 8005c06:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3314      	adds	r3, #20
 8005c20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e3      	bne.n	8005c00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c58:	f023 0310 	bic.w	r3, r3, #16
 8005c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c6c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e3      	bne.n	8005c46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fd fd25 	bl	80036d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f8c3 	bl	8005e2a <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005ca4:	e0b2      	b.n	8005e0c <HAL_UART_IRQHandler+0x544>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	f040 80ac 	bne.w	8005e0c <HAL_UART_IRQHandler+0x544>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	f040 80a6 	bne.w	8005e0c <HAL_UART_IRQHandler+0x544>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8ac 	bl	8005e2a <HAL_UARTEx_RxEventCallback>
      return;
 8005cd2:	e09b      	b.n	8005e0c <HAL_UART_IRQHandler+0x544>
 8005cd4:	08005f77 	.word	0x08005f77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 808e 	beq.w	8005e10 <HAL_UART_IRQHandler+0x548>
          && (nb_rx_data > 0U))
 8005cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8089 	beq.w	8005e10 <HAL_UART_IRQHandler+0x548>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d22:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e3      	bne.n	8005cfe <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3314      	adds	r3, #20
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	623b      	str	r3, [r7, #32]
   return(result);
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e3      	bne.n	8005d36 <HAL_UART_IRQHandler+0x46e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005da0:	61fa      	str	r2, [r7, #28]
 8005da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e3      	bne.n	8005d7c <HAL_UART_IRQHandler+0x4b4>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f832 	bl	8005e2a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dc6:	e023      	b.n	8005e10 <HAL_UART_IRQHandler+0x548>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <HAL_UART_IRQHandler+0x520>
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_UART_IRQHandler+0x520>
  {
    UART_Transmit_IT(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8d9 	bl	8005f98 <UART_Transmit_IT>
    return;
 8005de6:	e014      	b.n	8005e12 <HAL_UART_IRQHandler+0x54a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <HAL_UART_IRQHandler+0x54a>
 8005df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_UART_IRQHandler+0x54a>
  {
    UART_EndTransmit_IT(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f918 	bl	8006036 <UART_EndTransmit_IT>
    return;
 8005e06:	e004      	b.n	8005e12 <HAL_UART_IRQHandler+0x54a>
    return;
 8005e08:	bf00      	nop
 8005e0a:	e002      	b.n	8005e12 <HAL_UART_IRQHandler+0x54a>
      return;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <HAL_UART_IRQHandler+0x54a>
      return;
 8005e10:	bf00      	nop
  }
}
 8005e12:	37e8      	adds	r7, #232	@ 0xe8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2222      	movs	r2, #34	@ 0x22
 8005e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695a      	ldr	r2, [r3, #20]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0220 	orr.w	r2, r2, #32
 8005ea4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b095      	sub	sp, #84	@ 0x54
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eda:	643a      	str	r2, [r7, #64]	@ 0x40
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ee0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3314      	adds	r3, #20
 8005ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d119      	bne.n	8005f5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f4a:	61ba      	str	r2, [r7, #24]
 8005f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6979      	ldr	r1, [r7, #20]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	613b      	str	r3, [r7, #16]
   return(result);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f6c:	bf00      	nop
 8005f6e:	3754      	adds	r7, #84	@ 0x54
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff ff44 	bl	8005e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b21      	cmp	r3, #33	@ 0x21
 8005faa:	d13e      	bne.n	800602a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb4:	d114      	bne.n	8005fe0 <UART_Transmit_IT+0x48>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d110      	bne.n	8005fe0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	621a      	str	r2, [r3, #32]
 8005fde:	e008      	b.n	8005ff2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	1c59      	adds	r1, r3, #1
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6211      	str	r1, [r2, #32]
 8005fea:	781a      	ldrb	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4619      	mov	r1, r3
 8006000:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006014:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006024:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e000      	b.n	800602c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800602a:	2302      	movs	r3, #2
  }
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800604c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fb fd0c 	bl	8001a74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b08c      	sub	sp, #48	@ 0x30
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b22      	cmp	r3, #34	@ 0x22
 8006080:	f040 80aa 	bne.w	80061d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608c:	d115      	bne.n	80060ba <UART_Receive_IT+0x54>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d111      	bne.n	80060ba <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	1c9a      	adds	r2, r3, #2
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80060b8:	e024      	b.n	8006104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c8:	d007      	beq.n	80060da <UART_Receive_IT+0x74>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <UART_Receive_IT+0x82>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e008      	b.n	80060fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4619      	mov	r1, r3
 8006112:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006114:	2b00      	cmp	r3, #0
 8006116:	d15d      	bne.n	80061d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0220 	bic.w	r2, r2, #32
 8006126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615a:	2b01      	cmp	r3, #1
 800615c:	d135      	bne.n	80061ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	613b      	str	r3, [r7, #16]
   return(result);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f023 0310 	bic.w	r3, r3, #16
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006184:	623a      	str	r2, [r7, #32]
 8006186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	69f9      	ldr	r1, [r7, #28]
 800618a:	6a3a      	ldr	r2, [r7, #32]
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	61bb      	str	r3, [r7, #24]
   return(result);
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e5      	bne.n	8006164 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d10a      	bne.n	80061bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fe31 	bl	8005e2a <HAL_UARTEx_RxEventCallback>
 80061c8:	e002      	b.n	80061d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fb fc68 	bl	8001aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e002      	b.n	80061da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e000      	b.n	80061da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3730      	adds	r7, #48	@ 0x30
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	4313      	orrs	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006224:	f023 030c 	bic.w	r3, r3, #12
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	430b      	orrs	r3, r1
 8006230:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a55      	ldr	r2, [pc, #340]	@ (80063a4 <UART_SetConfig+0x1c0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d103      	bne.n	800625a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006252:	f7fe fa17 	bl	8004684 <HAL_RCC_GetPCLK2Freq>
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	e002      	b.n	8006260 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800625a:	f7fe f9ff 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 800625e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006268:	d14c      	bne.n	8006304 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009a      	lsls	r2, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006280:	4a49      	ldr	r2, [pc, #292]	@ (80063a8 <UART_SetConfig+0x1c4>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	0119      	lsls	r1, r3, #4
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009a      	lsls	r2, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a0:	4b41      	ldr	r3, [pc, #260]	@ (80063a8 <UART_SetConfig+0x1c4>)
 80062a2:	fba3 0302 	umull	r0, r3, r3, r2
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2064      	movs	r0, #100	@ 0x64
 80062aa:	fb00 f303 	mul.w	r3, r0, r3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	3332      	adds	r3, #50	@ 0x32
 80062b4:	4a3c      	ldr	r2, [pc, #240]	@ (80063a8 <UART_SetConfig+0x1c4>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062c2:	4419      	add	r1, r3
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009a      	lsls	r2, r3, #2
 80062ce:	441a      	add	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80062da:	4b33      	ldr	r3, [pc, #204]	@ (80063a8 <UART_SetConfig+0x1c4>)
 80062dc:	fba3 0302 	umull	r0, r3, r3, r2
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	2064      	movs	r0, #100	@ 0x64
 80062e4:	fb00 f303 	mul.w	r3, r0, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	3332      	adds	r3, #50	@ 0x32
 80062ee:	4a2e      	ldr	r2, [pc, #184]	@ (80063a8 <UART_SetConfig+0x1c4>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f003 0207 	and.w	r2, r3, #7
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	440a      	add	r2, r1
 8006300:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006302:	e04a      	b.n	800639a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	009a      	lsls	r2, r3, #2
 800630e:	441a      	add	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	4a23      	ldr	r2, [pc, #140]	@ (80063a8 <UART_SetConfig+0x1c4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	0119      	lsls	r1, r3, #4
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009a      	lsls	r2, r3, #2
 800632e:	441a      	add	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	fbb2 f2f3 	udiv	r2, r2, r3
 800633a:	4b1b      	ldr	r3, [pc, #108]	@ (80063a8 <UART_SetConfig+0x1c4>)
 800633c:	fba3 0302 	umull	r0, r3, r3, r2
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	2064      	movs	r0, #100	@ 0x64
 8006344:	fb00 f303 	mul.w	r3, r0, r3
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	3332      	adds	r3, #50	@ 0x32
 800634e:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <UART_SetConfig+0x1c4>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800635a:	4419      	add	r1, r3
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	009a      	lsls	r2, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <UART_SetConfig+0x1c4>)
 8006374:	fba3 0302 	umull	r0, r3, r3, r2
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	2064      	movs	r0, #100	@ 0x64
 800637c:	fb00 f303 	mul.w	r3, r0, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	3332      	adds	r3, #50	@ 0x32
 8006386:	4a08      	ldr	r2, [pc, #32]	@ (80063a8 <UART_SetConfig+0x1c4>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	440a      	add	r2, r1
 8006398:	609a      	str	r2, [r3, #8]
}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40013800 	.word	0x40013800
 80063a8:	51eb851f 	.word	0x51eb851f

080063ac <atoi>:
 80063ac:	220a      	movs	r2, #10
 80063ae:	2100      	movs	r1, #0
 80063b0:	f000 b87a 	b.w	80064a8 <strtol>

080063b4 <_strtol_l.constprop.0>:
 80063b4:	2b24      	cmp	r3, #36	@ 0x24
 80063b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ba:	4686      	mov	lr, r0
 80063bc:	4690      	mov	r8, r2
 80063be:	d801      	bhi.n	80063c4 <_strtol_l.constprop.0+0x10>
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d106      	bne.n	80063d2 <_strtol_l.constprop.0+0x1e>
 80063c4:	f000 fe62 	bl	800708c <__errno>
 80063c8:	2316      	movs	r3, #22
 80063ca:	6003      	str	r3, [r0, #0]
 80063cc:	2000      	movs	r0, #0
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	460d      	mov	r5, r1
 80063d4:	4833      	ldr	r0, [pc, #204]	@ (80064a4 <_strtol_l.constprop.0+0xf0>)
 80063d6:	462a      	mov	r2, r5
 80063d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063dc:	5d06      	ldrb	r6, [r0, r4]
 80063de:	f016 0608 	ands.w	r6, r6, #8
 80063e2:	d1f8      	bne.n	80063d6 <_strtol_l.constprop.0+0x22>
 80063e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80063e6:	d12d      	bne.n	8006444 <_strtol_l.constprop.0+0x90>
 80063e8:	2601      	movs	r6, #1
 80063ea:	782c      	ldrb	r4, [r5, #0]
 80063ec:	1c95      	adds	r5, r2, #2
 80063ee:	f033 0210 	bics.w	r2, r3, #16
 80063f2:	d109      	bne.n	8006408 <_strtol_l.constprop.0+0x54>
 80063f4:	2c30      	cmp	r4, #48	@ 0x30
 80063f6:	d12a      	bne.n	800644e <_strtol_l.constprop.0+0x9a>
 80063f8:	782a      	ldrb	r2, [r5, #0]
 80063fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80063fe:	2a58      	cmp	r2, #88	@ 0x58
 8006400:	d125      	bne.n	800644e <_strtol_l.constprop.0+0x9a>
 8006402:	2310      	movs	r3, #16
 8006404:	786c      	ldrb	r4, [r5, #1]
 8006406:	3502      	adds	r5, #2
 8006408:	2200      	movs	r2, #0
 800640a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800640e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006412:	fbbc f9f3 	udiv	r9, ip, r3
 8006416:	4610      	mov	r0, r2
 8006418:	fb03 ca19 	mls	sl, r3, r9, ip
 800641c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006420:	2f09      	cmp	r7, #9
 8006422:	d81b      	bhi.n	800645c <_strtol_l.constprop.0+0xa8>
 8006424:	463c      	mov	r4, r7
 8006426:	42a3      	cmp	r3, r4
 8006428:	dd27      	ble.n	800647a <_strtol_l.constprop.0+0xc6>
 800642a:	1c57      	adds	r7, r2, #1
 800642c:	d007      	beq.n	800643e <_strtol_l.constprop.0+0x8a>
 800642e:	4581      	cmp	r9, r0
 8006430:	d320      	bcc.n	8006474 <_strtol_l.constprop.0+0xc0>
 8006432:	d101      	bne.n	8006438 <_strtol_l.constprop.0+0x84>
 8006434:	45a2      	cmp	sl, r4
 8006436:	db1d      	blt.n	8006474 <_strtol_l.constprop.0+0xc0>
 8006438:	2201      	movs	r2, #1
 800643a:	fb00 4003 	mla	r0, r0, r3, r4
 800643e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006442:	e7eb      	b.n	800641c <_strtol_l.constprop.0+0x68>
 8006444:	2c2b      	cmp	r4, #43	@ 0x2b
 8006446:	bf04      	itt	eq
 8006448:	782c      	ldrbeq	r4, [r5, #0]
 800644a:	1c95      	addeq	r5, r2, #2
 800644c:	e7cf      	b.n	80063ee <_strtol_l.constprop.0+0x3a>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1da      	bne.n	8006408 <_strtol_l.constprop.0+0x54>
 8006452:	2c30      	cmp	r4, #48	@ 0x30
 8006454:	bf0c      	ite	eq
 8006456:	2308      	moveq	r3, #8
 8006458:	230a      	movne	r3, #10
 800645a:	e7d5      	b.n	8006408 <_strtol_l.constprop.0+0x54>
 800645c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006460:	2f19      	cmp	r7, #25
 8006462:	d801      	bhi.n	8006468 <_strtol_l.constprop.0+0xb4>
 8006464:	3c37      	subs	r4, #55	@ 0x37
 8006466:	e7de      	b.n	8006426 <_strtol_l.constprop.0+0x72>
 8006468:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800646c:	2f19      	cmp	r7, #25
 800646e:	d804      	bhi.n	800647a <_strtol_l.constprop.0+0xc6>
 8006470:	3c57      	subs	r4, #87	@ 0x57
 8006472:	e7d8      	b.n	8006426 <_strtol_l.constprop.0+0x72>
 8006474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006478:	e7e1      	b.n	800643e <_strtol_l.constprop.0+0x8a>
 800647a:	1c53      	adds	r3, r2, #1
 800647c:	d108      	bne.n	8006490 <_strtol_l.constprop.0+0xdc>
 800647e:	2322      	movs	r3, #34	@ 0x22
 8006480:	4660      	mov	r0, ip
 8006482:	f8ce 3000 	str.w	r3, [lr]
 8006486:	f1b8 0f00 	cmp.w	r8, #0
 800648a:	d0a0      	beq.n	80063ce <_strtol_l.constprop.0+0x1a>
 800648c:	1e69      	subs	r1, r5, #1
 800648e:	e006      	b.n	800649e <_strtol_l.constprop.0+0xea>
 8006490:	b106      	cbz	r6, 8006494 <_strtol_l.constprop.0+0xe0>
 8006492:	4240      	negs	r0, r0
 8006494:	f1b8 0f00 	cmp.w	r8, #0
 8006498:	d099      	beq.n	80063ce <_strtol_l.constprop.0+0x1a>
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1f6      	bne.n	800648c <_strtol_l.constprop.0+0xd8>
 800649e:	f8c8 1000 	str.w	r1, [r8]
 80064a2:	e794      	b.n	80063ce <_strtol_l.constprop.0+0x1a>
 80064a4:	080091d9 	.word	0x080091d9

080064a8 <strtol>:
 80064a8:	4613      	mov	r3, r2
 80064aa:	460a      	mov	r2, r1
 80064ac:	4601      	mov	r1, r0
 80064ae:	4802      	ldr	r0, [pc, #8]	@ (80064b8 <strtol+0x10>)
 80064b0:	6800      	ldr	r0, [r0, #0]
 80064b2:	f7ff bf7f 	b.w	80063b4 <_strtol_l.constprop.0>
 80064b6:	bf00      	nop
 80064b8:	2000001c 	.word	0x2000001c

080064bc <__cvt>:
 80064bc:	2b00      	cmp	r3, #0
 80064be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c2:	461d      	mov	r5, r3
 80064c4:	bfbb      	ittet	lt
 80064c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80064ca:	461d      	movlt	r5, r3
 80064cc:	2300      	movge	r3, #0
 80064ce:	232d      	movlt	r3, #45	@ 0x2d
 80064d0:	b088      	sub	sp, #32
 80064d2:	4614      	mov	r4, r2
 80064d4:	bfb8      	it	lt
 80064d6:	4614      	movlt	r4, r2
 80064d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80064da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80064dc:	7013      	strb	r3, [r2, #0]
 80064de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80064e4:	f023 0820 	bic.w	r8, r3, #32
 80064e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064ec:	d005      	beq.n	80064fa <__cvt+0x3e>
 80064ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064f2:	d100      	bne.n	80064f6 <__cvt+0x3a>
 80064f4:	3601      	adds	r6, #1
 80064f6:	2302      	movs	r3, #2
 80064f8:	e000      	b.n	80064fc <__cvt+0x40>
 80064fa:	2303      	movs	r3, #3
 80064fc:	aa07      	add	r2, sp, #28
 80064fe:	9204      	str	r2, [sp, #16]
 8006500:	aa06      	add	r2, sp, #24
 8006502:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006506:	e9cd 3600 	strd	r3, r6, [sp]
 800650a:	4622      	mov	r2, r4
 800650c:	462b      	mov	r3, r5
 800650e:	f000 fe83 	bl	8007218 <_dtoa_r>
 8006512:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006516:	4607      	mov	r7, r0
 8006518:	d119      	bne.n	800654e <__cvt+0x92>
 800651a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800651c:	07db      	lsls	r3, r3, #31
 800651e:	d50e      	bpl.n	800653e <__cvt+0x82>
 8006520:	eb00 0906 	add.w	r9, r0, r6
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	4620      	mov	r0, r4
 800652a:	4629      	mov	r1, r5
 800652c:	f7fa fa54 	bl	80009d8 <__aeabi_dcmpeq>
 8006530:	b108      	cbz	r0, 8006536 <__cvt+0x7a>
 8006532:	f8cd 901c 	str.w	r9, [sp, #28]
 8006536:	2230      	movs	r2, #48	@ 0x30
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	454b      	cmp	r3, r9
 800653c:	d31e      	bcc.n	800657c <__cvt+0xc0>
 800653e:	4638      	mov	r0, r7
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006544:	1bdb      	subs	r3, r3, r7
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	b008      	add	sp, #32
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006552:	eb00 0906 	add.w	r9, r0, r6
 8006556:	d1e5      	bne.n	8006524 <__cvt+0x68>
 8006558:	7803      	ldrb	r3, [r0, #0]
 800655a:	2b30      	cmp	r3, #48	@ 0x30
 800655c:	d10a      	bne.n	8006574 <__cvt+0xb8>
 800655e:	2200      	movs	r2, #0
 8006560:	2300      	movs	r3, #0
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7fa fa37 	bl	80009d8 <__aeabi_dcmpeq>
 800656a:	b918      	cbnz	r0, 8006574 <__cvt+0xb8>
 800656c:	f1c6 0601 	rsb	r6, r6, #1
 8006570:	f8ca 6000 	str.w	r6, [sl]
 8006574:	f8da 3000 	ldr.w	r3, [sl]
 8006578:	4499      	add	r9, r3
 800657a:	e7d3      	b.n	8006524 <__cvt+0x68>
 800657c:	1c59      	adds	r1, r3, #1
 800657e:	9107      	str	r1, [sp, #28]
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e7d9      	b.n	8006538 <__cvt+0x7c>

08006584 <__exponent>:
 8006584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006586:	2900      	cmp	r1, #0
 8006588:	bfb6      	itet	lt
 800658a:	232d      	movlt	r3, #45	@ 0x2d
 800658c:	232b      	movge	r3, #43	@ 0x2b
 800658e:	4249      	neglt	r1, r1
 8006590:	2909      	cmp	r1, #9
 8006592:	7002      	strb	r2, [r0, #0]
 8006594:	7043      	strb	r3, [r0, #1]
 8006596:	dd29      	ble.n	80065ec <__exponent+0x68>
 8006598:	f10d 0307 	add.w	r3, sp, #7
 800659c:	461d      	mov	r5, r3
 800659e:	270a      	movs	r7, #10
 80065a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80065a4:	461a      	mov	r2, r3
 80065a6:	fb07 1416 	mls	r4, r7, r6, r1
 80065aa:	3430      	adds	r4, #48	@ 0x30
 80065ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065b0:	460c      	mov	r4, r1
 80065b2:	2c63      	cmp	r4, #99	@ 0x63
 80065b4:	4631      	mov	r1, r6
 80065b6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80065ba:	dcf1      	bgt.n	80065a0 <__exponent+0x1c>
 80065bc:	3130      	adds	r1, #48	@ 0x30
 80065be:	1e94      	subs	r4, r2, #2
 80065c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065c4:	4623      	mov	r3, r4
 80065c6:	1c41      	adds	r1, r0, #1
 80065c8:	42ab      	cmp	r3, r5
 80065ca:	d30a      	bcc.n	80065e2 <__exponent+0x5e>
 80065cc:	f10d 0309 	add.w	r3, sp, #9
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	42ac      	cmp	r4, r5
 80065d4:	bf88      	it	hi
 80065d6:	2300      	movhi	r3, #0
 80065d8:	3302      	adds	r3, #2
 80065da:	4403      	add	r3, r0
 80065dc:	1a18      	subs	r0, r3, r0
 80065de:	b003      	add	sp, #12
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065ea:	e7ed      	b.n	80065c8 <__exponent+0x44>
 80065ec:	2330      	movs	r3, #48	@ 0x30
 80065ee:	3130      	adds	r1, #48	@ 0x30
 80065f0:	7083      	strb	r3, [r0, #2]
 80065f2:	70c1      	strb	r1, [r0, #3]
 80065f4:	1d03      	adds	r3, r0, #4
 80065f6:	e7f1      	b.n	80065dc <__exponent+0x58>

080065f8 <_printf_float>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	b091      	sub	sp, #68	@ 0x44
 80065fe:	460c      	mov	r4, r1
 8006600:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006604:	4616      	mov	r6, r2
 8006606:	461f      	mov	r7, r3
 8006608:	4605      	mov	r5, r0
 800660a:	f000 fcf5 	bl	8006ff8 <_localeconv_r>
 800660e:	6803      	ldr	r3, [r0, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	9308      	str	r3, [sp, #32]
 8006614:	f7f9 fdb4 	bl	8000180 <strlen>
 8006618:	2300      	movs	r3, #0
 800661a:	930e      	str	r3, [sp, #56]	@ 0x38
 800661c:	f8d8 3000 	ldr.w	r3, [r8]
 8006620:	9009      	str	r0, [sp, #36]	@ 0x24
 8006622:	3307      	adds	r3, #7
 8006624:	f023 0307 	bic.w	r3, r3, #7
 8006628:	f103 0208 	add.w	r2, r3, #8
 800662c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006630:	f8d4 b000 	ldr.w	fp, [r4]
 8006634:	f8c8 2000 	str.w	r2, [r8]
 8006638:	e9d3 8900 	ldrd	r8, r9, [r3]
 800663c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006642:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006646:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800664a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800664e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006652:	4b9c      	ldr	r3, [pc, #624]	@ (80068c4 <_printf_float+0x2cc>)
 8006654:	f7fa f9f2 	bl	8000a3c <__aeabi_dcmpun>
 8006658:	bb70      	cbnz	r0, 80066b8 <_printf_float+0xc0>
 800665a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800665e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006662:	4b98      	ldr	r3, [pc, #608]	@ (80068c4 <_printf_float+0x2cc>)
 8006664:	f7fa f9cc 	bl	8000a00 <__aeabi_dcmple>
 8006668:	bb30      	cbnz	r0, 80066b8 <_printf_float+0xc0>
 800666a:	2200      	movs	r2, #0
 800666c:	2300      	movs	r3, #0
 800666e:	4640      	mov	r0, r8
 8006670:	4649      	mov	r1, r9
 8006672:	f7fa f9bb 	bl	80009ec <__aeabi_dcmplt>
 8006676:	b110      	cbz	r0, 800667e <_printf_float+0x86>
 8006678:	232d      	movs	r3, #45	@ 0x2d
 800667a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800667e:	4a92      	ldr	r2, [pc, #584]	@ (80068c8 <_printf_float+0x2d0>)
 8006680:	4b92      	ldr	r3, [pc, #584]	@ (80068cc <_printf_float+0x2d4>)
 8006682:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006686:	bf94      	ite	ls
 8006688:	4690      	movls	r8, r2
 800668a:	4698      	movhi	r8, r3
 800668c:	2303      	movs	r3, #3
 800668e:	f04f 0900 	mov.w	r9, #0
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	f02b 0304 	bic.w	r3, fp, #4
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	4633      	mov	r3, r6
 800669c:	4621      	mov	r1, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	9700      	str	r7, [sp, #0]
 80066a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80066a4:	f000 f9d4 	bl	8006a50 <_printf_common>
 80066a8:	3001      	adds	r0, #1
 80066aa:	f040 8090 	bne.w	80067ce <_printf_float+0x1d6>
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066b2:	b011      	add	sp, #68	@ 0x44
 80066b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	4640      	mov	r0, r8
 80066be:	4649      	mov	r1, r9
 80066c0:	f7fa f9bc 	bl	8000a3c <__aeabi_dcmpun>
 80066c4:	b148      	cbz	r0, 80066da <_printf_float+0xe2>
 80066c6:	464b      	mov	r3, r9
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bfb8      	it	lt
 80066cc:	232d      	movlt	r3, #45	@ 0x2d
 80066ce:	4a80      	ldr	r2, [pc, #512]	@ (80068d0 <_printf_float+0x2d8>)
 80066d0:	bfb8      	it	lt
 80066d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066d6:	4b7f      	ldr	r3, [pc, #508]	@ (80068d4 <_printf_float+0x2dc>)
 80066d8:	e7d3      	b.n	8006682 <_printf_float+0x8a>
 80066da:	6863      	ldr	r3, [r4, #4]
 80066dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	d13f      	bne.n	8006764 <_printf_float+0x16c>
 80066e4:	2306      	movs	r3, #6
 80066e6:	6063      	str	r3, [r4, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	9206      	str	r2, [sp, #24]
 80066f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80066f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80066f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80066fa:	9203      	str	r2, [sp, #12]
 80066fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006700:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	4642      	mov	r2, r8
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	4628      	mov	r0, r5
 800670c:	464b      	mov	r3, r9
 800670e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006710:	f7ff fed4 	bl	80064bc <__cvt>
 8006714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006716:	4680      	mov	r8, r0
 8006718:	2947      	cmp	r1, #71	@ 0x47
 800671a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800671c:	d128      	bne.n	8006770 <_printf_float+0x178>
 800671e:	1cc8      	adds	r0, r1, #3
 8006720:	db02      	blt.n	8006728 <_printf_float+0x130>
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	4299      	cmp	r1, r3
 8006726:	dd40      	ble.n	80067aa <_printf_float+0x1b2>
 8006728:	f1aa 0a02 	sub.w	sl, sl, #2
 800672c:	fa5f fa8a 	uxtb.w	sl, sl
 8006730:	4652      	mov	r2, sl
 8006732:	3901      	subs	r1, #1
 8006734:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006738:	910d      	str	r1, [sp, #52]	@ 0x34
 800673a:	f7ff ff23 	bl	8006584 <__exponent>
 800673e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006740:	4681      	mov	r9, r0
 8006742:	1813      	adds	r3, r2, r0
 8006744:	2a01      	cmp	r2, #1
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	dc02      	bgt.n	8006750 <_printf_float+0x158>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	07d2      	lsls	r2, r2, #31
 800674e:	d501      	bpl.n	8006754 <_printf_float+0x15c>
 8006750:	3301      	adds	r3, #1
 8006752:	6123      	str	r3, [r4, #16]
 8006754:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006758:	2b00      	cmp	r3, #0
 800675a:	d09e      	beq.n	800669a <_printf_float+0xa2>
 800675c:	232d      	movs	r3, #45	@ 0x2d
 800675e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006762:	e79a      	b.n	800669a <_printf_float+0xa2>
 8006764:	2947      	cmp	r1, #71	@ 0x47
 8006766:	d1bf      	bne.n	80066e8 <_printf_float+0xf0>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1bd      	bne.n	80066e8 <_printf_float+0xf0>
 800676c:	2301      	movs	r3, #1
 800676e:	e7ba      	b.n	80066e6 <_printf_float+0xee>
 8006770:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006774:	d9dc      	bls.n	8006730 <_printf_float+0x138>
 8006776:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800677a:	d118      	bne.n	80067ae <_printf_float+0x1b6>
 800677c:	2900      	cmp	r1, #0
 800677e:	6863      	ldr	r3, [r4, #4]
 8006780:	dd0b      	ble.n	800679a <_printf_float+0x1a2>
 8006782:	6121      	str	r1, [r4, #16]
 8006784:	b913      	cbnz	r3, 800678c <_printf_float+0x194>
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	07d0      	lsls	r0, r2, #31
 800678a:	d502      	bpl.n	8006792 <_printf_float+0x19a>
 800678c:	3301      	adds	r3, #1
 800678e:	440b      	add	r3, r1
 8006790:	6123      	str	r3, [r4, #16]
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006798:	e7dc      	b.n	8006754 <_printf_float+0x15c>
 800679a:	b913      	cbnz	r3, 80067a2 <_printf_float+0x1aa>
 800679c:	6822      	ldr	r2, [r4, #0]
 800679e:	07d2      	lsls	r2, r2, #31
 80067a0:	d501      	bpl.n	80067a6 <_printf_float+0x1ae>
 80067a2:	3302      	adds	r3, #2
 80067a4:	e7f4      	b.n	8006790 <_printf_float+0x198>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e7f2      	b.n	8006790 <_printf_float+0x198>
 80067aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067b0:	4299      	cmp	r1, r3
 80067b2:	db05      	blt.n	80067c0 <_printf_float+0x1c8>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	6121      	str	r1, [r4, #16]
 80067b8:	07d8      	lsls	r0, r3, #31
 80067ba:	d5ea      	bpl.n	8006792 <_printf_float+0x19a>
 80067bc:	1c4b      	adds	r3, r1, #1
 80067be:	e7e7      	b.n	8006790 <_printf_float+0x198>
 80067c0:	2900      	cmp	r1, #0
 80067c2:	bfcc      	ite	gt
 80067c4:	2201      	movgt	r2, #1
 80067c6:	f1c1 0202 	rsble	r2, r1, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	e7e0      	b.n	8006790 <_printf_float+0x198>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	055a      	lsls	r2, r3, #21
 80067d2:	d407      	bmi.n	80067e4 <_printf_float+0x1ec>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	4642      	mov	r2, r8
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	d12b      	bne.n	800683a <_printf_float+0x242>
 80067e2:	e764      	b.n	80066ae <_printf_float+0xb6>
 80067e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067e8:	f240 80dc 	bls.w	80069a4 <_printf_float+0x3ac>
 80067ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067f0:	2200      	movs	r2, #0
 80067f2:	2300      	movs	r3, #0
 80067f4:	f7fa f8f0 	bl	80009d8 <__aeabi_dcmpeq>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d033      	beq.n	8006864 <_printf_float+0x26c>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	4a35      	ldr	r2, [pc, #212]	@ (80068d8 <_printf_float+0x2e0>)
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	f43f af51 	beq.w	80066ae <_printf_float+0xb6>
 800680c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006810:	4543      	cmp	r3, r8
 8006812:	db02      	blt.n	800681a <_printf_float+0x222>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	07d8      	lsls	r0, r3, #31
 8006818:	d50f      	bpl.n	800683a <_printf_float+0x242>
 800681a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f af42 	beq.w	80066ae <_printf_float+0xb6>
 800682a:	f04f 0900 	mov.w	r9, #0
 800682e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006832:	f104 0a1a 	add.w	sl, r4, #26
 8006836:	45c8      	cmp	r8, r9
 8006838:	dc09      	bgt.n	800684e <_printf_float+0x256>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	079b      	lsls	r3, r3, #30
 800683e:	f100 8102 	bmi.w	8006a46 <_printf_float+0x44e>
 8006842:	68e0      	ldr	r0, [r4, #12]
 8006844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006846:	4298      	cmp	r0, r3
 8006848:	bfb8      	it	lt
 800684a:	4618      	movlt	r0, r3
 800684c:	e731      	b.n	80066b2 <_printf_float+0xba>
 800684e:	2301      	movs	r3, #1
 8006850:	4652      	mov	r2, sl
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f af28 	beq.w	80066ae <_printf_float+0xb6>
 800685e:	f109 0901 	add.w	r9, r9, #1
 8006862:	e7e8      	b.n	8006836 <_printf_float+0x23e>
 8006864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	dc38      	bgt.n	80068dc <_printf_float+0x2e4>
 800686a:	2301      	movs	r3, #1
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	4a19      	ldr	r2, [pc, #100]	@ (80068d8 <_printf_float+0x2e0>)
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	f43f af1a 	beq.w	80066ae <_printf_float+0xb6>
 800687a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800687e:	ea59 0303 	orrs.w	r3, r9, r3
 8006882:	d102      	bne.n	800688a <_printf_float+0x292>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07d9      	lsls	r1, r3, #31
 8006888:	d5d7      	bpl.n	800683a <_printf_float+0x242>
 800688a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f af0a 	beq.w	80066ae <_printf_float+0xb6>
 800689a:	f04f 0a00 	mov.w	sl, #0
 800689e:	f104 0b1a 	add.w	fp, r4, #26
 80068a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068a4:	425b      	negs	r3, r3
 80068a6:	4553      	cmp	r3, sl
 80068a8:	dc01      	bgt.n	80068ae <_printf_float+0x2b6>
 80068aa:	464b      	mov	r3, r9
 80068ac:	e793      	b.n	80067d6 <_printf_float+0x1de>
 80068ae:	2301      	movs	r3, #1
 80068b0:	465a      	mov	r2, fp
 80068b2:	4631      	mov	r1, r6
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b8      	blx	r7
 80068b8:	3001      	adds	r0, #1
 80068ba:	f43f aef8 	beq.w	80066ae <_printf_float+0xb6>
 80068be:	f10a 0a01 	add.w	sl, sl, #1
 80068c2:	e7ee      	b.n	80068a2 <_printf_float+0x2aa>
 80068c4:	7fefffff 	.word	0x7fefffff
 80068c8:	080092d9 	.word	0x080092d9
 80068cc:	080092dd 	.word	0x080092dd
 80068d0:	080092e1 	.word	0x080092e1
 80068d4:	080092e5 	.word	0x080092e5
 80068d8:	080092e9 	.word	0x080092e9
 80068dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80068e2:	4553      	cmp	r3, sl
 80068e4:	bfa8      	it	ge
 80068e6:	4653      	movge	r3, sl
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	4699      	mov	r9, r3
 80068ec:	dc36      	bgt.n	800695c <_printf_float+0x364>
 80068ee:	f04f 0b00 	mov.w	fp, #0
 80068f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068f6:	f104 021a 	add.w	r2, r4, #26
 80068fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80068fe:	eba3 0309 	sub.w	r3, r3, r9
 8006902:	455b      	cmp	r3, fp
 8006904:	dc31      	bgt.n	800696a <_printf_float+0x372>
 8006906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006908:	459a      	cmp	sl, r3
 800690a:	dc3a      	bgt.n	8006982 <_printf_float+0x38a>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	07da      	lsls	r2, r3, #31
 8006910:	d437      	bmi.n	8006982 <_printf_float+0x38a>
 8006912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006914:	ebaa 0903 	sub.w	r9, sl, r3
 8006918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800691a:	ebaa 0303 	sub.w	r3, sl, r3
 800691e:	4599      	cmp	r9, r3
 8006920:	bfa8      	it	ge
 8006922:	4699      	movge	r9, r3
 8006924:	f1b9 0f00 	cmp.w	r9, #0
 8006928:	dc33      	bgt.n	8006992 <_printf_float+0x39a>
 800692a:	f04f 0800 	mov.w	r8, #0
 800692e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006932:	f104 0b1a 	add.w	fp, r4, #26
 8006936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006938:	ebaa 0303 	sub.w	r3, sl, r3
 800693c:	eba3 0309 	sub.w	r3, r3, r9
 8006940:	4543      	cmp	r3, r8
 8006942:	f77f af7a 	ble.w	800683a <_printf_float+0x242>
 8006946:	2301      	movs	r3, #1
 8006948:	465a      	mov	r2, fp
 800694a:	4631      	mov	r1, r6
 800694c:	4628      	mov	r0, r5
 800694e:	47b8      	blx	r7
 8006950:	3001      	adds	r0, #1
 8006952:	f43f aeac 	beq.w	80066ae <_printf_float+0xb6>
 8006956:	f108 0801 	add.w	r8, r8, #1
 800695a:	e7ec      	b.n	8006936 <_printf_float+0x33e>
 800695c:	4642      	mov	r2, r8
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	d1c2      	bne.n	80068ee <_printf_float+0x2f6>
 8006968:	e6a1      	b.n	80066ae <_printf_float+0xb6>
 800696a:	2301      	movs	r3, #1
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	920a      	str	r2, [sp, #40]	@ 0x28
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae9a 	beq.w	80066ae <_printf_float+0xb6>
 800697a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800697c:	f10b 0b01 	add.w	fp, fp, #1
 8006980:	e7bb      	b.n	80068fa <_printf_float+0x302>
 8006982:	4631      	mov	r1, r6
 8006984:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	d1c0      	bne.n	8006912 <_printf_float+0x31a>
 8006990:	e68d      	b.n	80066ae <_printf_float+0xb6>
 8006992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006994:	464b      	mov	r3, r9
 8006996:	4631      	mov	r1, r6
 8006998:	4628      	mov	r0, r5
 800699a:	4442      	add	r2, r8
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	d1c3      	bne.n	800692a <_printf_float+0x332>
 80069a2:	e684      	b.n	80066ae <_printf_float+0xb6>
 80069a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80069a8:	f1ba 0f01 	cmp.w	sl, #1
 80069ac:	dc01      	bgt.n	80069b2 <_printf_float+0x3ba>
 80069ae:	07db      	lsls	r3, r3, #31
 80069b0:	d536      	bpl.n	8006a20 <_printf_float+0x428>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4642      	mov	r2, r8
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f ae76 	beq.w	80066ae <_printf_float+0xb6>
 80069c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f ae6e 	beq.w	80066ae <_printf_float+0xb6>
 80069d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069d6:	2200      	movs	r2, #0
 80069d8:	2300      	movs	r3, #0
 80069da:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80069de:	f7f9 fffb 	bl	80009d8 <__aeabi_dcmpeq>
 80069e2:	b9c0      	cbnz	r0, 8006a16 <_printf_float+0x41e>
 80069e4:	4653      	mov	r3, sl
 80069e6:	f108 0201 	add.w	r2, r8, #1
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	d10c      	bne.n	8006a0e <_printf_float+0x416>
 80069f4:	e65b      	b.n	80066ae <_printf_float+0xb6>
 80069f6:	2301      	movs	r3, #1
 80069f8:	465a      	mov	r2, fp
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	f43f ae54 	beq.w	80066ae <_printf_float+0xb6>
 8006a06:	f108 0801 	add.w	r8, r8, #1
 8006a0a:	45d0      	cmp	r8, sl
 8006a0c:	dbf3      	blt.n	80069f6 <_printf_float+0x3fe>
 8006a0e:	464b      	mov	r3, r9
 8006a10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a14:	e6e0      	b.n	80067d8 <_printf_float+0x1e0>
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	f104 0b1a 	add.w	fp, r4, #26
 8006a1e:	e7f4      	b.n	8006a0a <_printf_float+0x412>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4642      	mov	r2, r8
 8006a24:	e7e1      	b.n	80069ea <_printf_float+0x3f2>
 8006a26:	2301      	movs	r3, #1
 8006a28:	464a      	mov	r2, r9
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f ae3c 	beq.w	80066ae <_printf_float+0xb6>
 8006a36:	f108 0801 	add.w	r8, r8, #1
 8006a3a:	68e3      	ldr	r3, [r4, #12]
 8006a3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a3e:	1a5b      	subs	r3, r3, r1
 8006a40:	4543      	cmp	r3, r8
 8006a42:	dcf0      	bgt.n	8006a26 <_printf_float+0x42e>
 8006a44:	e6fd      	b.n	8006842 <_printf_float+0x24a>
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	f104 0919 	add.w	r9, r4, #25
 8006a4e:	e7f4      	b.n	8006a3a <_printf_float+0x442>

08006a50 <_printf_common>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	4616      	mov	r6, r2
 8006a56:	4698      	mov	r8, r3
 8006a58:	688a      	ldr	r2, [r1, #8]
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	bfb8      	it	lt
 8006a62:	4613      	movlt	r3, r2
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a70:	b10a      	cbz	r2, 8006a76 <_printf_common+0x26>
 8006a72:	3301      	adds	r3, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	0699      	lsls	r1, r3, #26
 8006a7a:	bf42      	ittt	mi
 8006a7c:	6833      	ldrmi	r3, [r6, #0]
 8006a7e:	3302      	addmi	r3, #2
 8006a80:	6033      	strmi	r3, [r6, #0]
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	f015 0506 	ands.w	r5, r5, #6
 8006a88:	d106      	bne.n	8006a98 <_printf_common+0x48>
 8006a8a:	f104 0a19 	add.w	sl, r4, #25
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	6832      	ldr	r2, [r6, #0]
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dc2b      	bgt.n	8006af0 <_printf_common+0xa0>
 8006a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	3b00      	subs	r3, #0
 8006aa0:	bf18      	it	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	0692      	lsls	r2, r2, #26
 8006aa6:	d430      	bmi.n	8006b0a <_printf_common+0xba>
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ab0:	47c8      	blx	r9
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d023      	beq.n	8006afe <_printf_common+0xae>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	f003 0306 	and.w	r3, r3, #6
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	bf14      	ite	ne
 8006ac2:	2500      	movne	r5, #0
 8006ac4:	6833      	ldreq	r3, [r6, #0]
 8006ac6:	f04f 0600 	mov.w	r6, #0
 8006aca:	bf08      	it	eq
 8006acc:	68e5      	ldreq	r5, [r4, #12]
 8006ace:	f104 041a 	add.w	r4, r4, #26
 8006ad2:	bf08      	it	eq
 8006ad4:	1aed      	subeq	r5, r5, r3
 8006ad6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ada:	bf08      	it	eq
 8006adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bfc4      	itt	gt
 8006ae4:	1a9b      	subgt	r3, r3, r2
 8006ae6:	18ed      	addgt	r5, r5, r3
 8006ae8:	42b5      	cmp	r5, r6
 8006aea:	d11a      	bne.n	8006b22 <_printf_common+0xd2>
 8006aec:	2000      	movs	r0, #0
 8006aee:	e008      	b.n	8006b02 <_printf_common+0xb2>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4652      	mov	r2, sl
 8006af4:	4641      	mov	r1, r8
 8006af6:	4638      	mov	r0, r7
 8006af8:	47c8      	blx	r9
 8006afa:	3001      	adds	r0, #1
 8006afc:	d103      	bne.n	8006b06 <_printf_common+0xb6>
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	3501      	adds	r5, #1
 8006b08:	e7c1      	b.n	8006a8e <_printf_common+0x3e>
 8006b0a:	2030      	movs	r0, #48	@ 0x30
 8006b0c:	18e1      	adds	r1, r4, r3
 8006b0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b18:	4422      	add	r2, r4
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b20:	e7c2      	b.n	8006aa8 <_printf_common+0x58>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4622      	mov	r2, r4
 8006b26:	4641      	mov	r1, r8
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c8      	blx	r9
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d0e6      	beq.n	8006afe <_printf_common+0xae>
 8006b30:	3601      	adds	r6, #1
 8006b32:	e7d9      	b.n	8006ae8 <_printf_common+0x98>

08006b34 <_printf_i>:
 8006b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	7e0f      	ldrb	r7, [r1, #24]
 8006b3a:	4691      	mov	r9, r2
 8006b3c:	2f78      	cmp	r7, #120	@ 0x78
 8006b3e:	4680      	mov	r8, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	469a      	mov	sl, r3
 8006b44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b4a:	d807      	bhi.n	8006b5c <_printf_i+0x28>
 8006b4c:	2f62      	cmp	r7, #98	@ 0x62
 8006b4e:	d80a      	bhi.n	8006b66 <_printf_i+0x32>
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	f000 80d3 	beq.w	8006cfc <_printf_i+0x1c8>
 8006b56:	2f58      	cmp	r7, #88	@ 0x58
 8006b58:	f000 80ba 	beq.w	8006cd0 <_printf_i+0x19c>
 8006b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b64:	e03a      	b.n	8006bdc <_printf_i+0xa8>
 8006b66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b6a:	2b15      	cmp	r3, #21
 8006b6c:	d8f6      	bhi.n	8006b5c <_printf_i+0x28>
 8006b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b74 <_printf_i+0x40>)
 8006b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b74:	08006bcd 	.word	0x08006bcd
 8006b78:	08006be1 	.word	0x08006be1
 8006b7c:	08006b5d 	.word	0x08006b5d
 8006b80:	08006b5d 	.word	0x08006b5d
 8006b84:	08006b5d 	.word	0x08006b5d
 8006b88:	08006b5d 	.word	0x08006b5d
 8006b8c:	08006be1 	.word	0x08006be1
 8006b90:	08006b5d 	.word	0x08006b5d
 8006b94:	08006b5d 	.word	0x08006b5d
 8006b98:	08006b5d 	.word	0x08006b5d
 8006b9c:	08006b5d 	.word	0x08006b5d
 8006ba0:	08006ce3 	.word	0x08006ce3
 8006ba4:	08006c0b 	.word	0x08006c0b
 8006ba8:	08006c9d 	.word	0x08006c9d
 8006bac:	08006b5d 	.word	0x08006b5d
 8006bb0:	08006b5d 	.word	0x08006b5d
 8006bb4:	08006d05 	.word	0x08006d05
 8006bb8:	08006b5d 	.word	0x08006b5d
 8006bbc:	08006c0b 	.word	0x08006c0b
 8006bc0:	08006b5d 	.word	0x08006b5d
 8006bc4:	08006b5d 	.word	0x08006b5d
 8006bc8:	08006ca5 	.word	0x08006ca5
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	1d1a      	adds	r2, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6032      	str	r2, [r6, #0]
 8006bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e09e      	b.n	8006d1e <_printf_i+0x1ea>
 8006be0:	6833      	ldr	r3, [r6, #0]
 8006be2:	6820      	ldr	r0, [r4, #0]
 8006be4:	1d19      	adds	r1, r3, #4
 8006be6:	6031      	str	r1, [r6, #0]
 8006be8:	0606      	lsls	r6, r0, #24
 8006bea:	d501      	bpl.n	8006bf0 <_printf_i+0xbc>
 8006bec:	681d      	ldr	r5, [r3, #0]
 8006bee:	e003      	b.n	8006bf8 <_printf_i+0xc4>
 8006bf0:	0645      	lsls	r5, r0, #25
 8006bf2:	d5fb      	bpl.n	8006bec <_printf_i+0xb8>
 8006bf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	da03      	bge.n	8006c04 <_printf_i+0xd0>
 8006bfc:	232d      	movs	r3, #45	@ 0x2d
 8006bfe:	426d      	negs	r5, r5
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c04:	230a      	movs	r3, #10
 8006c06:	4859      	ldr	r0, [pc, #356]	@ (8006d6c <_printf_i+0x238>)
 8006c08:	e011      	b.n	8006c2e <_printf_i+0xfa>
 8006c0a:	6821      	ldr	r1, [r4, #0]
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	0608      	lsls	r0, r1, #24
 8006c10:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c14:	d402      	bmi.n	8006c1c <_printf_i+0xe8>
 8006c16:	0649      	lsls	r1, r1, #25
 8006c18:	bf48      	it	mi
 8006c1a:	b2ad      	uxthmi	r5, r5
 8006c1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c1e:	6033      	str	r3, [r6, #0]
 8006c20:	bf14      	ite	ne
 8006c22:	230a      	movne	r3, #10
 8006c24:	2308      	moveq	r3, #8
 8006c26:	4851      	ldr	r0, [pc, #324]	@ (8006d6c <_printf_i+0x238>)
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c2e:	6866      	ldr	r6, [r4, #4]
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	bfa8      	it	ge
 8006c34:	6821      	ldrge	r1, [r4, #0]
 8006c36:	60a6      	str	r6, [r4, #8]
 8006c38:	bfa4      	itt	ge
 8006c3a:	f021 0104 	bicge.w	r1, r1, #4
 8006c3e:	6021      	strge	r1, [r4, #0]
 8006c40:	b90d      	cbnz	r5, 8006c46 <_printf_i+0x112>
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d04b      	beq.n	8006cde <_printf_i+0x1aa>
 8006c46:	4616      	mov	r6, r2
 8006c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8006c50:	5dc7      	ldrb	r7, [r0, r7]
 8006c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c56:	462f      	mov	r7, r5
 8006c58:	42bb      	cmp	r3, r7
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	d9f4      	bls.n	8006c48 <_printf_i+0x114>
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d10b      	bne.n	8006c7a <_printf_i+0x146>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	07df      	lsls	r7, r3, #31
 8006c66:	d508      	bpl.n	8006c7a <_printf_i+0x146>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	6861      	ldr	r1, [r4, #4]
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	bfde      	ittt	le
 8006c70:	2330      	movle	r3, #48	@ 0x30
 8006c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c76:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006c7a:	1b92      	subs	r2, r2, r6
 8006c7c:	6122      	str	r2, [r4, #16]
 8006c7e:	464b      	mov	r3, r9
 8006c80:	4621      	mov	r1, r4
 8006c82:	4640      	mov	r0, r8
 8006c84:	f8cd a000 	str.w	sl, [sp]
 8006c88:	aa03      	add	r2, sp, #12
 8006c8a:	f7ff fee1 	bl	8006a50 <_printf_common>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d14a      	bne.n	8006d28 <_printf_i+0x1f4>
 8006c92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c96:	b004      	add	sp, #16
 8006c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	f043 0320 	orr.w	r3, r3, #32
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	2778      	movs	r7, #120	@ 0x78
 8006ca6:	4832      	ldr	r0, [pc, #200]	@ (8006d70 <_printf_i+0x23c>)
 8006ca8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	6831      	ldr	r1, [r6, #0]
 8006cb0:	061f      	lsls	r7, r3, #24
 8006cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cb6:	d402      	bmi.n	8006cbe <_printf_i+0x18a>
 8006cb8:	065f      	lsls	r7, r3, #25
 8006cba:	bf48      	it	mi
 8006cbc:	b2ad      	uxthmi	r5, r5
 8006cbe:	6031      	str	r1, [r6, #0]
 8006cc0:	07d9      	lsls	r1, r3, #31
 8006cc2:	bf44      	itt	mi
 8006cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc8:	6023      	strmi	r3, [r4, #0]
 8006cca:	b11d      	cbz	r5, 8006cd4 <_printf_i+0x1a0>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	e7ab      	b.n	8006c28 <_printf_i+0xf4>
 8006cd0:	4826      	ldr	r0, [pc, #152]	@ (8006d6c <_printf_i+0x238>)
 8006cd2:	e7e9      	b.n	8006ca8 <_printf_i+0x174>
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	f023 0320 	bic.w	r3, r3, #32
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	e7f6      	b.n	8006ccc <_printf_i+0x198>
 8006cde:	4616      	mov	r6, r2
 8006ce0:	e7bd      	b.n	8006c5e <_printf_i+0x12a>
 8006ce2:	6833      	ldr	r3, [r6, #0]
 8006ce4:	6825      	ldr	r5, [r4, #0]
 8006ce6:	1d18      	adds	r0, r3, #4
 8006ce8:	6961      	ldr	r1, [r4, #20]
 8006cea:	6030      	str	r0, [r6, #0]
 8006cec:	062e      	lsls	r6, r5, #24
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	d501      	bpl.n	8006cf6 <_printf_i+0x1c2>
 8006cf2:	6019      	str	r1, [r3, #0]
 8006cf4:	e002      	b.n	8006cfc <_printf_i+0x1c8>
 8006cf6:	0668      	lsls	r0, r5, #25
 8006cf8:	d5fb      	bpl.n	8006cf2 <_printf_i+0x1be>
 8006cfa:	8019      	strh	r1, [r3, #0]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4616      	mov	r6, r2
 8006d00:	6123      	str	r3, [r4, #16]
 8006d02:	e7bc      	b.n	8006c7e <_printf_i+0x14a>
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	2100      	movs	r1, #0
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	6032      	str	r2, [r6, #0]
 8006d0c:	681e      	ldr	r6, [r3, #0]
 8006d0e:	6862      	ldr	r2, [r4, #4]
 8006d10:	4630      	mov	r0, r6
 8006d12:	f000 f9e8 	bl	80070e6 <memchr>
 8006d16:	b108      	cbz	r0, 8006d1c <_printf_i+0x1e8>
 8006d18:	1b80      	subs	r0, r0, r6
 8006d1a:	6060      	str	r0, [r4, #4]
 8006d1c:	6863      	ldr	r3, [r4, #4]
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	2300      	movs	r3, #0
 8006d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d26:	e7aa      	b.n	8006c7e <_printf_i+0x14a>
 8006d28:	4632      	mov	r2, r6
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	47d0      	blx	sl
 8006d32:	3001      	adds	r0, #1
 8006d34:	d0ad      	beq.n	8006c92 <_printf_i+0x15e>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	079b      	lsls	r3, r3, #30
 8006d3a:	d413      	bmi.n	8006d64 <_printf_i+0x230>
 8006d3c:	68e0      	ldr	r0, [r4, #12]
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	4298      	cmp	r0, r3
 8006d42:	bfb8      	it	lt
 8006d44:	4618      	movlt	r0, r3
 8006d46:	e7a6      	b.n	8006c96 <_printf_i+0x162>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4640      	mov	r0, r8
 8006d50:	47d0      	blx	sl
 8006d52:	3001      	adds	r0, #1
 8006d54:	d09d      	beq.n	8006c92 <_printf_i+0x15e>
 8006d56:	3501      	adds	r5, #1
 8006d58:	68e3      	ldr	r3, [r4, #12]
 8006d5a:	9903      	ldr	r1, [sp, #12]
 8006d5c:	1a5b      	subs	r3, r3, r1
 8006d5e:	42ab      	cmp	r3, r5
 8006d60:	dcf2      	bgt.n	8006d48 <_printf_i+0x214>
 8006d62:	e7eb      	b.n	8006d3c <_printf_i+0x208>
 8006d64:	2500      	movs	r5, #0
 8006d66:	f104 0619 	add.w	r6, r4, #25
 8006d6a:	e7f5      	b.n	8006d58 <_printf_i+0x224>
 8006d6c:	080092eb 	.word	0x080092eb
 8006d70:	080092fc 	.word	0x080092fc

08006d74 <std>:
 8006d74:	2300      	movs	r3, #0
 8006d76:	b510      	push	{r4, lr}
 8006d78:	4604      	mov	r4, r0
 8006d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d82:	6083      	str	r3, [r0, #8]
 8006d84:	8181      	strh	r1, [r0, #12]
 8006d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d88:	81c2      	strh	r2, [r0, #14]
 8006d8a:	6183      	str	r3, [r0, #24]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	305c      	adds	r0, #92	@ 0x5c
 8006d92:	f000 f928 	bl	8006fe6 <memset>
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <std+0x58>)
 8006d98:	6224      	str	r4, [r4, #32]
 8006d9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <std+0x5c>)
 8006d9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006da0:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd4 <std+0x60>)
 8006da2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006da4:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <std+0x64>)
 8006da6:	6323      	str	r3, [r4, #48]	@ 0x30
 8006da8:	4b0c      	ldr	r3, [pc, #48]	@ (8006ddc <std+0x68>)
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d006      	beq.n	8006dbc <std+0x48>
 8006dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006db2:	4294      	cmp	r4, r2
 8006db4:	d002      	beq.n	8006dbc <std+0x48>
 8006db6:	33d0      	adds	r3, #208	@ 0xd0
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d105      	bne.n	8006dc8 <std+0x54>
 8006dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	f000 b98c 	b.w	80070e0 <__retarget_lock_init_recursive>
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	08006f61 	.word	0x08006f61
 8006dd0:	08006f83 	.word	0x08006f83
 8006dd4:	08006fbb 	.word	0x08006fbb
 8006dd8:	08006fdf 	.word	0x08006fdf
 8006ddc:	200004ac 	.word	0x200004ac

08006de0 <stdio_exit_handler>:
 8006de0:	4a02      	ldr	r2, [pc, #8]	@ (8006dec <stdio_exit_handler+0xc>)
 8006de2:	4903      	ldr	r1, [pc, #12]	@ (8006df0 <stdio_exit_handler+0x10>)
 8006de4:	4803      	ldr	r0, [pc, #12]	@ (8006df4 <stdio_exit_handler+0x14>)
 8006de6:	f000 b869 	b.w	8006ebc <_fwalk_sglue>
 8006dea:	bf00      	nop
 8006dec:	20000010 	.word	0x20000010
 8006df0:	08008a55 	.word	0x08008a55
 8006df4:	20000020 	.word	0x20000020

08006df8 <cleanup_stdio>:
 8006df8:	6841      	ldr	r1, [r0, #4]
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <cleanup_stdio+0x34>)
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	4604      	mov	r4, r0
 8006e02:	d001      	beq.n	8006e08 <cleanup_stdio+0x10>
 8006e04:	f001 fe26 	bl	8008a54 <_fflush_r>
 8006e08:	68a1      	ldr	r1, [r4, #8]
 8006e0a:	4b09      	ldr	r3, [pc, #36]	@ (8006e30 <cleanup_stdio+0x38>)
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <cleanup_stdio+0x1e>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f001 fe1f 	bl	8008a54 <_fflush_r>
 8006e16:	68e1      	ldr	r1, [r4, #12]
 8006e18:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <cleanup_stdio+0x3c>)
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d004      	beq.n	8006e28 <cleanup_stdio+0x30>
 8006e1e:	4620      	mov	r0, r4
 8006e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e24:	f001 be16 	b.w	8008a54 <_fflush_r>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200004ac 	.word	0x200004ac
 8006e30:	20000514 	.word	0x20000514
 8006e34:	2000057c 	.word	0x2000057c

08006e38 <global_stdio_init.part.0>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <global_stdio_init.part.0+0x30>)
 8006e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8006e6c <global_stdio_init.part.0+0x34>)
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e70 <global_stdio_init.part.0+0x38>)
 8006e40:	4620      	mov	r0, r4
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	2104      	movs	r1, #4
 8006e46:	2200      	movs	r2, #0
 8006e48:	f7ff ff94 	bl	8006d74 <std>
 8006e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e50:	2201      	movs	r2, #1
 8006e52:	2109      	movs	r1, #9
 8006e54:	f7ff ff8e 	bl	8006d74 <std>
 8006e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e62:	2112      	movs	r1, #18
 8006e64:	f7ff bf86 	b.w	8006d74 <std>
 8006e68:	200005e4 	.word	0x200005e4
 8006e6c:	200004ac 	.word	0x200004ac
 8006e70:	08006de1 	.word	0x08006de1

08006e74 <__sfp_lock_acquire>:
 8006e74:	4801      	ldr	r0, [pc, #4]	@ (8006e7c <__sfp_lock_acquire+0x8>)
 8006e76:	f000 b934 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	200005ed 	.word	0x200005ed

08006e80 <__sfp_lock_release>:
 8006e80:	4801      	ldr	r0, [pc, #4]	@ (8006e88 <__sfp_lock_release+0x8>)
 8006e82:	f000 b92f 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006e86:	bf00      	nop
 8006e88:	200005ed 	.word	0x200005ed

08006e8c <__sinit>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	f7ff fff0 	bl	8006e74 <__sfp_lock_acquire>
 8006e94:	6a23      	ldr	r3, [r4, #32]
 8006e96:	b11b      	cbz	r3, 8006ea0 <__sinit+0x14>
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f7ff bff0 	b.w	8006e80 <__sfp_lock_release>
 8006ea0:	4b04      	ldr	r3, [pc, #16]	@ (8006eb4 <__sinit+0x28>)
 8006ea2:	6223      	str	r3, [r4, #32]
 8006ea4:	4b04      	ldr	r3, [pc, #16]	@ (8006eb8 <__sinit+0x2c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f5      	bne.n	8006e98 <__sinit+0xc>
 8006eac:	f7ff ffc4 	bl	8006e38 <global_stdio_init.part.0>
 8006eb0:	e7f2      	b.n	8006e98 <__sinit+0xc>
 8006eb2:	bf00      	nop
 8006eb4:	08006df9 	.word	0x08006df9
 8006eb8:	200005e4 	.word	0x200005e4

08006ebc <_fwalk_sglue>:
 8006ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	4688      	mov	r8, r1
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed0:	d505      	bpl.n	8006ede <_fwalk_sglue+0x22>
 8006ed2:	6824      	ldr	r4, [r4, #0]
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d1f7      	bne.n	8006ec8 <_fwalk_sglue+0xc>
 8006ed8:	4630      	mov	r0, r6
 8006eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d907      	bls.n	8006ef4 <_fwalk_sglue+0x38>
 8006ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	d003      	beq.n	8006ef4 <_fwalk_sglue+0x38>
 8006eec:	4629      	mov	r1, r5
 8006eee:	4638      	mov	r0, r7
 8006ef0:	47c0      	blx	r8
 8006ef2:	4306      	orrs	r6, r0
 8006ef4:	3568      	adds	r5, #104	@ 0x68
 8006ef6:	e7e9      	b.n	8006ecc <_fwalk_sglue+0x10>

08006ef8 <sniprintf>:
 8006ef8:	b40c      	push	{r2, r3}
 8006efa:	b530      	push	{r4, r5, lr}
 8006efc:	4b17      	ldr	r3, [pc, #92]	@ (8006f5c <sniprintf+0x64>)
 8006efe:	1e0c      	subs	r4, r1, #0
 8006f00:	681d      	ldr	r5, [r3, #0]
 8006f02:	b09d      	sub	sp, #116	@ 0x74
 8006f04:	da08      	bge.n	8006f18 <sniprintf+0x20>
 8006f06:	238b      	movs	r3, #139	@ 0x8b
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	b01d      	add	sp, #116	@ 0x74
 8006f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f14:	b002      	add	sp, #8
 8006f16:	4770      	bx	lr
 8006f18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006f1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f20:	bf0c      	ite	eq
 8006f22:	4623      	moveq	r3, r4
 8006f24:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006f28:	9304      	str	r3, [sp, #16]
 8006f2a:	9307      	str	r3, [sp, #28]
 8006f2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f30:	9002      	str	r0, [sp, #8]
 8006f32:	9006      	str	r0, [sp, #24]
 8006f34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f38:	4628      	mov	r0, r5
 8006f3a:	ab21      	add	r3, sp, #132	@ 0x84
 8006f3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f3e:	a902      	add	r1, sp, #8
 8006f40:	9301      	str	r3, [sp, #4]
 8006f42:	f001 fc0b 	bl	800875c <_svfiprintf_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	bfbc      	itt	lt
 8006f4a:	238b      	movlt	r3, #139	@ 0x8b
 8006f4c:	602b      	strlt	r3, [r5, #0]
 8006f4e:	2c00      	cmp	r4, #0
 8006f50:	d0dd      	beq.n	8006f0e <sniprintf+0x16>
 8006f52:	2200      	movs	r2, #0
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e7d9      	b.n	8006f0e <sniprintf+0x16>
 8006f5a:	bf00      	nop
 8006f5c:	2000001c 	.word	0x2000001c

08006f60 <__sread>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	460c      	mov	r4, r1
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	f000 f86c 	bl	8007044 <_read_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	bfab      	itete	ge
 8006f70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f72:	89a3      	ldrhlt	r3, [r4, #12]
 8006f74:	181b      	addge	r3, r3, r0
 8006f76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f7a:	bfac      	ite	ge
 8006f7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f7e:	81a3      	strhlt	r3, [r4, #12]
 8006f80:	bd10      	pop	{r4, pc}

08006f82 <__swrite>:
 8006f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	461f      	mov	r7, r3
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	05db      	lsls	r3, r3, #23
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4616      	mov	r6, r2
 8006f92:	d505      	bpl.n	8006fa0 <__swrite+0x1e>
 8006f94:	2302      	movs	r3, #2
 8006f96:	2200      	movs	r2, #0
 8006f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9c:	f000 f840 	bl	8007020 <_lseek_r>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	4628      	mov	r0, r5
 8006fac:	463b      	mov	r3, r7
 8006fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb6:	f000 b857 	b.w	8007068 <_write_r>

08006fba <__sseek>:
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 f82d 	bl	8007020 <_lseek_r>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	bf15      	itete	ne
 8006fcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fd6:	81a3      	strheq	r3, [r4, #12]
 8006fd8:	bf18      	it	ne
 8006fda:	81a3      	strhne	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__sclose>:
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 b80d 	b.w	8007000 <_close_r>

08006fe6 <memset>:
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4402      	add	r2, r0
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d100      	bne.n	8006ff0 <memset+0xa>
 8006fee:	4770      	bx	lr
 8006ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff4:	e7f9      	b.n	8006fea <memset+0x4>
	...

08006ff8 <_localeconv_r>:
 8006ff8:	4800      	ldr	r0, [pc, #0]	@ (8006ffc <_localeconv_r+0x4>)
 8006ffa:	4770      	bx	lr
 8006ffc:	2000015c 	.word	0x2000015c

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	2300      	movs	r3, #0
 8007004:	4d05      	ldr	r5, [pc, #20]	@ (800701c <_close_r+0x1c>)
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fb fd49 	bl	8002aa2 <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	200005e8 	.word	0x200005e8

08007020 <_lseek_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
 8007028:	2200      	movs	r2, #0
 800702a:	4d05      	ldr	r5, [pc, #20]	@ (8007040 <_lseek_r+0x20>)
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fb fd5b 	bl	8002aea <_lseek>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_lseek_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_lseek_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	200005e8 	.word	0x200005e8

08007044 <_read_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	2200      	movs	r2, #0
 800704e:	4d05      	ldr	r5, [pc, #20]	@ (8007064 <_read_r+0x20>)
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fb fcec 	bl	8002a30 <_read>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_read_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_read_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	200005e8 	.word	0x200005e8

08007068 <_write_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	2200      	movs	r2, #0
 8007072:	4d05      	ldr	r5, [pc, #20]	@ (8007088 <_write_r+0x20>)
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fb fcf7 	bl	8002a6a <_write>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_write_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_write_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	200005e8 	.word	0x200005e8

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	@ (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	2000001c 	.word	0x2000001c

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	2600      	movs	r6, #0
 800709c:	4d0c      	ldr	r5, [pc, #48]	@ (80070d0 <__libc_init_array+0x38>)
 800709e:	4c0d      	ldr	r4, [pc, #52]	@ (80070d4 <__libc_init_array+0x3c>)
 80070a0:	1b64      	subs	r4, r4, r5
 80070a2:	10a4      	asrs	r4, r4, #2
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	f002 f870 	bl	800918c <_init>
 80070ac:	2600      	movs	r6, #0
 80070ae:	4d0a      	ldr	r5, [pc, #40]	@ (80070d8 <__libc_init_array+0x40>)
 80070b0:	4c0a      	ldr	r4, [pc, #40]	@ (80070dc <__libc_init_array+0x44>)
 80070b2:	1b64      	subs	r4, r4, r5
 80070b4:	10a4      	asrs	r4, r4, #2
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	08009550 	.word	0x08009550
 80070d4:	08009550 	.word	0x08009550
 80070d8:	08009550 	.word	0x08009550
 80070dc:	08009554 	.word	0x08009554

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <memchr>:
 80070e6:	4603      	mov	r3, r0
 80070e8:	b510      	push	{r4, lr}
 80070ea:	b2c9      	uxtb	r1, r1
 80070ec:	4402      	add	r2, r0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	d101      	bne.n	80070f8 <memchr+0x12>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e003      	b.n	8007100 <memchr+0x1a>
 80070f8:	7804      	ldrb	r4, [r0, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	428c      	cmp	r4, r1
 80070fe:	d1f6      	bne.n	80070ee <memchr+0x8>
 8007100:	bd10      	pop	{r4, pc}

08007102 <quorem>:
 8007102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007106:	6903      	ldr	r3, [r0, #16]
 8007108:	690c      	ldr	r4, [r1, #16]
 800710a:	4607      	mov	r7, r0
 800710c:	42a3      	cmp	r3, r4
 800710e:	db7e      	blt.n	800720e <quorem+0x10c>
 8007110:	3c01      	subs	r4, #1
 8007112:	00a3      	lsls	r3, r4, #2
 8007114:	f100 0514 	add.w	r5, r0, #20
 8007118:	f101 0814 	add.w	r8, r1, #20
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800712c:	3301      	adds	r3, #1
 800712e:	429a      	cmp	r2, r3
 8007130:	fbb2 f6f3 	udiv	r6, r2, r3
 8007134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007138:	d32e      	bcc.n	8007198 <quorem+0x96>
 800713a:	f04f 0a00 	mov.w	sl, #0
 800713e:	46c4      	mov	ip, r8
 8007140:	46ae      	mov	lr, r5
 8007142:	46d3      	mov	fp, sl
 8007144:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007148:	b298      	uxth	r0, r3
 800714a:	fb06 a000 	mla	r0, r6, r0, sl
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	0c02      	lsrs	r2, r0, #16
 8007152:	fb06 2303 	mla	r3, r6, r3, r2
 8007156:	f8de 2000 	ldr.w	r2, [lr]
 800715a:	b280      	uxth	r0, r0
 800715c:	b292      	uxth	r2, r2
 800715e:	1a12      	subs	r2, r2, r0
 8007160:	445a      	add	r2, fp
 8007162:	f8de 0000 	ldr.w	r0, [lr]
 8007166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800716a:	b29b      	uxth	r3, r3
 800716c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007170:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007174:	b292      	uxth	r2, r2
 8007176:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800717a:	45e1      	cmp	r9, ip
 800717c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007180:	f84e 2b04 	str.w	r2, [lr], #4
 8007184:	d2de      	bcs.n	8007144 <quorem+0x42>
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	58eb      	ldr	r3, [r5, r3]
 800718a:	b92b      	cbnz	r3, 8007198 <quorem+0x96>
 800718c:	9b01      	ldr	r3, [sp, #4]
 800718e:	3b04      	subs	r3, #4
 8007190:	429d      	cmp	r5, r3
 8007192:	461a      	mov	r2, r3
 8007194:	d32f      	bcc.n	80071f6 <quorem+0xf4>
 8007196:	613c      	str	r4, [r7, #16]
 8007198:	4638      	mov	r0, r7
 800719a:	f001 f97b 	bl	8008494 <__mcmp>
 800719e:	2800      	cmp	r0, #0
 80071a0:	db25      	blt.n	80071ee <quorem+0xec>
 80071a2:	4629      	mov	r1, r5
 80071a4:	2000      	movs	r0, #0
 80071a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80071aa:	f8d1 c000 	ldr.w	ip, [r1]
 80071ae:	fa1f fe82 	uxth.w	lr, r2
 80071b2:	fa1f f38c 	uxth.w	r3, ip
 80071b6:	eba3 030e 	sub.w	r3, r3, lr
 80071ba:	4403      	add	r3, r0
 80071bc:	0c12      	lsrs	r2, r2, #16
 80071be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071cc:	45c1      	cmp	r9, r8
 80071ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071d2:	f841 3b04 	str.w	r3, [r1], #4
 80071d6:	d2e6      	bcs.n	80071a6 <quorem+0xa4>
 80071d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e0:	b922      	cbnz	r2, 80071ec <quorem+0xea>
 80071e2:	3b04      	subs	r3, #4
 80071e4:	429d      	cmp	r5, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	d30b      	bcc.n	8007202 <quorem+0x100>
 80071ea:	613c      	str	r4, [r7, #16]
 80071ec:	3601      	adds	r6, #1
 80071ee:	4630      	mov	r0, r6
 80071f0:	b003      	add	sp, #12
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	3b04      	subs	r3, #4
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	d1cb      	bne.n	8007196 <quorem+0x94>
 80071fe:	3c01      	subs	r4, #1
 8007200:	e7c6      	b.n	8007190 <quorem+0x8e>
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	3b04      	subs	r3, #4
 8007206:	2a00      	cmp	r2, #0
 8007208:	d1ef      	bne.n	80071ea <quorem+0xe8>
 800720a:	3c01      	subs	r4, #1
 800720c:	e7ea      	b.n	80071e4 <quorem+0xe2>
 800720e:	2000      	movs	r0, #0
 8007210:	e7ee      	b.n	80071f0 <quorem+0xee>
 8007212:	0000      	movs	r0, r0
 8007214:	0000      	movs	r0, r0
	...

08007218 <_dtoa_r>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4614      	mov	r4, r2
 800721e:	461d      	mov	r5, r3
 8007220:	69c7      	ldr	r7, [r0, #28]
 8007222:	b097      	sub	sp, #92	@ 0x5c
 8007224:	4683      	mov	fp, r0
 8007226:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800722a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800722c:	b97f      	cbnz	r7, 800724e <_dtoa_r+0x36>
 800722e:	2010      	movs	r0, #16
 8007230:	f000 fe02 	bl	8007e38 <malloc>
 8007234:	4602      	mov	r2, r0
 8007236:	f8cb 001c 	str.w	r0, [fp, #28]
 800723a:	b920      	cbnz	r0, 8007246 <_dtoa_r+0x2e>
 800723c:	21ef      	movs	r1, #239	@ 0xef
 800723e:	4ba8      	ldr	r3, [pc, #672]	@ (80074e0 <_dtoa_r+0x2c8>)
 8007240:	48a8      	ldr	r0, [pc, #672]	@ (80074e4 <_dtoa_r+0x2cc>)
 8007242:	f001 fc67 	bl	8008b14 <__assert_func>
 8007246:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800724a:	6007      	str	r7, [r0, #0]
 800724c:	60c7      	str	r7, [r0, #12]
 800724e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	b159      	cbz	r1, 800726e <_dtoa_r+0x56>
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	2301      	movs	r3, #1
 800725a:	4093      	lsls	r3, r2
 800725c:	604a      	str	r2, [r1, #4]
 800725e:	608b      	str	r3, [r1, #8]
 8007260:	4658      	mov	r0, fp
 8007262:	f000 fedf 	bl	8008024 <_Bfree>
 8007266:	2200      	movs	r2, #0
 8007268:	f8db 301c 	ldr.w	r3, [fp, #28]
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	1e2b      	subs	r3, r5, #0
 8007270:	bfaf      	iteee	ge
 8007272:	2300      	movge	r3, #0
 8007274:	2201      	movlt	r2, #1
 8007276:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800727a:	9303      	strlt	r3, [sp, #12]
 800727c:	bfa8      	it	ge
 800727e:	6033      	strge	r3, [r6, #0]
 8007280:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007284:	4b98      	ldr	r3, [pc, #608]	@ (80074e8 <_dtoa_r+0x2d0>)
 8007286:	bfb8      	it	lt
 8007288:	6032      	strlt	r2, [r6, #0]
 800728a:	ea33 0308 	bics.w	r3, r3, r8
 800728e:	d112      	bne.n	80072b6 <_dtoa_r+0x9e>
 8007290:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007294:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800729c:	4323      	orrs	r3, r4
 800729e:	f000 8550 	beq.w	8007d42 <_dtoa_r+0xb2a>
 80072a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072a4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80074ec <_dtoa_r+0x2d4>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8552 	beq.w	8007d52 <_dtoa_r+0xb3a>
 80072ae:	f10a 0303 	add.w	r3, sl, #3
 80072b2:	f000 bd4c 	b.w	8007d4e <_dtoa_r+0xb36>
 80072b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80072be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072c2:	2200      	movs	r2, #0
 80072c4:	2300      	movs	r3, #0
 80072c6:	f7f9 fb87 	bl	80009d8 <__aeabi_dcmpeq>
 80072ca:	4607      	mov	r7, r0
 80072cc:	b158      	cbz	r0, 80072e6 <_dtoa_r+0xce>
 80072ce:	2301      	movs	r3, #1
 80072d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072d6:	b113      	cbz	r3, 80072de <_dtoa_r+0xc6>
 80072d8:	4b85      	ldr	r3, [pc, #532]	@ (80074f0 <_dtoa_r+0x2d8>)
 80072da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80074f4 <_dtoa_r+0x2dc>
 80072e2:	f000 bd36 	b.w	8007d52 <_dtoa_r+0xb3a>
 80072e6:	ab14      	add	r3, sp, #80	@ 0x50
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	ab15      	add	r3, sp, #84	@ 0x54
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4658      	mov	r0, fp
 80072f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80072f4:	f001 f97e 	bl	80085f4 <__d2b>
 80072f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80072fc:	4681      	mov	r9, r0
 80072fe:	2e00      	cmp	r6, #0
 8007300:	d077      	beq.n	80073f2 <_dtoa_r+0x1da>
 8007302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007308:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800730c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007310:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007314:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007318:	9712      	str	r7, [sp, #72]	@ 0x48
 800731a:	4619      	mov	r1, r3
 800731c:	2200      	movs	r2, #0
 800731e:	4b76      	ldr	r3, [pc, #472]	@ (80074f8 <_dtoa_r+0x2e0>)
 8007320:	f7f8 ff3a 	bl	8000198 <__aeabi_dsub>
 8007324:	a368      	add	r3, pc, #416	@ (adr r3, 80074c8 <_dtoa_r+0x2b0>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f9 f8ed 	bl	8000508 <__aeabi_dmul>
 800732e:	a368      	add	r3, pc, #416	@ (adr r3, 80074d0 <_dtoa_r+0x2b8>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f8 ff32 	bl	800019c <__adddf3>
 8007338:	4604      	mov	r4, r0
 800733a:	4630      	mov	r0, r6
 800733c:	460d      	mov	r5, r1
 800733e:	f7f9 f879 	bl	8000434 <__aeabi_i2d>
 8007342:	a365      	add	r3, pc, #404	@ (adr r3, 80074d8 <_dtoa_r+0x2c0>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f9 f8de 	bl	8000508 <__aeabi_dmul>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4620      	mov	r0, r4
 8007352:	4629      	mov	r1, r5
 8007354:	f7f8 ff22 	bl	800019c <__adddf3>
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	f7f9 fb84 	bl	8000a68 <__aeabi_d2iz>
 8007360:	2200      	movs	r2, #0
 8007362:	4607      	mov	r7, r0
 8007364:	2300      	movs	r3, #0
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f9 fb3f 	bl	80009ec <__aeabi_dcmplt>
 800736e:	b140      	cbz	r0, 8007382 <_dtoa_r+0x16a>
 8007370:	4638      	mov	r0, r7
 8007372:	f7f9 f85f 	bl	8000434 <__aeabi_i2d>
 8007376:	4622      	mov	r2, r4
 8007378:	462b      	mov	r3, r5
 800737a:	f7f9 fb2d 	bl	80009d8 <__aeabi_dcmpeq>
 800737e:	b900      	cbnz	r0, 8007382 <_dtoa_r+0x16a>
 8007380:	3f01      	subs	r7, #1
 8007382:	2f16      	cmp	r7, #22
 8007384:	d853      	bhi.n	800742e <_dtoa_r+0x216>
 8007386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800738a:	4b5c      	ldr	r3, [pc, #368]	@ (80074fc <_dtoa_r+0x2e4>)
 800738c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f7f9 fb2a 	bl	80009ec <__aeabi_dcmplt>
 8007398:	2800      	cmp	r0, #0
 800739a:	d04a      	beq.n	8007432 <_dtoa_r+0x21a>
 800739c:	2300      	movs	r3, #0
 800739e:	3f01      	subs	r7, #1
 80073a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073a4:	1b9b      	subs	r3, r3, r6
 80073a6:	1e5a      	subs	r2, r3, #1
 80073a8:	bf46      	itte	mi
 80073aa:	f1c3 0801 	rsbmi	r8, r3, #1
 80073ae:	2300      	movmi	r3, #0
 80073b0:	f04f 0800 	movpl.w	r8, #0
 80073b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b6:	bf48      	it	mi
 80073b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80073ba:	2f00      	cmp	r7, #0
 80073bc:	db3b      	blt.n	8007436 <_dtoa_r+0x21e>
 80073be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c0:	970e      	str	r7, [sp, #56]	@ 0x38
 80073c2:	443b      	add	r3, r7
 80073c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073c6:	2300      	movs	r3, #0
 80073c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d866      	bhi.n	800749e <_dtoa_r+0x286>
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	bfc4      	itt	gt
 80073d4:	3b04      	subgt	r3, #4
 80073d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80073d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073da:	bfc8      	it	gt
 80073dc:	2400      	movgt	r4, #0
 80073de:	f1a3 0302 	sub.w	r3, r3, #2
 80073e2:	bfd8      	it	le
 80073e4:	2401      	movle	r4, #1
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d864      	bhi.n	80074b4 <_dtoa_r+0x29c>
 80073ea:	e8df f003 	tbb	[pc, r3]
 80073ee:	382b      	.short	0x382b
 80073f0:	5636      	.short	0x5636
 80073f2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80073f6:	441e      	add	r6, r3
 80073f8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	bfc1      	itttt	gt
 8007400:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007404:	fa08 f803 	lslgt.w	r8, r8, r3
 8007408:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800740c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007410:	bfd6      	itet	le
 8007412:	f1c3 0320 	rsble	r3, r3, #32
 8007416:	ea48 0003 	orrgt.w	r0, r8, r3
 800741a:	fa04 f003 	lslle.w	r0, r4, r3
 800741e:	f7f8 fff9 	bl	8000414 <__aeabi_ui2d>
 8007422:	2201      	movs	r2, #1
 8007424:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007428:	3e01      	subs	r6, #1
 800742a:	9212      	str	r2, [sp, #72]	@ 0x48
 800742c:	e775      	b.n	800731a <_dtoa_r+0x102>
 800742e:	2301      	movs	r3, #1
 8007430:	e7b6      	b.n	80073a0 <_dtoa_r+0x188>
 8007432:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007434:	e7b5      	b.n	80073a2 <_dtoa_r+0x18a>
 8007436:	427b      	negs	r3, r7
 8007438:	930a      	str	r3, [sp, #40]	@ 0x28
 800743a:	2300      	movs	r3, #0
 800743c:	eba8 0807 	sub.w	r8, r8, r7
 8007440:	930e      	str	r3, [sp, #56]	@ 0x38
 8007442:	e7c2      	b.n	80073ca <_dtoa_r+0x1b2>
 8007444:	2300      	movs	r3, #0
 8007446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007448:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800744a:	2b00      	cmp	r3, #0
 800744c:	dc35      	bgt.n	80074ba <_dtoa_r+0x2a2>
 800744e:	2301      	movs	r3, #1
 8007450:	461a      	mov	r2, r3
 8007452:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007456:	9221      	str	r2, [sp, #132]	@ 0x84
 8007458:	e00b      	b.n	8007472 <_dtoa_r+0x25a>
 800745a:	2301      	movs	r3, #1
 800745c:	e7f3      	b.n	8007446 <_dtoa_r+0x22e>
 800745e:	2300      	movs	r3, #0
 8007460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007462:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	9308      	str	r3, [sp, #32]
 8007468:	3301      	adds	r3, #1
 800746a:	2b01      	cmp	r3, #1
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	bfb8      	it	lt
 8007470:	2301      	movlt	r3, #1
 8007472:	2100      	movs	r1, #0
 8007474:	2204      	movs	r2, #4
 8007476:	f8db 001c 	ldr.w	r0, [fp, #28]
 800747a:	f102 0514 	add.w	r5, r2, #20
 800747e:	429d      	cmp	r5, r3
 8007480:	d91f      	bls.n	80074c2 <_dtoa_r+0x2aa>
 8007482:	6041      	str	r1, [r0, #4]
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fd8d 	bl	8007fa4 <_Balloc>
 800748a:	4682      	mov	sl, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	d139      	bne.n	8007504 <_dtoa_r+0x2ec>
 8007490:	4602      	mov	r2, r0
 8007492:	f240 11af 	movw	r1, #431	@ 0x1af
 8007496:	4b1a      	ldr	r3, [pc, #104]	@ (8007500 <_dtoa_r+0x2e8>)
 8007498:	e6d2      	b.n	8007240 <_dtoa_r+0x28>
 800749a:	2301      	movs	r3, #1
 800749c:	e7e0      	b.n	8007460 <_dtoa_r+0x248>
 800749e:	2401      	movs	r4, #1
 80074a0:	2300      	movs	r3, #0
 80074a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074aa:	2200      	movs	r2, #0
 80074ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80074b0:	2312      	movs	r3, #18
 80074b2:	e7d0      	b.n	8007456 <_dtoa_r+0x23e>
 80074b4:	2301      	movs	r3, #1
 80074b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b8:	e7f5      	b.n	80074a6 <_dtoa_r+0x28e>
 80074ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80074c0:	e7d7      	b.n	8007472 <_dtoa_r+0x25a>
 80074c2:	3101      	adds	r1, #1
 80074c4:	0052      	lsls	r2, r2, #1
 80074c6:	e7d8      	b.n	800747a <_dtoa_r+0x262>
 80074c8:	636f4361 	.word	0x636f4361
 80074cc:	3fd287a7 	.word	0x3fd287a7
 80074d0:	8b60c8b3 	.word	0x8b60c8b3
 80074d4:	3fc68a28 	.word	0x3fc68a28
 80074d8:	509f79fb 	.word	0x509f79fb
 80074dc:	3fd34413 	.word	0x3fd34413
 80074e0:	0800931a 	.word	0x0800931a
 80074e4:	08009331 	.word	0x08009331
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	08009316 	.word	0x08009316
 80074f0:	080092ea 	.word	0x080092ea
 80074f4:	080092e9 	.word	0x080092e9
 80074f8:	3ff80000 	.word	0x3ff80000
 80074fc:	08009428 	.word	0x08009428
 8007500:	08009389 	.word	0x08009389
 8007504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007508:	6018      	str	r0, [r3, #0]
 800750a:	9b07      	ldr	r3, [sp, #28]
 800750c:	2b0e      	cmp	r3, #14
 800750e:	f200 80a4 	bhi.w	800765a <_dtoa_r+0x442>
 8007512:	2c00      	cmp	r4, #0
 8007514:	f000 80a1 	beq.w	800765a <_dtoa_r+0x442>
 8007518:	2f00      	cmp	r7, #0
 800751a:	dd33      	ble.n	8007584 <_dtoa_r+0x36c>
 800751c:	4b86      	ldr	r3, [pc, #536]	@ (8007738 <_dtoa_r+0x520>)
 800751e:	f007 020f 	and.w	r2, r7, #15
 8007522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007526:	05f8      	lsls	r0, r7, #23
 8007528:	e9d3 3400 	ldrd	r3, r4, [r3]
 800752c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007534:	d516      	bpl.n	8007564 <_dtoa_r+0x34c>
 8007536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800753a:	4b80      	ldr	r3, [pc, #512]	@ (800773c <_dtoa_r+0x524>)
 800753c:	2603      	movs	r6, #3
 800753e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007542:	f7f9 f90b 	bl	800075c <__aeabi_ddiv>
 8007546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800754a:	f004 040f 	and.w	r4, r4, #15
 800754e:	4d7b      	ldr	r5, [pc, #492]	@ (800773c <_dtoa_r+0x524>)
 8007550:	b954      	cbnz	r4, 8007568 <_dtoa_r+0x350>
 8007552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755a:	f7f9 f8ff 	bl	800075c <__aeabi_ddiv>
 800755e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007562:	e028      	b.n	80075b6 <_dtoa_r+0x39e>
 8007564:	2602      	movs	r6, #2
 8007566:	e7f2      	b.n	800754e <_dtoa_r+0x336>
 8007568:	07e1      	lsls	r1, r4, #31
 800756a:	d508      	bpl.n	800757e <_dtoa_r+0x366>
 800756c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007574:	f7f8 ffc8 	bl	8000508 <__aeabi_dmul>
 8007578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800757c:	3601      	adds	r6, #1
 800757e:	1064      	asrs	r4, r4, #1
 8007580:	3508      	adds	r5, #8
 8007582:	e7e5      	b.n	8007550 <_dtoa_r+0x338>
 8007584:	f000 80d2 	beq.w	800772c <_dtoa_r+0x514>
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800758c:	427c      	negs	r4, r7
 800758e:	4b6a      	ldr	r3, [pc, #424]	@ (8007738 <_dtoa_r+0x520>)
 8007590:	f004 020f 	and.w	r2, r4, #15
 8007594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f7f8 ffb4 	bl	8000508 <__aeabi_dmul>
 80075a0:	2602      	movs	r6, #2
 80075a2:	2300      	movs	r3, #0
 80075a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a8:	4d64      	ldr	r5, [pc, #400]	@ (800773c <_dtoa_r+0x524>)
 80075aa:	1124      	asrs	r4, r4, #4
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	f040 80b2 	bne.w	8007716 <_dtoa_r+0x4fe>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1d3      	bne.n	800755e <_dtoa_r+0x346>
 80075b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 80b7 	beq.w	8007730 <_dtoa_r+0x518>
 80075c2:	2200      	movs	r2, #0
 80075c4:	4620      	mov	r0, r4
 80075c6:	4629      	mov	r1, r5
 80075c8:	4b5d      	ldr	r3, [pc, #372]	@ (8007740 <_dtoa_r+0x528>)
 80075ca:	f7f9 fa0f 	bl	80009ec <__aeabi_dcmplt>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f000 80ae 	beq.w	8007730 <_dtoa_r+0x518>
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80aa 	beq.w	8007730 <_dtoa_r+0x518>
 80075dc:	9b08      	ldr	r3, [sp, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd37      	ble.n	8007652 <_dtoa_r+0x43a>
 80075e2:	1e7b      	subs	r3, r7, #1
 80075e4:	4620      	mov	r0, r4
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	2200      	movs	r2, #0
 80075ea:	4629      	mov	r1, r5
 80075ec:	4b55      	ldr	r3, [pc, #340]	@ (8007744 <_dtoa_r+0x52c>)
 80075ee:	f7f8 ff8b 	bl	8000508 <__aeabi_dmul>
 80075f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f6:	9c08      	ldr	r4, [sp, #32]
 80075f8:	3601      	adds	r6, #1
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7f8 ff1a 	bl	8000434 <__aeabi_i2d>
 8007600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007604:	f7f8 ff80 	bl	8000508 <__aeabi_dmul>
 8007608:	2200      	movs	r2, #0
 800760a:	4b4f      	ldr	r3, [pc, #316]	@ (8007748 <_dtoa_r+0x530>)
 800760c:	f7f8 fdc6 	bl	800019c <__adddf3>
 8007610:	4605      	mov	r5, r0
 8007612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007616:	2c00      	cmp	r4, #0
 8007618:	f040 809a 	bne.w	8007750 <_dtoa_r+0x538>
 800761c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007620:	2200      	movs	r2, #0
 8007622:	4b4a      	ldr	r3, [pc, #296]	@ (800774c <_dtoa_r+0x534>)
 8007624:	f7f8 fdb8 	bl	8000198 <__aeabi_dsub>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007630:	462a      	mov	r2, r5
 8007632:	4633      	mov	r3, r6
 8007634:	f7f9 f9f8 	bl	8000a28 <__aeabi_dcmpgt>
 8007638:	2800      	cmp	r0, #0
 800763a:	f040 828e 	bne.w	8007b5a <_dtoa_r+0x942>
 800763e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007642:	462a      	mov	r2, r5
 8007644:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007648:	f7f9 f9d0 	bl	80009ec <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	f040 8127 	bne.w	80078a0 <_dtoa_r+0x688>
 8007652:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007656:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800765a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800765c:	2b00      	cmp	r3, #0
 800765e:	f2c0 8163 	blt.w	8007928 <_dtoa_r+0x710>
 8007662:	2f0e      	cmp	r7, #14
 8007664:	f300 8160 	bgt.w	8007928 <_dtoa_r+0x710>
 8007668:	4b33      	ldr	r3, [pc, #204]	@ (8007738 <_dtoa_r+0x520>)
 800766a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800766e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007672:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007676:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007678:	2b00      	cmp	r3, #0
 800767a:	da03      	bge.n	8007684 <_dtoa_r+0x46c>
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f340 8100 	ble.w	8007884 <_dtoa_r+0x66c>
 8007684:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007688:	4656      	mov	r6, sl
 800768a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800768e:	4620      	mov	r0, r4
 8007690:	4629      	mov	r1, r5
 8007692:	f7f9 f863 	bl	800075c <__aeabi_ddiv>
 8007696:	f7f9 f9e7 	bl	8000a68 <__aeabi_d2iz>
 800769a:	4680      	mov	r8, r0
 800769c:	f7f8 feca 	bl	8000434 <__aeabi_i2d>
 80076a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a4:	f7f8 ff30 	bl	8000508 <__aeabi_dmul>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f8 fd72 	bl	8000198 <__aeabi_dsub>
 80076b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076b8:	9d07      	ldr	r5, [sp, #28]
 80076ba:	f806 4b01 	strb.w	r4, [r6], #1
 80076be:	eba6 040a 	sub.w	r4, r6, sl
 80076c2:	42a5      	cmp	r5, r4
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	f040 8116 	bne.w	80078f8 <_dtoa_r+0x6e0>
 80076cc:	f7f8 fd66 	bl	800019c <__adddf3>
 80076d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
 80076d8:	f7f9 f9a6 	bl	8000a28 <__aeabi_dcmpgt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f040 80f8 	bne.w	80078d2 <_dtoa_r+0x6ba>
 80076e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f9 f975 	bl	80009d8 <__aeabi_dcmpeq>
 80076ee:	b118      	cbz	r0, 80076f8 <_dtoa_r+0x4e0>
 80076f0:	f018 0f01 	tst.w	r8, #1
 80076f4:	f040 80ed 	bne.w	80078d2 <_dtoa_r+0x6ba>
 80076f8:	4649      	mov	r1, r9
 80076fa:	4658      	mov	r0, fp
 80076fc:	f000 fc92 	bl	8008024 <_Bfree>
 8007700:	2300      	movs	r3, #0
 8007702:	7033      	strb	r3, [r6, #0]
 8007704:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007706:	3701      	adds	r7, #1
 8007708:	601f      	str	r7, [r3, #0]
 800770a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8320 	beq.w	8007d52 <_dtoa_r+0xb3a>
 8007712:	601e      	str	r6, [r3, #0]
 8007714:	e31d      	b.n	8007d52 <_dtoa_r+0xb3a>
 8007716:	07e2      	lsls	r2, r4, #31
 8007718:	d505      	bpl.n	8007726 <_dtoa_r+0x50e>
 800771a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800771e:	f7f8 fef3 	bl	8000508 <__aeabi_dmul>
 8007722:	2301      	movs	r3, #1
 8007724:	3601      	adds	r6, #1
 8007726:	1064      	asrs	r4, r4, #1
 8007728:	3508      	adds	r5, #8
 800772a:	e73f      	b.n	80075ac <_dtoa_r+0x394>
 800772c:	2602      	movs	r6, #2
 800772e:	e742      	b.n	80075b6 <_dtoa_r+0x39e>
 8007730:	9c07      	ldr	r4, [sp, #28]
 8007732:	9704      	str	r7, [sp, #16]
 8007734:	e761      	b.n	80075fa <_dtoa_r+0x3e2>
 8007736:	bf00      	nop
 8007738:	08009428 	.word	0x08009428
 800773c:	08009400 	.word	0x08009400
 8007740:	3ff00000 	.word	0x3ff00000
 8007744:	40240000 	.word	0x40240000
 8007748:	401c0000 	.word	0x401c0000
 800774c:	40140000 	.word	0x40140000
 8007750:	4b70      	ldr	r3, [pc, #448]	@ (8007914 <_dtoa_r+0x6fc>)
 8007752:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007754:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007758:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800775c:	4454      	add	r4, sl
 800775e:	2900      	cmp	r1, #0
 8007760:	d045      	beq.n	80077ee <_dtoa_r+0x5d6>
 8007762:	2000      	movs	r0, #0
 8007764:	496c      	ldr	r1, [pc, #432]	@ (8007918 <_dtoa_r+0x700>)
 8007766:	f7f8 fff9 	bl	800075c <__aeabi_ddiv>
 800776a:	4633      	mov	r3, r6
 800776c:	462a      	mov	r2, r5
 800776e:	f7f8 fd13 	bl	8000198 <__aeabi_dsub>
 8007772:	4656      	mov	r6, sl
 8007774:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777c:	f7f9 f974 	bl	8000a68 <__aeabi_d2iz>
 8007780:	4605      	mov	r5, r0
 8007782:	f7f8 fe57 	bl	8000434 <__aeabi_i2d>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778e:	f7f8 fd03 	bl	8000198 <__aeabi_dsub>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	3530      	adds	r5, #48	@ 0x30
 8007798:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800779c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077a0:	f806 5b01 	strb.w	r5, [r6], #1
 80077a4:	f7f9 f922 	bl	80009ec <__aeabi_dcmplt>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d163      	bne.n	8007874 <_dtoa_r+0x65c>
 80077ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077b0:	2000      	movs	r0, #0
 80077b2:	495a      	ldr	r1, [pc, #360]	@ (800791c <_dtoa_r+0x704>)
 80077b4:	f7f8 fcf0 	bl	8000198 <__aeabi_dsub>
 80077b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077bc:	f7f9 f916 	bl	80009ec <__aeabi_dcmplt>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f040 8087 	bne.w	80078d4 <_dtoa_r+0x6bc>
 80077c6:	42a6      	cmp	r6, r4
 80077c8:	f43f af43 	beq.w	8007652 <_dtoa_r+0x43a>
 80077cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077d0:	2200      	movs	r2, #0
 80077d2:	4b53      	ldr	r3, [pc, #332]	@ (8007920 <_dtoa_r+0x708>)
 80077d4:	f7f8 fe98 	bl	8000508 <__aeabi_dmul>
 80077d8:	2200      	movs	r2, #0
 80077da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007920 <_dtoa_r+0x708>)
 80077e4:	f7f8 fe90 	bl	8000508 <__aeabi_dmul>
 80077e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ec:	e7c4      	b.n	8007778 <_dtoa_r+0x560>
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	f7f8 fe89 	bl	8000508 <__aeabi_dmul>
 80077f6:	4656      	mov	r6, sl
 80077f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80077fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007802:	f7f9 f931 	bl	8000a68 <__aeabi_d2iz>
 8007806:	4605      	mov	r5, r0
 8007808:	f7f8 fe14 	bl	8000434 <__aeabi_i2d>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007814:	f7f8 fcc0 	bl	8000198 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	3530      	adds	r5, #48	@ 0x30
 800781e:	f806 5b01 	strb.w	r5, [r6], #1
 8007822:	42a6      	cmp	r6, r4
 8007824:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	d124      	bne.n	8007878 <_dtoa_r+0x660>
 800782e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007832:	4b39      	ldr	r3, [pc, #228]	@ (8007918 <_dtoa_r+0x700>)
 8007834:	f7f8 fcb2 	bl	800019c <__adddf3>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007840:	f7f9 f8f2 	bl	8000a28 <__aeabi_dcmpgt>
 8007844:	2800      	cmp	r0, #0
 8007846:	d145      	bne.n	80078d4 <_dtoa_r+0x6bc>
 8007848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800784c:	2000      	movs	r0, #0
 800784e:	4932      	ldr	r1, [pc, #200]	@ (8007918 <_dtoa_r+0x700>)
 8007850:	f7f8 fca2 	bl	8000198 <__aeabi_dsub>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785c:	f7f9 f8c6 	bl	80009ec <__aeabi_dcmplt>
 8007860:	2800      	cmp	r0, #0
 8007862:	f43f aef6 	beq.w	8007652 <_dtoa_r+0x43a>
 8007866:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007868:	1e73      	subs	r3, r6, #1
 800786a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800786c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007870:	2b30      	cmp	r3, #48	@ 0x30
 8007872:	d0f8      	beq.n	8007866 <_dtoa_r+0x64e>
 8007874:	9f04      	ldr	r7, [sp, #16]
 8007876:	e73f      	b.n	80076f8 <_dtoa_r+0x4e0>
 8007878:	4b29      	ldr	r3, [pc, #164]	@ (8007920 <_dtoa_r+0x708>)
 800787a:	f7f8 fe45 	bl	8000508 <__aeabi_dmul>
 800787e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007882:	e7bc      	b.n	80077fe <_dtoa_r+0x5e6>
 8007884:	d10c      	bne.n	80078a0 <_dtoa_r+0x688>
 8007886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800788a:	2200      	movs	r2, #0
 800788c:	4b25      	ldr	r3, [pc, #148]	@ (8007924 <_dtoa_r+0x70c>)
 800788e:	f7f8 fe3b 	bl	8000508 <__aeabi_dmul>
 8007892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007896:	f7f9 f8bd 	bl	8000a14 <__aeabi_dcmpge>
 800789a:	2800      	cmp	r0, #0
 800789c:	f000 815b 	beq.w	8007b56 <_dtoa_r+0x93e>
 80078a0:	2400      	movs	r4, #0
 80078a2:	4625      	mov	r5, r4
 80078a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078a6:	4656      	mov	r6, sl
 80078a8:	43db      	mvns	r3, r3
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	2700      	movs	r7, #0
 80078ae:	4621      	mov	r1, r4
 80078b0:	4658      	mov	r0, fp
 80078b2:	f000 fbb7 	bl	8008024 <_Bfree>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	d0dc      	beq.n	8007874 <_dtoa_r+0x65c>
 80078ba:	b12f      	cbz	r7, 80078c8 <_dtoa_r+0x6b0>
 80078bc:	42af      	cmp	r7, r5
 80078be:	d003      	beq.n	80078c8 <_dtoa_r+0x6b0>
 80078c0:	4639      	mov	r1, r7
 80078c2:	4658      	mov	r0, fp
 80078c4:	f000 fbae 	bl	8008024 <_Bfree>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4658      	mov	r0, fp
 80078cc:	f000 fbaa 	bl	8008024 <_Bfree>
 80078d0:	e7d0      	b.n	8007874 <_dtoa_r+0x65c>
 80078d2:	9704      	str	r7, [sp, #16]
 80078d4:	4633      	mov	r3, r6
 80078d6:	461e      	mov	r6, r3
 80078d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078dc:	2a39      	cmp	r2, #57	@ 0x39
 80078de:	d107      	bne.n	80078f0 <_dtoa_r+0x6d8>
 80078e0:	459a      	cmp	sl, r3
 80078e2:	d1f8      	bne.n	80078d6 <_dtoa_r+0x6be>
 80078e4:	9a04      	ldr	r2, [sp, #16]
 80078e6:	3201      	adds	r2, #1
 80078e8:	9204      	str	r2, [sp, #16]
 80078ea:	2230      	movs	r2, #48	@ 0x30
 80078ec:	f88a 2000 	strb.w	r2, [sl]
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	3201      	adds	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e7bd      	b.n	8007874 <_dtoa_r+0x65c>
 80078f8:	2200      	movs	r2, #0
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <_dtoa_r+0x708>)
 80078fc:	f7f8 fe04 	bl	8000508 <__aeabi_dmul>
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	f7f9 f866 	bl	80009d8 <__aeabi_dcmpeq>
 800790c:	2800      	cmp	r0, #0
 800790e:	f43f aebc 	beq.w	800768a <_dtoa_r+0x472>
 8007912:	e6f1      	b.n	80076f8 <_dtoa_r+0x4e0>
 8007914:	08009428 	.word	0x08009428
 8007918:	3fe00000 	.word	0x3fe00000
 800791c:	3ff00000 	.word	0x3ff00000
 8007920:	40240000 	.word	0x40240000
 8007924:	40140000 	.word	0x40140000
 8007928:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800792a:	2a00      	cmp	r2, #0
 800792c:	f000 80db 	beq.w	8007ae6 <_dtoa_r+0x8ce>
 8007930:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007932:	2a01      	cmp	r2, #1
 8007934:	f300 80bf 	bgt.w	8007ab6 <_dtoa_r+0x89e>
 8007938:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800793a:	2a00      	cmp	r2, #0
 800793c:	f000 80b7 	beq.w	8007aae <_dtoa_r+0x896>
 8007940:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007944:	4646      	mov	r6, r8
 8007946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800794a:	2101      	movs	r1, #1
 800794c:	441a      	add	r2, r3
 800794e:	4658      	mov	r0, fp
 8007950:	4498      	add	r8, r3
 8007952:	9209      	str	r2, [sp, #36]	@ 0x24
 8007954:	f000 fc1a 	bl	800818c <__i2b>
 8007958:	4605      	mov	r5, r0
 800795a:	b15e      	cbz	r6, 8007974 <_dtoa_r+0x75c>
 800795c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	dd08      	ble.n	8007974 <_dtoa_r+0x75c>
 8007962:	42b3      	cmp	r3, r6
 8007964:	bfa8      	it	ge
 8007966:	4633      	movge	r3, r6
 8007968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800796a:	eba8 0803 	sub.w	r8, r8, r3
 800796e:	1af6      	subs	r6, r6, r3
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	9309      	str	r3, [sp, #36]	@ 0x24
 8007974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007976:	b1f3      	cbz	r3, 80079b6 <_dtoa_r+0x79e>
 8007978:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80b7 	beq.w	8007aee <_dtoa_r+0x8d6>
 8007980:	b18c      	cbz	r4, 80079a6 <_dtoa_r+0x78e>
 8007982:	4629      	mov	r1, r5
 8007984:	4622      	mov	r2, r4
 8007986:	4658      	mov	r0, fp
 8007988:	f000 fcbe 	bl	8008308 <__pow5mult>
 800798c:	464a      	mov	r2, r9
 800798e:	4601      	mov	r1, r0
 8007990:	4605      	mov	r5, r0
 8007992:	4658      	mov	r0, fp
 8007994:	f000 fc10 	bl	80081b8 <__multiply>
 8007998:	4649      	mov	r1, r9
 800799a:	9004      	str	r0, [sp, #16]
 800799c:	4658      	mov	r0, fp
 800799e:	f000 fb41 	bl	8008024 <_Bfree>
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	4699      	mov	r9, r3
 80079a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079a8:	1b1a      	subs	r2, r3, r4
 80079aa:	d004      	beq.n	80079b6 <_dtoa_r+0x79e>
 80079ac:	4649      	mov	r1, r9
 80079ae:	4658      	mov	r0, fp
 80079b0:	f000 fcaa 	bl	8008308 <__pow5mult>
 80079b4:	4681      	mov	r9, r0
 80079b6:	2101      	movs	r1, #1
 80079b8:	4658      	mov	r0, fp
 80079ba:	f000 fbe7 	bl	800818c <__i2b>
 80079be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079c0:	4604      	mov	r4, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 81c9 	beq.w	8007d5a <_dtoa_r+0xb42>
 80079c8:	461a      	mov	r2, r3
 80079ca:	4601      	mov	r1, r0
 80079cc:	4658      	mov	r0, fp
 80079ce:	f000 fc9b 	bl	8008308 <__pow5mult>
 80079d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079d4:	4604      	mov	r4, r0
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	f300 808f 	bgt.w	8007afa <_dtoa_r+0x8e2>
 80079dc:	9b02      	ldr	r3, [sp, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 8087 	bne.w	8007af2 <_dtoa_r+0x8da>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 8083 	bne.w	8007af6 <_dtoa_r+0x8de>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079f6:	0d1b      	lsrs	r3, r3, #20
 80079f8:	051b      	lsls	r3, r3, #20
 80079fa:	b12b      	cbz	r3, 8007a08 <_dtoa_r+0x7f0>
 80079fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079fe:	f108 0801 	add.w	r8, r8, #1
 8007a02:	3301      	adds	r3, #1
 8007a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a06:	2301      	movs	r3, #1
 8007a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 81aa 	beq.w	8007d66 <_dtoa_r+0xb4e>
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a18:	6918      	ldr	r0, [r3, #16]
 8007a1a:	f000 fb6b 	bl	80080f4 <__hi0bits>
 8007a1e:	f1c0 0020 	rsb	r0, r0, #32
 8007a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a24:	4418      	add	r0, r3
 8007a26:	f010 001f 	ands.w	r0, r0, #31
 8007a2a:	d071      	beq.n	8007b10 <_dtoa_r+0x8f8>
 8007a2c:	f1c0 0320 	rsb	r3, r0, #32
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	dd65      	ble.n	8007b00 <_dtoa_r+0x8e8>
 8007a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a36:	f1c0 001c 	rsb	r0, r0, #28
 8007a3a:	4403      	add	r3, r0
 8007a3c:	4480      	add	r8, r0
 8007a3e:	4406      	add	r6, r0
 8007a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a42:	f1b8 0f00 	cmp.w	r8, #0
 8007a46:	dd05      	ble.n	8007a54 <_dtoa_r+0x83c>
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4642      	mov	r2, r8
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fcb5 	bl	80083bc <__lshift>
 8007a52:	4681      	mov	r9, r0
 8007a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dd05      	ble.n	8007a66 <_dtoa_r+0x84e>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4658      	mov	r0, fp
 8007a60:	f000 fcac 	bl	80083bc <__lshift>
 8007a64:	4604      	mov	r4, r0
 8007a66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d053      	beq.n	8007b14 <_dtoa_r+0x8fc>
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4648      	mov	r0, r9
 8007a70:	f000 fd10 	bl	8008494 <__mcmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	da4d      	bge.n	8007b14 <_dtoa_r+0x8fc>
 8007a78:	1e7b      	subs	r3, r7, #1
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	220a      	movs	r2, #10
 8007a80:	2300      	movs	r3, #0
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 faf0 	bl	8008068 <__multadd>
 8007a88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a8a:	4681      	mov	r9, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 816c 	beq.w	8007d6a <_dtoa_r+0xb52>
 8007a92:	2300      	movs	r3, #0
 8007a94:	4629      	mov	r1, r5
 8007a96:	220a      	movs	r2, #10
 8007a98:	4658      	mov	r0, fp
 8007a9a:	f000 fae5 	bl	8008068 <__multadd>
 8007a9e:	9b08      	ldr	r3, [sp, #32]
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dc61      	bgt.n	8007b6a <_dtoa_r+0x952>
 8007aa6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	dc3b      	bgt.n	8007b24 <_dtoa_r+0x90c>
 8007aac:	e05d      	b.n	8007b6a <_dtoa_r+0x952>
 8007aae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ab0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ab4:	e746      	b.n	8007944 <_dtoa_r+0x72c>
 8007ab6:	9b07      	ldr	r3, [sp, #28]
 8007ab8:	1e5c      	subs	r4, r3, #1
 8007aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	bfbf      	itttt	lt
 8007ac0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ac2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007ac4:	1ae3      	sublt	r3, r4, r3
 8007ac6:	18d2      	addlt	r2, r2, r3
 8007ac8:	bfa8      	it	ge
 8007aca:	1b1c      	subge	r4, r3, r4
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	bfbe      	ittt	lt
 8007ad0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ad2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007ad4:	2400      	movlt	r4, #0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfb5      	itete	lt
 8007ada:	eba8 0603 	sublt.w	r6, r8, r3
 8007ade:	4646      	movge	r6, r8
 8007ae0:	2300      	movlt	r3, #0
 8007ae2:	9b07      	ldrge	r3, [sp, #28]
 8007ae4:	e730      	b.n	8007948 <_dtoa_r+0x730>
 8007ae6:	4646      	mov	r6, r8
 8007ae8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007aea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007aec:	e735      	b.n	800795a <_dtoa_r+0x742>
 8007aee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007af0:	e75c      	b.n	80079ac <_dtoa_r+0x794>
 8007af2:	2300      	movs	r3, #0
 8007af4:	e788      	b.n	8007a08 <_dtoa_r+0x7f0>
 8007af6:	9b02      	ldr	r3, [sp, #8]
 8007af8:	e786      	b.n	8007a08 <_dtoa_r+0x7f0>
 8007afa:	2300      	movs	r3, #0
 8007afc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007afe:	e788      	b.n	8007a12 <_dtoa_r+0x7fa>
 8007b00:	d09f      	beq.n	8007a42 <_dtoa_r+0x82a>
 8007b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b04:	331c      	adds	r3, #28
 8007b06:	441a      	add	r2, r3
 8007b08:	4498      	add	r8, r3
 8007b0a:	441e      	add	r6, r3
 8007b0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b0e:	e798      	b.n	8007a42 <_dtoa_r+0x82a>
 8007b10:	4603      	mov	r3, r0
 8007b12:	e7f6      	b.n	8007b02 <_dtoa_r+0x8ea>
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	9704      	str	r7, [sp, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dc20      	bgt.n	8007b5e <_dtoa_r+0x946>
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	dd1e      	ble.n	8007b62 <_dtoa_r+0x94a>
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f47f aebc 	bne.w	80078a4 <_dtoa_r+0x68c>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	2205      	movs	r2, #5
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 fa99 	bl	8008068 <__multadd>
 8007b36:	4601      	mov	r1, r0
 8007b38:	4604      	mov	r4, r0
 8007b3a:	4648      	mov	r0, r9
 8007b3c:	f000 fcaa 	bl	8008494 <__mcmp>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f77f aeaf 	ble.w	80078a4 <_dtoa_r+0x68c>
 8007b46:	2331      	movs	r3, #49	@ 0x31
 8007b48:	4656      	mov	r6, sl
 8007b4a:	f806 3b01 	strb.w	r3, [r6], #1
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	3301      	adds	r3, #1
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	e6aa      	b.n	80078ac <_dtoa_r+0x694>
 8007b56:	9c07      	ldr	r4, [sp, #28]
 8007b58:	9704      	str	r7, [sp, #16]
 8007b5a:	4625      	mov	r5, r4
 8007b5c:	e7f3      	b.n	8007b46 <_dtoa_r+0x92e>
 8007b5e:	9b07      	ldr	r3, [sp, #28]
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8104 	beq.w	8007d72 <_dtoa_r+0xb5a>
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	dd05      	ble.n	8007b7a <_dtoa_r+0x962>
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4632      	mov	r2, r6
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 fc22 	bl	80083bc <__lshift>
 8007b78:	4605      	mov	r5, r0
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d05a      	beq.n	8007c36 <_dtoa_r+0xa1e>
 8007b80:	4658      	mov	r0, fp
 8007b82:	6869      	ldr	r1, [r5, #4]
 8007b84:	f000 fa0e 	bl	8007fa4 <_Balloc>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	b928      	cbnz	r0, 8007b98 <_dtoa_r+0x980>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b92:	4b83      	ldr	r3, [pc, #524]	@ (8007da0 <_dtoa_r+0xb88>)
 8007b94:	f7ff bb54 	b.w	8007240 <_dtoa_r+0x28>
 8007b98:	692a      	ldr	r2, [r5, #16]
 8007b9a:	f105 010c 	add.w	r1, r5, #12
 8007b9e:	3202      	adds	r2, #2
 8007ba0:	0092      	lsls	r2, r2, #2
 8007ba2:	300c      	adds	r0, #12
 8007ba4:	f000 ffa8 	bl	8008af8 <memcpy>
 8007ba8:	2201      	movs	r2, #1
 8007baa:	4631      	mov	r1, r6
 8007bac:	4658      	mov	r0, fp
 8007bae:	f000 fc05 	bl	80083bc <__lshift>
 8007bb2:	462f      	mov	r7, r5
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	f10a 0301 	add.w	r3, sl, #1
 8007bba:	9307      	str	r3, [sp, #28]
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	4453      	add	r3, sl
 8007bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bca:	9b07      	ldr	r3, [sp, #28]
 8007bcc:	4621      	mov	r1, r4
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	4648      	mov	r0, r9
 8007bd2:	9302      	str	r3, [sp, #8]
 8007bd4:	f7ff fa95 	bl	8007102 <quorem>
 8007bd8:	4639      	mov	r1, r7
 8007bda:	9008      	str	r0, [sp, #32]
 8007bdc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007be0:	4648      	mov	r0, r9
 8007be2:	f000 fc57 	bl	8008494 <__mcmp>
 8007be6:	462a      	mov	r2, r5
 8007be8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007bea:	4621      	mov	r1, r4
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fc6d 	bl	80084cc <__mdiff>
 8007bf2:	68c2      	ldr	r2, [r0, #12]
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	bb02      	cbnz	r2, 8007c3a <_dtoa_r+0xa22>
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	f000 fc4a 	bl	8008494 <__mcmp>
 8007c00:	4602      	mov	r2, r0
 8007c02:	4631      	mov	r1, r6
 8007c04:	4658      	mov	r0, fp
 8007c06:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c08:	f000 fa0c 	bl	8008024 <_Bfree>
 8007c0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c10:	9e07      	ldr	r6, [sp, #28]
 8007c12:	ea43 0102 	orr.w	r1, r3, r2
 8007c16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c18:	4319      	orrs	r1, r3
 8007c1a:	d110      	bne.n	8007c3e <_dtoa_r+0xa26>
 8007c1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c20:	d029      	beq.n	8007c76 <_dtoa_r+0xa5e>
 8007c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dd02      	ble.n	8007c2e <_dtoa_r+0xa16>
 8007c28:	9b08      	ldr	r3, [sp, #32]
 8007c2a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c2e:	9b02      	ldr	r3, [sp, #8]
 8007c30:	f883 8000 	strb.w	r8, [r3]
 8007c34:	e63b      	b.n	80078ae <_dtoa_r+0x696>
 8007c36:	4628      	mov	r0, r5
 8007c38:	e7bb      	b.n	8007bb2 <_dtoa_r+0x99a>
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	e7e1      	b.n	8007c02 <_dtoa_r+0x9ea>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db04      	blt.n	8007c4e <_dtoa_r+0xa36>
 8007c44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007c46:	430b      	orrs	r3, r1
 8007c48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	d120      	bne.n	8007c90 <_dtoa_r+0xa78>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dded      	ble.n	8007c2e <_dtoa_r+0xa16>
 8007c52:	4649      	mov	r1, r9
 8007c54:	2201      	movs	r2, #1
 8007c56:	4658      	mov	r0, fp
 8007c58:	f000 fbb0 	bl	80083bc <__lshift>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4681      	mov	r9, r0
 8007c60:	f000 fc18 	bl	8008494 <__mcmp>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	dc03      	bgt.n	8007c70 <_dtoa_r+0xa58>
 8007c68:	d1e1      	bne.n	8007c2e <_dtoa_r+0xa16>
 8007c6a:	f018 0f01 	tst.w	r8, #1
 8007c6e:	d0de      	beq.n	8007c2e <_dtoa_r+0xa16>
 8007c70:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c74:	d1d8      	bne.n	8007c28 <_dtoa_r+0xa10>
 8007c76:	2339      	movs	r3, #57	@ 0x39
 8007c78:	9a02      	ldr	r2, [sp, #8]
 8007c7a:	7013      	strb	r3, [r2, #0]
 8007c7c:	4633      	mov	r3, r6
 8007c7e:	461e      	mov	r6, r3
 8007c80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	2a39      	cmp	r2, #57	@ 0x39
 8007c88:	d052      	beq.n	8007d30 <_dtoa_r+0xb18>
 8007c8a:	3201      	adds	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	e60e      	b.n	80078ae <_dtoa_r+0x696>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dd07      	ble.n	8007ca4 <_dtoa_r+0xa8c>
 8007c94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c98:	d0ed      	beq.n	8007c76 <_dtoa_r+0xa5e>
 8007c9a:	9a02      	ldr	r2, [sp, #8]
 8007c9c:	f108 0301 	add.w	r3, r8, #1
 8007ca0:	7013      	strb	r3, [r2, #0]
 8007ca2:	e604      	b.n	80078ae <_dtoa_r+0x696>
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	9a07      	ldr	r2, [sp, #28]
 8007ca8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d028      	beq.n	8007d04 <_dtoa_r+0xaec>
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	4658      	mov	r0, fp
 8007cba:	f000 f9d5 	bl	8008068 <__multadd>
 8007cbe:	42af      	cmp	r7, r5
 8007cc0:	4681      	mov	r9, r0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	f04f 020a 	mov.w	r2, #10
 8007cca:	4639      	mov	r1, r7
 8007ccc:	4658      	mov	r0, fp
 8007cce:	d107      	bne.n	8007ce0 <_dtoa_r+0xac8>
 8007cd0:	f000 f9ca 	bl	8008068 <__multadd>
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	9b07      	ldr	r3, [sp, #28]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	9307      	str	r3, [sp, #28]
 8007cde:	e774      	b.n	8007bca <_dtoa_r+0x9b2>
 8007ce0:	f000 f9c2 	bl	8008068 <__multadd>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	220a      	movs	r2, #10
 8007cec:	4658      	mov	r0, fp
 8007cee:	f000 f9bb 	bl	8008068 <__multadd>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	e7f0      	b.n	8007cd8 <_dtoa_r+0xac0>
 8007cf6:	9b08      	ldr	r3, [sp, #32]
 8007cf8:	2700      	movs	r7, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bfcc      	ite	gt
 8007cfe:	461e      	movgt	r6, r3
 8007d00:	2601      	movle	r6, #1
 8007d02:	4456      	add	r6, sl
 8007d04:	4649      	mov	r1, r9
 8007d06:	2201      	movs	r2, #1
 8007d08:	4658      	mov	r0, fp
 8007d0a:	f000 fb57 	bl	80083bc <__lshift>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4681      	mov	r9, r0
 8007d12:	f000 fbbf 	bl	8008494 <__mcmp>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	dcb0      	bgt.n	8007c7c <_dtoa_r+0xa64>
 8007d1a:	d102      	bne.n	8007d22 <_dtoa_r+0xb0a>
 8007d1c:	f018 0f01 	tst.w	r8, #1
 8007d20:	d1ac      	bne.n	8007c7c <_dtoa_r+0xa64>
 8007d22:	4633      	mov	r3, r6
 8007d24:	461e      	mov	r6, r3
 8007d26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d2a:	2a30      	cmp	r2, #48	@ 0x30
 8007d2c:	d0fa      	beq.n	8007d24 <_dtoa_r+0xb0c>
 8007d2e:	e5be      	b.n	80078ae <_dtoa_r+0x696>
 8007d30:	459a      	cmp	sl, r3
 8007d32:	d1a4      	bne.n	8007c7e <_dtoa_r+0xa66>
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	3301      	adds	r3, #1
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	2331      	movs	r3, #49	@ 0x31
 8007d3c:	f88a 3000 	strb.w	r3, [sl]
 8007d40:	e5b5      	b.n	80078ae <_dtoa_r+0x696>
 8007d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d44:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007da4 <_dtoa_r+0xb8c>
 8007d48:	b11b      	cbz	r3, 8007d52 <_dtoa_r+0xb3a>
 8007d4a:	f10a 0308 	add.w	r3, sl, #8
 8007d4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	4650      	mov	r0, sl
 8007d54:	b017      	add	sp, #92	@ 0x5c
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	f77f ae3d 	ble.w	80079dc <_dtoa_r+0x7c4>
 8007d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d64:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d66:	2001      	movs	r0, #1
 8007d68:	e65b      	b.n	8007a22 <_dtoa_r+0x80a>
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f77f aed6 	ble.w	8007b1e <_dtoa_r+0x906>
 8007d72:	4656      	mov	r6, sl
 8007d74:	4621      	mov	r1, r4
 8007d76:	4648      	mov	r0, r9
 8007d78:	f7ff f9c3 	bl	8007102 <quorem>
 8007d7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	f806 8b01 	strb.w	r8, [r6], #1
 8007d86:	eba6 020a 	sub.w	r2, r6, sl
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	ddb3      	ble.n	8007cf6 <_dtoa_r+0xade>
 8007d8e:	4649      	mov	r1, r9
 8007d90:	2300      	movs	r3, #0
 8007d92:	220a      	movs	r2, #10
 8007d94:	4658      	mov	r0, fp
 8007d96:	f000 f967 	bl	8008068 <__multadd>
 8007d9a:	4681      	mov	r9, r0
 8007d9c:	e7ea      	b.n	8007d74 <_dtoa_r+0xb5c>
 8007d9e:	bf00      	nop
 8007da0:	08009389 	.word	0x08009389
 8007da4:	0800930d 	.word	0x0800930d

08007da8 <_free_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4605      	mov	r5, r0
 8007dac:	2900      	cmp	r1, #0
 8007dae:	d040      	beq.n	8007e32 <_free_r+0x8a>
 8007db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db4:	1f0c      	subs	r4, r1, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bfb8      	it	lt
 8007dba:	18e4      	addlt	r4, r4, r3
 8007dbc:	f000 f8e6 	bl	8007f8c <__malloc_lock>
 8007dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e34 <_free_r+0x8c>)
 8007dc2:	6813      	ldr	r3, [r2, #0]
 8007dc4:	b933      	cbnz	r3, 8007dd4 <_free_r+0x2c>
 8007dc6:	6063      	str	r3, [r4, #4]
 8007dc8:	6014      	str	r4, [r2, #0]
 8007dca:	4628      	mov	r0, r5
 8007dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd0:	f000 b8e2 	b.w	8007f98 <__malloc_unlock>
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d908      	bls.n	8007dea <_free_r+0x42>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	1821      	adds	r1, r4, r0
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	bf01      	itttt	eq
 8007de0:	6819      	ldreq	r1, [r3, #0]
 8007de2:	685b      	ldreq	r3, [r3, #4]
 8007de4:	1809      	addeq	r1, r1, r0
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	e7ed      	b.n	8007dc6 <_free_r+0x1e>
 8007dea:	461a      	mov	r2, r3
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	b10b      	cbz	r3, 8007df4 <_free_r+0x4c>
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	d9fa      	bls.n	8007dea <_free_r+0x42>
 8007df4:	6811      	ldr	r1, [r2, #0]
 8007df6:	1850      	adds	r0, r2, r1
 8007df8:	42a0      	cmp	r0, r4
 8007dfa:	d10b      	bne.n	8007e14 <_free_r+0x6c>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	4401      	add	r1, r0
 8007e00:	1850      	adds	r0, r2, r1
 8007e02:	4283      	cmp	r3, r0
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	d1e0      	bne.n	8007dca <_free_r+0x22>
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4408      	add	r0, r1
 8007e0e:	6010      	str	r0, [r2, #0]
 8007e10:	6053      	str	r3, [r2, #4]
 8007e12:	e7da      	b.n	8007dca <_free_r+0x22>
 8007e14:	d902      	bls.n	8007e1c <_free_r+0x74>
 8007e16:	230c      	movs	r3, #12
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	e7d6      	b.n	8007dca <_free_r+0x22>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	1821      	adds	r1, r4, r0
 8007e20:	428b      	cmp	r3, r1
 8007e22:	bf01      	itttt	eq
 8007e24:	6819      	ldreq	r1, [r3, #0]
 8007e26:	685b      	ldreq	r3, [r3, #4]
 8007e28:	1809      	addeq	r1, r1, r0
 8007e2a:	6021      	streq	r1, [r4, #0]
 8007e2c:	6063      	str	r3, [r4, #4]
 8007e2e:	6054      	str	r4, [r2, #4]
 8007e30:	e7cb      	b.n	8007dca <_free_r+0x22>
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	200005f4 	.word	0x200005f4

08007e38 <malloc>:
 8007e38:	4b02      	ldr	r3, [pc, #8]	@ (8007e44 <malloc+0xc>)
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	f000 b825 	b.w	8007e8c <_malloc_r>
 8007e42:	bf00      	nop
 8007e44:	2000001c 	.word	0x2000001c

08007e48 <sbrk_aligned>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8007e88 <sbrk_aligned+0x40>)
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	6831      	ldr	r1, [r6, #0]
 8007e50:	4605      	mov	r5, r0
 8007e52:	b911      	cbnz	r1, 8007e5a <sbrk_aligned+0x12>
 8007e54:	f000 fe40 	bl	8008ad8 <_sbrk_r>
 8007e58:	6030      	str	r0, [r6, #0]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 fe3b 	bl	8008ad8 <_sbrk_r>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d103      	bne.n	8007e6e <sbrk_aligned+0x26>
 8007e66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
 8007e6e:	1cc4      	adds	r4, r0, #3
 8007e70:	f024 0403 	bic.w	r4, r4, #3
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d0f8      	beq.n	8007e6a <sbrk_aligned+0x22>
 8007e78:	1a21      	subs	r1, r4, r0
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f000 fe2c 	bl	8008ad8 <_sbrk_r>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d1f2      	bne.n	8007e6a <sbrk_aligned+0x22>
 8007e84:	e7ef      	b.n	8007e66 <sbrk_aligned+0x1e>
 8007e86:	bf00      	nop
 8007e88:	200005f0 	.word	0x200005f0

08007e8c <_malloc_r>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	1ccd      	adds	r5, r1, #3
 8007e92:	f025 0503 	bic.w	r5, r5, #3
 8007e96:	3508      	adds	r5, #8
 8007e98:	2d0c      	cmp	r5, #12
 8007e9a:	bf38      	it	cc
 8007e9c:	250c      	movcc	r5, #12
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	db01      	blt.n	8007ea8 <_malloc_r+0x1c>
 8007ea4:	42a9      	cmp	r1, r5
 8007ea6:	d904      	bls.n	8007eb2 <_malloc_r+0x26>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	6033      	str	r3, [r6, #0]
 8007eac:	2000      	movs	r0, #0
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f88 <_malloc_r+0xfc>
 8007eb6:	f000 f869 	bl	8007f8c <__malloc_lock>
 8007eba:	f8d8 3000 	ldr.w	r3, [r8]
 8007ebe:	461c      	mov	r4, r3
 8007ec0:	bb44      	cbnz	r4, 8007f14 <_malloc_r+0x88>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff ffbf 	bl	8007e48 <sbrk_aligned>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	4604      	mov	r4, r0
 8007ece:	d158      	bne.n	8007f82 <_malloc_r+0xf6>
 8007ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed4:	4627      	mov	r7, r4
 8007ed6:	2f00      	cmp	r7, #0
 8007ed8:	d143      	bne.n	8007f62 <_malloc_r+0xd6>
 8007eda:	2c00      	cmp	r4, #0
 8007edc:	d04b      	beq.n	8007f76 <_malloc_r+0xea>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	eb04 0903 	add.w	r9, r4, r3
 8007ee8:	f000 fdf6 	bl	8008ad8 <_sbrk_r>
 8007eec:	4581      	cmp	r9, r0
 8007eee:	d142      	bne.n	8007f76 <_malloc_r+0xea>
 8007ef0:	6821      	ldr	r1, [r4, #0]
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	1a6d      	subs	r5, r5, r1
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f7ff ffa6 	bl	8007e48 <sbrk_aligned>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d03a      	beq.n	8007f76 <_malloc_r+0xea>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	442b      	add	r3, r5
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	bb62      	cbnz	r2, 8007f68 <_malloc_r+0xdc>
 8007f0e:	f8c8 7000 	str.w	r7, [r8]
 8007f12:	e00f      	b.n	8007f34 <_malloc_r+0xa8>
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	1b52      	subs	r2, r2, r5
 8007f18:	d420      	bmi.n	8007f5c <_malloc_r+0xd0>
 8007f1a:	2a0b      	cmp	r2, #11
 8007f1c:	d917      	bls.n	8007f4e <_malloc_r+0xc2>
 8007f1e:	1961      	adds	r1, r4, r5
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	6025      	str	r5, [r4, #0]
 8007f24:	bf18      	it	ne
 8007f26:	6059      	strne	r1, [r3, #4]
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	bf08      	it	eq
 8007f2c:	f8c8 1000 	streq.w	r1, [r8]
 8007f30:	5162      	str	r2, [r4, r5]
 8007f32:	604b      	str	r3, [r1, #4]
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 f82f 	bl	8007f98 <__malloc_unlock>
 8007f3a:	f104 000b 	add.w	r0, r4, #11
 8007f3e:	1d23      	adds	r3, r4, #4
 8007f40:	f020 0007 	bic.w	r0, r0, #7
 8007f44:	1ac2      	subs	r2, r0, r3
 8007f46:	bf1c      	itt	ne
 8007f48:	1a1b      	subne	r3, r3, r0
 8007f4a:	50a3      	strne	r3, [r4, r2]
 8007f4c:	e7af      	b.n	8007eae <_malloc_r+0x22>
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	bf0c      	ite	eq
 8007f54:	f8c8 2000 	streq.w	r2, [r8]
 8007f58:	605a      	strne	r2, [r3, #4]
 8007f5a:	e7eb      	b.n	8007f34 <_malloc_r+0xa8>
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	6864      	ldr	r4, [r4, #4]
 8007f60:	e7ae      	b.n	8007ec0 <_malloc_r+0x34>
 8007f62:	463c      	mov	r4, r7
 8007f64:	687f      	ldr	r7, [r7, #4]
 8007f66:	e7b6      	b.n	8007ed6 <_malloc_r+0x4a>
 8007f68:	461a      	mov	r2, r3
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	d1fb      	bne.n	8007f68 <_malloc_r+0xdc>
 8007f70:	2300      	movs	r3, #0
 8007f72:	6053      	str	r3, [r2, #4]
 8007f74:	e7de      	b.n	8007f34 <_malloc_r+0xa8>
 8007f76:	230c      	movs	r3, #12
 8007f78:	4630      	mov	r0, r6
 8007f7a:	6033      	str	r3, [r6, #0]
 8007f7c:	f000 f80c 	bl	8007f98 <__malloc_unlock>
 8007f80:	e794      	b.n	8007eac <_malloc_r+0x20>
 8007f82:	6005      	str	r5, [r0, #0]
 8007f84:	e7d6      	b.n	8007f34 <_malloc_r+0xa8>
 8007f86:	bf00      	nop
 8007f88:	200005f4 	.word	0x200005f4

08007f8c <__malloc_lock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	@ (8007f94 <__malloc_lock+0x8>)
 8007f8e:	f7ff b8a8 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	200005ec 	.word	0x200005ec

08007f98 <__malloc_unlock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	@ (8007fa0 <__malloc_unlock+0x8>)
 8007f9a:	f7ff b8a3 	b.w	80070e4 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	200005ec 	.word	0x200005ec

08007fa4 <_Balloc>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	69c6      	ldr	r6, [r0, #28]
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	b976      	cbnz	r6, 8007fcc <_Balloc+0x28>
 8007fae:	2010      	movs	r0, #16
 8007fb0:	f7ff ff42 	bl	8007e38 <malloc>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	61e0      	str	r0, [r4, #28]
 8007fb8:	b920      	cbnz	r0, 8007fc4 <_Balloc+0x20>
 8007fba:	216b      	movs	r1, #107	@ 0x6b
 8007fbc:	4b17      	ldr	r3, [pc, #92]	@ (800801c <_Balloc+0x78>)
 8007fbe:	4818      	ldr	r0, [pc, #96]	@ (8008020 <_Balloc+0x7c>)
 8007fc0:	f000 fda8 	bl	8008b14 <__assert_func>
 8007fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc8:	6006      	str	r6, [r0, #0]
 8007fca:	60c6      	str	r6, [r0, #12]
 8007fcc:	69e6      	ldr	r6, [r4, #28]
 8007fce:	68f3      	ldr	r3, [r6, #12]
 8007fd0:	b183      	cbz	r3, 8007ff4 <_Balloc+0x50>
 8007fd2:	69e3      	ldr	r3, [r4, #28]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fda:	b9b8      	cbnz	r0, 800800c <_Balloc+0x68>
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f605 	lsl.w	r6, r1, r5
 8007fe2:	1d72      	adds	r2, r6, #5
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	0092      	lsls	r2, r2, #2
 8007fe8:	f000 fdb2 	bl	8008b50 <_calloc_r>
 8007fec:	b160      	cbz	r0, 8008008 <_Balloc+0x64>
 8007fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ff2:	e00e      	b.n	8008012 <_Balloc+0x6e>
 8007ff4:	2221      	movs	r2, #33	@ 0x21
 8007ff6:	2104      	movs	r1, #4
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fda9 	bl	8008b50 <_calloc_r>
 8007ffe:	69e3      	ldr	r3, [r4, #28]
 8008000:	60f0      	str	r0, [r6, #12]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e4      	bne.n	8007fd2 <_Balloc+0x2e>
 8008008:	2000      	movs	r0, #0
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	6802      	ldr	r2, [r0, #0]
 800800e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008012:	2300      	movs	r3, #0
 8008014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008018:	e7f7      	b.n	800800a <_Balloc+0x66>
 800801a:	bf00      	nop
 800801c:	0800931a 	.word	0x0800931a
 8008020:	0800939a 	.word	0x0800939a

08008024 <_Bfree>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	69c6      	ldr	r6, [r0, #28]
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b976      	cbnz	r6, 800804c <_Bfree+0x28>
 800802e:	2010      	movs	r0, #16
 8008030:	f7ff ff02 	bl	8007e38 <malloc>
 8008034:	4602      	mov	r2, r0
 8008036:	61e8      	str	r0, [r5, #28]
 8008038:	b920      	cbnz	r0, 8008044 <_Bfree+0x20>
 800803a:	218f      	movs	r1, #143	@ 0x8f
 800803c:	4b08      	ldr	r3, [pc, #32]	@ (8008060 <_Bfree+0x3c>)
 800803e:	4809      	ldr	r0, [pc, #36]	@ (8008064 <_Bfree+0x40>)
 8008040:	f000 fd68 	bl	8008b14 <__assert_func>
 8008044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008048:	6006      	str	r6, [r0, #0]
 800804a:	60c6      	str	r6, [r0, #12]
 800804c:	b13c      	cbz	r4, 800805e <_Bfree+0x3a>
 800804e:	69eb      	ldr	r3, [r5, #28]
 8008050:	6862      	ldr	r2, [r4, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008058:	6021      	str	r1, [r4, #0]
 800805a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	0800931a 	.word	0x0800931a
 8008064:	0800939a 	.word	0x0800939a

08008068 <__multadd>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	4607      	mov	r7, r0
 800806e:	460c      	mov	r4, r1
 8008070:	461e      	mov	r6, r3
 8008072:	2000      	movs	r0, #0
 8008074:	690d      	ldr	r5, [r1, #16]
 8008076:	f101 0c14 	add.w	ip, r1, #20
 800807a:	f8dc 3000 	ldr.w	r3, [ip]
 800807e:	3001      	adds	r0, #1
 8008080:	b299      	uxth	r1, r3
 8008082:	fb02 6101 	mla	r1, r2, r1, r6
 8008086:	0c1e      	lsrs	r6, r3, #16
 8008088:	0c0b      	lsrs	r3, r1, #16
 800808a:	fb02 3306 	mla	r3, r2, r6, r3
 800808e:	b289      	uxth	r1, r1
 8008090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008094:	4285      	cmp	r5, r0
 8008096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800809a:	f84c 1b04 	str.w	r1, [ip], #4
 800809e:	dcec      	bgt.n	800807a <__multadd+0x12>
 80080a0:	b30e      	cbz	r6, 80080e6 <__multadd+0x7e>
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc19      	bgt.n	80080dc <__multadd+0x74>
 80080a8:	6861      	ldr	r1, [r4, #4]
 80080aa:	4638      	mov	r0, r7
 80080ac:	3101      	adds	r1, #1
 80080ae:	f7ff ff79 	bl	8007fa4 <_Balloc>
 80080b2:	4680      	mov	r8, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <__multadd+0x5a>
 80080b6:	4602      	mov	r2, r0
 80080b8:	21ba      	movs	r1, #186	@ 0xba
 80080ba:	4b0c      	ldr	r3, [pc, #48]	@ (80080ec <__multadd+0x84>)
 80080bc:	480c      	ldr	r0, [pc, #48]	@ (80080f0 <__multadd+0x88>)
 80080be:	f000 fd29 	bl	8008b14 <__assert_func>
 80080c2:	6922      	ldr	r2, [r4, #16]
 80080c4:	f104 010c 	add.w	r1, r4, #12
 80080c8:	3202      	adds	r2, #2
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	300c      	adds	r0, #12
 80080ce:	f000 fd13 	bl	8008af8 <memcpy>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff ffa5 	bl	8008024 <_Bfree>
 80080da:	4644      	mov	r4, r8
 80080dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e0:	3501      	adds	r5, #1
 80080e2:	615e      	str	r6, [r3, #20]
 80080e4:	6125      	str	r5, [r4, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	08009389 	.word	0x08009389
 80080f0:	0800939a 	.word	0x0800939a

080080f4 <__hi0bits>:
 80080f4:	4603      	mov	r3, r0
 80080f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080fa:	bf3a      	itte	cc
 80080fc:	0403      	lslcc	r3, r0, #16
 80080fe:	2010      	movcc	r0, #16
 8008100:	2000      	movcs	r0, #0
 8008102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008106:	bf3c      	itt	cc
 8008108:	021b      	lslcc	r3, r3, #8
 800810a:	3008      	addcc	r0, #8
 800810c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008110:	bf3c      	itt	cc
 8008112:	011b      	lslcc	r3, r3, #4
 8008114:	3004      	addcc	r0, #4
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811a:	bf3c      	itt	cc
 800811c:	009b      	lslcc	r3, r3, #2
 800811e:	3002      	addcc	r0, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	db05      	blt.n	8008130 <__hi0bits+0x3c>
 8008124:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008128:	f100 0001 	add.w	r0, r0, #1
 800812c:	bf08      	it	eq
 800812e:	2020      	moveq	r0, #32
 8008130:	4770      	bx	lr

08008132 <__lo0bits>:
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	4602      	mov	r2, r0
 8008136:	f013 0007 	ands.w	r0, r3, #7
 800813a:	d00b      	beq.n	8008154 <__lo0bits+0x22>
 800813c:	07d9      	lsls	r1, r3, #31
 800813e:	d421      	bmi.n	8008184 <__lo0bits+0x52>
 8008140:	0798      	lsls	r0, r3, #30
 8008142:	bf49      	itett	mi
 8008144:	085b      	lsrmi	r3, r3, #1
 8008146:	089b      	lsrpl	r3, r3, #2
 8008148:	2001      	movmi	r0, #1
 800814a:	6013      	strmi	r3, [r2, #0]
 800814c:	bf5c      	itt	pl
 800814e:	2002      	movpl	r0, #2
 8008150:	6013      	strpl	r3, [r2, #0]
 8008152:	4770      	bx	lr
 8008154:	b299      	uxth	r1, r3
 8008156:	b909      	cbnz	r1, 800815c <__lo0bits+0x2a>
 8008158:	2010      	movs	r0, #16
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	b2d9      	uxtb	r1, r3
 800815e:	b909      	cbnz	r1, 8008164 <__lo0bits+0x32>
 8008160:	3008      	adds	r0, #8
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	0719      	lsls	r1, r3, #28
 8008166:	bf04      	itt	eq
 8008168:	091b      	lsreq	r3, r3, #4
 800816a:	3004      	addeq	r0, #4
 800816c:	0799      	lsls	r1, r3, #30
 800816e:	bf04      	itt	eq
 8008170:	089b      	lsreq	r3, r3, #2
 8008172:	3002      	addeq	r0, #2
 8008174:	07d9      	lsls	r1, r3, #31
 8008176:	d403      	bmi.n	8008180 <__lo0bits+0x4e>
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	f100 0001 	add.w	r0, r0, #1
 800817e:	d003      	beq.n	8008188 <__lo0bits+0x56>
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	4770      	bx	lr
 8008184:	2000      	movs	r0, #0
 8008186:	4770      	bx	lr
 8008188:	2020      	movs	r0, #32
 800818a:	4770      	bx	lr

0800818c <__i2b>:
 800818c:	b510      	push	{r4, lr}
 800818e:	460c      	mov	r4, r1
 8008190:	2101      	movs	r1, #1
 8008192:	f7ff ff07 	bl	8007fa4 <_Balloc>
 8008196:	4602      	mov	r2, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__i2b+0x1a>
 800819a:	f240 1145 	movw	r1, #325	@ 0x145
 800819e:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <__i2b+0x24>)
 80081a0:	4804      	ldr	r0, [pc, #16]	@ (80081b4 <__i2b+0x28>)
 80081a2:	f000 fcb7 	bl	8008b14 <__assert_func>
 80081a6:	2301      	movs	r3, #1
 80081a8:	6144      	str	r4, [r0, #20]
 80081aa:	6103      	str	r3, [r0, #16]
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	08009389 	.word	0x08009389
 80081b4:	0800939a 	.word	0x0800939a

080081b8 <__multiply>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	4614      	mov	r4, r2
 80081be:	690a      	ldr	r2, [r1, #16]
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	460f      	mov	r7, r1
 80081c4:	429a      	cmp	r2, r3
 80081c6:	bfa2      	ittt	ge
 80081c8:	4623      	movge	r3, r4
 80081ca:	460c      	movge	r4, r1
 80081cc:	461f      	movge	r7, r3
 80081ce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081d2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081d6:	68a3      	ldr	r3, [r4, #8]
 80081d8:	6861      	ldr	r1, [r4, #4]
 80081da:	eb0a 0609 	add.w	r6, sl, r9
 80081de:	42b3      	cmp	r3, r6
 80081e0:	b085      	sub	sp, #20
 80081e2:	bfb8      	it	lt
 80081e4:	3101      	addlt	r1, #1
 80081e6:	f7ff fedd 	bl	8007fa4 <_Balloc>
 80081ea:	b930      	cbnz	r0, 80081fa <__multiply+0x42>
 80081ec:	4602      	mov	r2, r0
 80081ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081f2:	4b43      	ldr	r3, [pc, #268]	@ (8008300 <__multiply+0x148>)
 80081f4:	4843      	ldr	r0, [pc, #268]	@ (8008304 <__multiply+0x14c>)
 80081f6:	f000 fc8d 	bl	8008b14 <__assert_func>
 80081fa:	f100 0514 	add.w	r5, r0, #20
 80081fe:	462b      	mov	r3, r5
 8008200:	2200      	movs	r2, #0
 8008202:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008206:	4543      	cmp	r3, r8
 8008208:	d321      	bcc.n	800824e <__multiply+0x96>
 800820a:	f107 0114 	add.w	r1, r7, #20
 800820e:	f104 0214 	add.w	r2, r4, #20
 8008212:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008216:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	1b13      	subs	r3, r2, r4
 800821e:	3b15      	subs	r3, #21
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	3304      	adds	r3, #4
 8008226:	f104 0715 	add.w	r7, r4, #21
 800822a:	42ba      	cmp	r2, r7
 800822c:	bf38      	it	cc
 800822e:	2304      	movcc	r3, #4
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	9b02      	ldr	r3, [sp, #8]
 8008234:	9103      	str	r1, [sp, #12]
 8008236:	428b      	cmp	r3, r1
 8008238:	d80c      	bhi.n	8008254 <__multiply+0x9c>
 800823a:	2e00      	cmp	r6, #0
 800823c:	dd03      	ble.n	8008246 <__multiply+0x8e>
 800823e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008242:	2b00      	cmp	r3, #0
 8008244:	d05a      	beq.n	80082fc <__multiply+0x144>
 8008246:	6106      	str	r6, [r0, #16]
 8008248:	b005      	add	sp, #20
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	f843 2b04 	str.w	r2, [r3], #4
 8008252:	e7d8      	b.n	8008206 <__multiply+0x4e>
 8008254:	f8b1 a000 	ldrh.w	sl, [r1]
 8008258:	f1ba 0f00 	cmp.w	sl, #0
 800825c:	d023      	beq.n	80082a6 <__multiply+0xee>
 800825e:	46a9      	mov	r9, r5
 8008260:	f04f 0c00 	mov.w	ip, #0
 8008264:	f104 0e14 	add.w	lr, r4, #20
 8008268:	f85e 7b04 	ldr.w	r7, [lr], #4
 800826c:	f8d9 3000 	ldr.w	r3, [r9]
 8008270:	fa1f fb87 	uxth.w	fp, r7
 8008274:	b29b      	uxth	r3, r3
 8008276:	fb0a 330b 	mla	r3, sl, fp, r3
 800827a:	4463      	add	r3, ip
 800827c:	f8d9 c000 	ldr.w	ip, [r9]
 8008280:	0c3f      	lsrs	r7, r7, #16
 8008282:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008286:	fb0a c707 	mla	r7, sl, r7, ip
 800828a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008294:	4572      	cmp	r2, lr
 8008296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800829a:	f849 3b04 	str.w	r3, [r9], #4
 800829e:	d8e3      	bhi.n	8008268 <__multiply+0xb0>
 80082a0:	9b01      	ldr	r3, [sp, #4]
 80082a2:	f845 c003 	str.w	ip, [r5, r3]
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	3104      	adds	r1, #4
 80082aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ae:	f1b9 0f00 	cmp.w	r9, #0
 80082b2:	d021      	beq.n	80082f8 <__multiply+0x140>
 80082b4:	46ae      	mov	lr, r5
 80082b6:	f04f 0a00 	mov.w	sl, #0
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	f104 0c14 	add.w	ip, r4, #20
 80082c0:	f8bc b000 	ldrh.w	fp, [ip]
 80082c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	fb09 770b 	mla	r7, r9, fp, r7
 80082ce:	4457      	add	r7, sl
 80082d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082d4:	f84e 3b04 	str.w	r3, [lr], #4
 80082d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082e0:	f8be 3000 	ldrh.w	r3, [lr]
 80082e4:	4562      	cmp	r2, ip
 80082e6:	fb09 330a 	mla	r3, r9, sl, r3
 80082ea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082f2:	d8e5      	bhi.n	80082c0 <__multiply+0x108>
 80082f4:	9f01      	ldr	r7, [sp, #4]
 80082f6:	51eb      	str	r3, [r5, r7]
 80082f8:	3504      	adds	r5, #4
 80082fa:	e79a      	b.n	8008232 <__multiply+0x7a>
 80082fc:	3e01      	subs	r6, #1
 80082fe:	e79c      	b.n	800823a <__multiply+0x82>
 8008300:	08009389 	.word	0x08009389
 8008304:	0800939a 	.word	0x0800939a

08008308 <__pow5mult>:
 8008308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800830c:	4615      	mov	r5, r2
 800830e:	f012 0203 	ands.w	r2, r2, #3
 8008312:	4607      	mov	r7, r0
 8008314:	460e      	mov	r6, r1
 8008316:	d007      	beq.n	8008328 <__pow5mult+0x20>
 8008318:	4c25      	ldr	r4, [pc, #148]	@ (80083b0 <__pow5mult+0xa8>)
 800831a:	3a01      	subs	r2, #1
 800831c:	2300      	movs	r3, #0
 800831e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008322:	f7ff fea1 	bl	8008068 <__multadd>
 8008326:	4606      	mov	r6, r0
 8008328:	10ad      	asrs	r5, r5, #2
 800832a:	d03d      	beq.n	80083a8 <__pow5mult+0xa0>
 800832c:	69fc      	ldr	r4, [r7, #28]
 800832e:	b97c      	cbnz	r4, 8008350 <__pow5mult+0x48>
 8008330:	2010      	movs	r0, #16
 8008332:	f7ff fd81 	bl	8007e38 <malloc>
 8008336:	4602      	mov	r2, r0
 8008338:	61f8      	str	r0, [r7, #28]
 800833a:	b928      	cbnz	r0, 8008348 <__pow5mult+0x40>
 800833c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008340:	4b1c      	ldr	r3, [pc, #112]	@ (80083b4 <__pow5mult+0xac>)
 8008342:	481d      	ldr	r0, [pc, #116]	@ (80083b8 <__pow5mult+0xb0>)
 8008344:	f000 fbe6 	bl	8008b14 <__assert_func>
 8008348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800834c:	6004      	str	r4, [r0, #0]
 800834e:	60c4      	str	r4, [r0, #12]
 8008350:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008358:	b94c      	cbnz	r4, 800836e <__pow5mult+0x66>
 800835a:	f240 2171 	movw	r1, #625	@ 0x271
 800835e:	4638      	mov	r0, r7
 8008360:	f7ff ff14 	bl	800818c <__i2b>
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	f8c8 0008 	str.w	r0, [r8, #8]
 800836c:	6003      	str	r3, [r0, #0]
 800836e:	f04f 0900 	mov.w	r9, #0
 8008372:	07eb      	lsls	r3, r5, #31
 8008374:	d50a      	bpl.n	800838c <__pow5mult+0x84>
 8008376:	4631      	mov	r1, r6
 8008378:	4622      	mov	r2, r4
 800837a:	4638      	mov	r0, r7
 800837c:	f7ff ff1c 	bl	80081b8 <__multiply>
 8008380:	4680      	mov	r8, r0
 8008382:	4631      	mov	r1, r6
 8008384:	4638      	mov	r0, r7
 8008386:	f7ff fe4d 	bl	8008024 <_Bfree>
 800838a:	4646      	mov	r6, r8
 800838c:	106d      	asrs	r5, r5, #1
 800838e:	d00b      	beq.n	80083a8 <__pow5mult+0xa0>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	b938      	cbnz	r0, 80083a4 <__pow5mult+0x9c>
 8008394:	4622      	mov	r2, r4
 8008396:	4621      	mov	r1, r4
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ff0d 	bl	80081b8 <__multiply>
 800839e:	6020      	str	r0, [r4, #0]
 80083a0:	f8c0 9000 	str.w	r9, [r0]
 80083a4:	4604      	mov	r4, r0
 80083a6:	e7e4      	b.n	8008372 <__pow5mult+0x6a>
 80083a8:	4630      	mov	r0, r6
 80083aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ae:	bf00      	nop
 80083b0:	080093f4 	.word	0x080093f4
 80083b4:	0800931a 	.word	0x0800931a
 80083b8:	0800939a 	.word	0x0800939a

080083bc <__lshift>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	4607      	mov	r7, r0
 80083c4:	4691      	mov	r9, r2
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	6849      	ldr	r1, [r1, #4]
 80083ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083d4:	f108 0601 	add.w	r6, r8, #1
 80083d8:	42b3      	cmp	r3, r6
 80083da:	db0b      	blt.n	80083f4 <__lshift+0x38>
 80083dc:	4638      	mov	r0, r7
 80083de:	f7ff fde1 	bl	8007fa4 <_Balloc>
 80083e2:	4605      	mov	r5, r0
 80083e4:	b948      	cbnz	r0, 80083fa <__lshift+0x3e>
 80083e6:	4602      	mov	r2, r0
 80083e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083ec:	4b27      	ldr	r3, [pc, #156]	@ (800848c <__lshift+0xd0>)
 80083ee:	4828      	ldr	r0, [pc, #160]	@ (8008490 <__lshift+0xd4>)
 80083f0:	f000 fb90 	bl	8008b14 <__assert_func>
 80083f4:	3101      	adds	r1, #1
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	e7ee      	b.n	80083d8 <__lshift+0x1c>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f100 0114 	add.w	r1, r0, #20
 8008400:	f100 0210 	add.w	r2, r0, #16
 8008404:	4618      	mov	r0, r3
 8008406:	4553      	cmp	r3, sl
 8008408:	db33      	blt.n	8008472 <__lshift+0xb6>
 800840a:	6920      	ldr	r0, [r4, #16]
 800840c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008410:	f104 0314 	add.w	r3, r4, #20
 8008414:	f019 091f 	ands.w	r9, r9, #31
 8008418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800841c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008420:	d02b      	beq.n	800847a <__lshift+0xbe>
 8008422:	468a      	mov	sl, r1
 8008424:	2200      	movs	r2, #0
 8008426:	f1c9 0e20 	rsb	lr, r9, #32
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	fa00 f009 	lsl.w	r0, r0, r9
 8008430:	4310      	orrs	r0, r2
 8008432:	f84a 0b04 	str.w	r0, [sl], #4
 8008436:	f853 2b04 	ldr.w	r2, [r3], #4
 800843a:	459c      	cmp	ip, r3
 800843c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008440:	d8f3      	bhi.n	800842a <__lshift+0x6e>
 8008442:	ebac 0304 	sub.w	r3, ip, r4
 8008446:	3b15      	subs	r3, #21
 8008448:	f023 0303 	bic.w	r3, r3, #3
 800844c:	3304      	adds	r3, #4
 800844e:	f104 0015 	add.w	r0, r4, #21
 8008452:	4584      	cmp	ip, r0
 8008454:	bf38      	it	cc
 8008456:	2304      	movcc	r3, #4
 8008458:	50ca      	str	r2, [r1, r3]
 800845a:	b10a      	cbz	r2, 8008460 <__lshift+0xa4>
 800845c:	f108 0602 	add.w	r6, r8, #2
 8008460:	3e01      	subs	r6, #1
 8008462:	4638      	mov	r0, r7
 8008464:	4621      	mov	r1, r4
 8008466:	612e      	str	r6, [r5, #16]
 8008468:	f7ff fddc 	bl	8008024 <_Bfree>
 800846c:	4628      	mov	r0, r5
 800846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008472:	f842 0f04 	str.w	r0, [r2, #4]!
 8008476:	3301      	adds	r3, #1
 8008478:	e7c5      	b.n	8008406 <__lshift+0x4a>
 800847a:	3904      	subs	r1, #4
 800847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008480:	459c      	cmp	ip, r3
 8008482:	f841 2f04 	str.w	r2, [r1, #4]!
 8008486:	d8f9      	bhi.n	800847c <__lshift+0xc0>
 8008488:	e7ea      	b.n	8008460 <__lshift+0xa4>
 800848a:	bf00      	nop
 800848c:	08009389 	.word	0x08009389
 8008490:	0800939a 	.word	0x0800939a

08008494 <__mcmp>:
 8008494:	4603      	mov	r3, r0
 8008496:	690a      	ldr	r2, [r1, #16]
 8008498:	6900      	ldr	r0, [r0, #16]
 800849a:	b530      	push	{r4, r5, lr}
 800849c:	1a80      	subs	r0, r0, r2
 800849e:	d10e      	bne.n	80084be <__mcmp+0x2a>
 80084a0:	3314      	adds	r3, #20
 80084a2:	3114      	adds	r1, #20
 80084a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084b4:	4295      	cmp	r5, r2
 80084b6:	d003      	beq.n	80084c0 <__mcmp+0x2c>
 80084b8:	d205      	bcs.n	80084c6 <__mcmp+0x32>
 80084ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084be:	bd30      	pop	{r4, r5, pc}
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d3f3      	bcc.n	80084ac <__mcmp+0x18>
 80084c4:	e7fb      	b.n	80084be <__mcmp+0x2a>
 80084c6:	2001      	movs	r0, #1
 80084c8:	e7f9      	b.n	80084be <__mcmp+0x2a>
	...

080084cc <__mdiff>:
 80084cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	4689      	mov	r9, r1
 80084d2:	4606      	mov	r6, r0
 80084d4:	4611      	mov	r1, r2
 80084d6:	4648      	mov	r0, r9
 80084d8:	4614      	mov	r4, r2
 80084da:	f7ff ffdb 	bl	8008494 <__mcmp>
 80084de:	1e05      	subs	r5, r0, #0
 80084e0:	d112      	bne.n	8008508 <__mdiff+0x3c>
 80084e2:	4629      	mov	r1, r5
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7ff fd5d 	bl	8007fa4 <_Balloc>
 80084ea:	4602      	mov	r2, r0
 80084ec:	b928      	cbnz	r0, 80084fa <__mdiff+0x2e>
 80084ee:	f240 2137 	movw	r1, #567	@ 0x237
 80084f2:	4b3e      	ldr	r3, [pc, #248]	@ (80085ec <__mdiff+0x120>)
 80084f4:	483e      	ldr	r0, [pc, #248]	@ (80085f0 <__mdiff+0x124>)
 80084f6:	f000 fb0d 	bl	8008b14 <__assert_func>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008500:	4610      	mov	r0, r2
 8008502:	b003      	add	sp, #12
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008508:	bfbc      	itt	lt
 800850a:	464b      	movlt	r3, r9
 800850c:	46a1      	movlt	r9, r4
 800850e:	4630      	mov	r0, r6
 8008510:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008514:	bfba      	itte	lt
 8008516:	461c      	movlt	r4, r3
 8008518:	2501      	movlt	r5, #1
 800851a:	2500      	movge	r5, #0
 800851c:	f7ff fd42 	bl	8007fa4 <_Balloc>
 8008520:	4602      	mov	r2, r0
 8008522:	b918      	cbnz	r0, 800852c <__mdiff+0x60>
 8008524:	f240 2145 	movw	r1, #581	@ 0x245
 8008528:	4b30      	ldr	r3, [pc, #192]	@ (80085ec <__mdiff+0x120>)
 800852a:	e7e3      	b.n	80084f4 <__mdiff+0x28>
 800852c:	f100 0b14 	add.w	fp, r0, #20
 8008530:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008534:	f109 0310 	add.w	r3, r9, #16
 8008538:	60c5      	str	r5, [r0, #12]
 800853a:	f04f 0c00 	mov.w	ip, #0
 800853e:	f109 0514 	add.w	r5, r9, #20
 8008542:	46d9      	mov	r9, fp
 8008544:	6926      	ldr	r6, [r4, #16]
 8008546:	f104 0e14 	add.w	lr, r4, #20
 800854a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800854e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	f85e 0b04 	ldr.w	r0, [lr], #4
 800855a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800855e:	b281      	uxth	r1, r0
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	fa1f f38a 	uxth.w	r3, sl
 8008566:	1a5b      	subs	r3, r3, r1
 8008568:	0c00      	lsrs	r0, r0, #16
 800856a:	4463      	add	r3, ip
 800856c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008570:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008574:	b29b      	uxth	r3, r3
 8008576:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800857a:	4576      	cmp	r6, lr
 800857c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008580:	f849 3b04 	str.w	r3, [r9], #4
 8008584:	d8e6      	bhi.n	8008554 <__mdiff+0x88>
 8008586:	1b33      	subs	r3, r6, r4
 8008588:	3b15      	subs	r3, #21
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	3415      	adds	r4, #21
 8008590:	3304      	adds	r3, #4
 8008592:	42a6      	cmp	r6, r4
 8008594:	bf38      	it	cc
 8008596:	2304      	movcc	r3, #4
 8008598:	441d      	add	r5, r3
 800859a:	445b      	add	r3, fp
 800859c:	461e      	mov	r6, r3
 800859e:	462c      	mov	r4, r5
 80085a0:	4544      	cmp	r4, r8
 80085a2:	d30e      	bcc.n	80085c2 <__mdiff+0xf6>
 80085a4:	f108 0103 	add.w	r1, r8, #3
 80085a8:	1b49      	subs	r1, r1, r5
 80085aa:	f021 0103 	bic.w	r1, r1, #3
 80085ae:	3d03      	subs	r5, #3
 80085b0:	45a8      	cmp	r8, r5
 80085b2:	bf38      	it	cc
 80085b4:	2100      	movcc	r1, #0
 80085b6:	440b      	add	r3, r1
 80085b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085bc:	b199      	cbz	r1, 80085e6 <__mdiff+0x11a>
 80085be:	6117      	str	r7, [r2, #16]
 80085c0:	e79e      	b.n	8008500 <__mdiff+0x34>
 80085c2:	46e6      	mov	lr, ip
 80085c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80085c8:	fa1f fc81 	uxth.w	ip, r1
 80085cc:	44f4      	add	ip, lr
 80085ce:	0c08      	lsrs	r0, r1, #16
 80085d0:	4471      	add	r1, lr
 80085d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085d6:	b289      	uxth	r1, r1
 80085d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085e0:	f846 1b04 	str.w	r1, [r6], #4
 80085e4:	e7dc      	b.n	80085a0 <__mdiff+0xd4>
 80085e6:	3f01      	subs	r7, #1
 80085e8:	e7e6      	b.n	80085b8 <__mdiff+0xec>
 80085ea:	bf00      	nop
 80085ec:	08009389 	.word	0x08009389
 80085f0:	0800939a 	.word	0x0800939a

080085f4 <__d2b>:
 80085f4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80085f8:	2101      	movs	r1, #1
 80085fa:	4690      	mov	r8, r2
 80085fc:	4699      	mov	r9, r3
 80085fe:	9e08      	ldr	r6, [sp, #32]
 8008600:	f7ff fcd0 	bl	8007fa4 <_Balloc>
 8008604:	4604      	mov	r4, r0
 8008606:	b930      	cbnz	r0, 8008616 <__d2b+0x22>
 8008608:	4602      	mov	r2, r0
 800860a:	f240 310f 	movw	r1, #783	@ 0x30f
 800860e:	4b23      	ldr	r3, [pc, #140]	@ (800869c <__d2b+0xa8>)
 8008610:	4823      	ldr	r0, [pc, #140]	@ (80086a0 <__d2b+0xac>)
 8008612:	f000 fa7f 	bl	8008b14 <__assert_func>
 8008616:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800861a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800861e:	b10d      	cbz	r5, 8008624 <__d2b+0x30>
 8008620:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	f1b8 0300 	subs.w	r3, r8, #0
 800862a:	d024      	beq.n	8008676 <__d2b+0x82>
 800862c:	4668      	mov	r0, sp
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	f7ff fd7f 	bl	8008132 <__lo0bits>
 8008634:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008638:	b1d8      	cbz	r0, 8008672 <__d2b+0x7e>
 800863a:	f1c0 0320 	rsb	r3, r0, #32
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	430b      	orrs	r3, r1
 8008644:	40c2      	lsrs	r2, r0
 8008646:	6163      	str	r3, [r4, #20]
 8008648:	9201      	str	r2, [sp, #4]
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	bf0c      	ite	eq
 8008650:	2201      	moveq	r2, #1
 8008652:	2202      	movne	r2, #2
 8008654:	61a3      	str	r3, [r4, #24]
 8008656:	6122      	str	r2, [r4, #16]
 8008658:	b1ad      	cbz	r5, 8008686 <__d2b+0x92>
 800865a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800865e:	4405      	add	r5, r0
 8008660:	6035      	str	r5, [r6, #0]
 8008662:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	6018      	str	r0, [r3, #0]
 800866a:	4620      	mov	r0, r4
 800866c:	b002      	add	sp, #8
 800866e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008672:	6161      	str	r1, [r4, #20]
 8008674:	e7e9      	b.n	800864a <__d2b+0x56>
 8008676:	a801      	add	r0, sp, #4
 8008678:	f7ff fd5b 	bl	8008132 <__lo0bits>
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	6163      	str	r3, [r4, #20]
 8008682:	3020      	adds	r0, #32
 8008684:	e7e7      	b.n	8008656 <__d2b+0x62>
 8008686:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800868a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800868e:	6030      	str	r0, [r6, #0]
 8008690:	6918      	ldr	r0, [r3, #16]
 8008692:	f7ff fd2f 	bl	80080f4 <__hi0bits>
 8008696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800869a:	e7e4      	b.n	8008666 <__d2b+0x72>
 800869c:	08009389 	.word	0x08009389
 80086a0:	0800939a 	.word	0x0800939a

080086a4 <__ssputs_r>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	461f      	mov	r7, r3
 80086aa:	688e      	ldr	r6, [r1, #8]
 80086ac:	4682      	mov	sl, r0
 80086ae:	42be      	cmp	r6, r7
 80086b0:	460c      	mov	r4, r1
 80086b2:	4690      	mov	r8, r2
 80086b4:	680b      	ldr	r3, [r1, #0]
 80086b6:	d82d      	bhi.n	8008714 <__ssputs_r+0x70>
 80086b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086c0:	d026      	beq.n	8008710 <__ssputs_r+0x6c>
 80086c2:	6965      	ldr	r5, [r4, #20]
 80086c4:	6909      	ldr	r1, [r1, #16]
 80086c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086ca:	eba3 0901 	sub.w	r9, r3, r1
 80086ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086d2:	1c7b      	adds	r3, r7, #1
 80086d4:	444b      	add	r3, r9
 80086d6:	106d      	asrs	r5, r5, #1
 80086d8:	429d      	cmp	r5, r3
 80086da:	bf38      	it	cc
 80086dc:	461d      	movcc	r5, r3
 80086de:	0553      	lsls	r3, r2, #21
 80086e0:	d527      	bpl.n	8008732 <__ssputs_r+0x8e>
 80086e2:	4629      	mov	r1, r5
 80086e4:	f7ff fbd2 	bl	8007e8c <_malloc_r>
 80086e8:	4606      	mov	r6, r0
 80086ea:	b360      	cbz	r0, 8008746 <__ssputs_r+0xa2>
 80086ec:	464a      	mov	r2, r9
 80086ee:	6921      	ldr	r1, [r4, #16]
 80086f0:	f000 fa02 	bl	8008af8 <memcpy>
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	6126      	str	r6, [r4, #16]
 8008702:	444e      	add	r6, r9
 8008704:	6026      	str	r6, [r4, #0]
 8008706:	463e      	mov	r6, r7
 8008708:	6165      	str	r5, [r4, #20]
 800870a:	eba5 0509 	sub.w	r5, r5, r9
 800870e:	60a5      	str	r5, [r4, #8]
 8008710:	42be      	cmp	r6, r7
 8008712:	d900      	bls.n	8008716 <__ssputs_r+0x72>
 8008714:	463e      	mov	r6, r7
 8008716:	4632      	mov	r2, r6
 8008718:	4641      	mov	r1, r8
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	f000 f9c2 	bl	8008aa4 <memmove>
 8008720:	2000      	movs	r0, #0
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	1b9b      	subs	r3, r3, r6
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	4433      	add	r3, r6
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008732:	462a      	mov	r2, r5
 8008734:	f000 fa32 	bl	8008b9c <_realloc_r>
 8008738:	4606      	mov	r6, r0
 800873a:	2800      	cmp	r0, #0
 800873c:	d1e0      	bne.n	8008700 <__ssputs_r+0x5c>
 800873e:	4650      	mov	r0, sl
 8008740:	6921      	ldr	r1, [r4, #16]
 8008742:	f7ff fb31 	bl	8007da8 <_free_r>
 8008746:	230c      	movs	r3, #12
 8008748:	f8ca 3000 	str.w	r3, [sl]
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	e7e9      	b.n	800872e <__ssputs_r+0x8a>
	...

0800875c <_svfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4698      	mov	r8, r3
 8008762:	898b      	ldrh	r3, [r1, #12]
 8008764:	4607      	mov	r7, r0
 8008766:	061b      	lsls	r3, r3, #24
 8008768:	460d      	mov	r5, r1
 800876a:	4614      	mov	r4, r2
 800876c:	b09d      	sub	sp, #116	@ 0x74
 800876e:	d510      	bpl.n	8008792 <_svfiprintf_r+0x36>
 8008770:	690b      	ldr	r3, [r1, #16]
 8008772:	b973      	cbnz	r3, 8008792 <_svfiprintf_r+0x36>
 8008774:	2140      	movs	r1, #64	@ 0x40
 8008776:	f7ff fb89 	bl	8007e8c <_malloc_r>
 800877a:	6028      	str	r0, [r5, #0]
 800877c:	6128      	str	r0, [r5, #16]
 800877e:	b930      	cbnz	r0, 800878e <_svfiprintf_r+0x32>
 8008780:	230c      	movs	r3, #12
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008788:	b01d      	add	sp, #116	@ 0x74
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	2340      	movs	r3, #64	@ 0x40
 8008790:	616b      	str	r3, [r5, #20]
 8008792:	2300      	movs	r3, #0
 8008794:	9309      	str	r3, [sp, #36]	@ 0x24
 8008796:	2320      	movs	r3, #32
 8008798:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800879c:	2330      	movs	r3, #48	@ 0x30
 800879e:	f04f 0901 	mov.w	r9, #1
 80087a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008940 <_svfiprintf_r+0x1e4>
 80087aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087ae:	4623      	mov	r3, r4
 80087b0:	469a      	mov	sl, r3
 80087b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b6:	b10a      	cbz	r2, 80087bc <_svfiprintf_r+0x60>
 80087b8:	2a25      	cmp	r2, #37	@ 0x25
 80087ba:	d1f9      	bne.n	80087b0 <_svfiprintf_r+0x54>
 80087bc:	ebba 0b04 	subs.w	fp, sl, r4
 80087c0:	d00b      	beq.n	80087da <_svfiprintf_r+0x7e>
 80087c2:	465b      	mov	r3, fp
 80087c4:	4622      	mov	r2, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff ff6b 	bl	80086a4 <__ssputs_r>
 80087ce:	3001      	adds	r0, #1
 80087d0:	f000 80a7 	beq.w	8008922 <_svfiprintf_r+0x1c6>
 80087d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087d6:	445a      	add	r2, fp
 80087d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80087da:	f89a 3000 	ldrb.w	r3, [sl]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 809f 	beq.w	8008922 <_svfiprintf_r+0x1c6>
 80087e4:	2300      	movs	r3, #0
 80087e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ee:	f10a 0a01 	add.w	sl, sl, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	9307      	str	r3, [sp, #28]
 80087f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80087fc:	4654      	mov	r4, sl
 80087fe:	2205      	movs	r2, #5
 8008800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008804:	484e      	ldr	r0, [pc, #312]	@ (8008940 <_svfiprintf_r+0x1e4>)
 8008806:	f7fe fc6e 	bl	80070e6 <memchr>
 800880a:	9a04      	ldr	r2, [sp, #16]
 800880c:	b9d8      	cbnz	r0, 8008846 <_svfiprintf_r+0xea>
 800880e:	06d0      	lsls	r0, r2, #27
 8008810:	bf44      	itt	mi
 8008812:	2320      	movmi	r3, #32
 8008814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008818:	0711      	lsls	r1, r2, #28
 800881a:	bf44      	itt	mi
 800881c:	232b      	movmi	r3, #43	@ 0x2b
 800881e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008822:	f89a 3000 	ldrb.w	r3, [sl]
 8008826:	2b2a      	cmp	r3, #42	@ 0x2a
 8008828:	d015      	beq.n	8008856 <_svfiprintf_r+0xfa>
 800882a:	4654      	mov	r4, sl
 800882c:	2000      	movs	r0, #0
 800882e:	f04f 0c0a 	mov.w	ip, #10
 8008832:	9a07      	ldr	r2, [sp, #28]
 8008834:	4621      	mov	r1, r4
 8008836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800883a:	3b30      	subs	r3, #48	@ 0x30
 800883c:	2b09      	cmp	r3, #9
 800883e:	d94b      	bls.n	80088d8 <_svfiprintf_r+0x17c>
 8008840:	b1b0      	cbz	r0, 8008870 <_svfiprintf_r+0x114>
 8008842:	9207      	str	r2, [sp, #28]
 8008844:	e014      	b.n	8008870 <_svfiprintf_r+0x114>
 8008846:	eba0 0308 	sub.w	r3, r0, r8
 800884a:	fa09 f303 	lsl.w	r3, r9, r3
 800884e:	4313      	orrs	r3, r2
 8008850:	46a2      	mov	sl, r4
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	e7d2      	b.n	80087fc <_svfiprintf_r+0xa0>
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	1d19      	adds	r1, r3, #4
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	9103      	str	r1, [sp, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	bfbb      	ittet	lt
 8008862:	425b      	neglt	r3, r3
 8008864:	f042 0202 	orrlt.w	r2, r2, #2
 8008868:	9307      	strge	r3, [sp, #28]
 800886a:	9307      	strlt	r3, [sp, #28]
 800886c:	bfb8      	it	lt
 800886e:	9204      	strlt	r2, [sp, #16]
 8008870:	7823      	ldrb	r3, [r4, #0]
 8008872:	2b2e      	cmp	r3, #46	@ 0x2e
 8008874:	d10a      	bne.n	800888c <_svfiprintf_r+0x130>
 8008876:	7863      	ldrb	r3, [r4, #1]
 8008878:	2b2a      	cmp	r3, #42	@ 0x2a
 800887a:	d132      	bne.n	80088e2 <_svfiprintf_r+0x186>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	3402      	adds	r4, #2
 8008880:	1d1a      	adds	r2, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9203      	str	r2, [sp, #12]
 8008886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008944 <_svfiprintf_r+0x1e8>
 8008890:	2203      	movs	r2, #3
 8008892:	4650      	mov	r0, sl
 8008894:	7821      	ldrb	r1, [r4, #0]
 8008896:	f7fe fc26 	bl	80070e6 <memchr>
 800889a:	b138      	cbz	r0, 80088ac <_svfiprintf_r+0x150>
 800889c:	2240      	movs	r2, #64	@ 0x40
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	eba0 000a 	sub.w	r0, r0, sl
 80088a4:	4082      	lsls	r2, r0
 80088a6:	4313      	orrs	r3, r2
 80088a8:	3401      	adds	r4, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b0:	2206      	movs	r2, #6
 80088b2:	4825      	ldr	r0, [pc, #148]	@ (8008948 <_svfiprintf_r+0x1ec>)
 80088b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088b8:	f7fe fc15 	bl	80070e6 <memchr>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d036      	beq.n	800892e <_svfiprintf_r+0x1d2>
 80088c0:	4b22      	ldr	r3, [pc, #136]	@ (800894c <_svfiprintf_r+0x1f0>)
 80088c2:	bb1b      	cbnz	r3, 800890c <_svfiprintf_r+0x1b0>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	3307      	adds	r3, #7
 80088c8:	f023 0307 	bic.w	r3, r3, #7
 80088cc:	3308      	adds	r3, #8
 80088ce:	9303      	str	r3, [sp, #12]
 80088d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d2:	4433      	add	r3, r6
 80088d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d6:	e76a      	b.n	80087ae <_svfiprintf_r+0x52>
 80088d8:	460c      	mov	r4, r1
 80088da:	2001      	movs	r0, #1
 80088dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e0:	e7a8      	b.n	8008834 <_svfiprintf_r+0xd8>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f04f 0c0a 	mov.w	ip, #10
 80088e8:	4619      	mov	r1, r3
 80088ea:	3401      	adds	r4, #1
 80088ec:	9305      	str	r3, [sp, #20]
 80088ee:	4620      	mov	r0, r4
 80088f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f4:	3a30      	subs	r2, #48	@ 0x30
 80088f6:	2a09      	cmp	r2, #9
 80088f8:	d903      	bls.n	8008902 <_svfiprintf_r+0x1a6>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0c6      	beq.n	800888c <_svfiprintf_r+0x130>
 80088fe:	9105      	str	r1, [sp, #20]
 8008900:	e7c4      	b.n	800888c <_svfiprintf_r+0x130>
 8008902:	4604      	mov	r4, r0
 8008904:	2301      	movs	r3, #1
 8008906:	fb0c 2101 	mla	r1, ip, r1, r2
 800890a:	e7f0      	b.n	80088ee <_svfiprintf_r+0x192>
 800890c:	ab03      	add	r3, sp, #12
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	462a      	mov	r2, r5
 8008912:	4638      	mov	r0, r7
 8008914:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <_svfiprintf_r+0x1f4>)
 8008916:	a904      	add	r1, sp, #16
 8008918:	f7fd fe6e 	bl	80065f8 <_printf_float>
 800891c:	1c42      	adds	r2, r0, #1
 800891e:	4606      	mov	r6, r0
 8008920:	d1d6      	bne.n	80088d0 <_svfiprintf_r+0x174>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	065b      	lsls	r3, r3, #25
 8008926:	f53f af2d 	bmi.w	8008784 <_svfiprintf_r+0x28>
 800892a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800892c:	e72c      	b.n	8008788 <_svfiprintf_r+0x2c>
 800892e:	ab03      	add	r3, sp, #12
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	462a      	mov	r2, r5
 8008934:	4638      	mov	r0, r7
 8008936:	4b06      	ldr	r3, [pc, #24]	@ (8008950 <_svfiprintf_r+0x1f4>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	f7fe f8fb 	bl	8006b34 <_printf_i>
 800893e:	e7ed      	b.n	800891c <_svfiprintf_r+0x1c0>
 8008940:	080094f0 	.word	0x080094f0
 8008944:	080094f6 	.word	0x080094f6
 8008948:	080094fa 	.word	0x080094fa
 800894c:	080065f9 	.word	0x080065f9
 8008950:	080086a5 	.word	0x080086a5

08008954 <__sflush_r>:
 8008954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	0716      	lsls	r6, r2, #28
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	d454      	bmi.n	8008a0c <__sflush_r+0xb8>
 8008962:	684b      	ldr	r3, [r1, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc02      	bgt.n	800896e <__sflush_r+0x1a>
 8008968:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	dd48      	ble.n	8008a00 <__sflush_r+0xac>
 800896e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008970:	2e00      	cmp	r6, #0
 8008972:	d045      	beq.n	8008a00 <__sflush_r+0xac>
 8008974:	2300      	movs	r3, #0
 8008976:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800897a:	682f      	ldr	r7, [r5, #0]
 800897c:	6a21      	ldr	r1, [r4, #32]
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	d030      	beq.n	80089e4 <__sflush_r+0x90>
 8008982:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	0759      	lsls	r1, r3, #29
 8008988:	d505      	bpl.n	8008996 <__sflush_r+0x42>
 800898a:	6863      	ldr	r3, [r4, #4]
 800898c:	1ad2      	subs	r2, r2, r3
 800898e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008990:	b10b      	cbz	r3, 8008996 <__sflush_r+0x42>
 8008992:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008994:	1ad2      	subs	r2, r2, r3
 8008996:	2300      	movs	r3, #0
 8008998:	4628      	mov	r0, r5
 800899a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800899c:	6a21      	ldr	r1, [r4, #32]
 800899e:	47b0      	blx	r6
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	d106      	bne.n	80089b4 <__sflush_r+0x60>
 80089a6:	6829      	ldr	r1, [r5, #0]
 80089a8:	291d      	cmp	r1, #29
 80089aa:	d82b      	bhi.n	8008a04 <__sflush_r+0xb0>
 80089ac:	4a28      	ldr	r2, [pc, #160]	@ (8008a50 <__sflush_r+0xfc>)
 80089ae:	410a      	asrs	r2, r1
 80089b0:	07d6      	lsls	r6, r2, #31
 80089b2:	d427      	bmi.n	8008a04 <__sflush_r+0xb0>
 80089b4:	2200      	movs	r2, #0
 80089b6:	6062      	str	r2, [r4, #4]
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	04d9      	lsls	r1, r3, #19
 80089bc:	6022      	str	r2, [r4, #0]
 80089be:	d504      	bpl.n	80089ca <__sflush_r+0x76>
 80089c0:	1c42      	adds	r2, r0, #1
 80089c2:	d101      	bne.n	80089c8 <__sflush_r+0x74>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b903      	cbnz	r3, 80089ca <__sflush_r+0x76>
 80089c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80089ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089cc:	602f      	str	r7, [r5, #0]
 80089ce:	b1b9      	cbz	r1, 8008a00 <__sflush_r+0xac>
 80089d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d4:	4299      	cmp	r1, r3
 80089d6:	d002      	beq.n	80089de <__sflush_r+0x8a>
 80089d8:	4628      	mov	r0, r5
 80089da:	f7ff f9e5 	bl	8007da8 <_free_r>
 80089de:	2300      	movs	r3, #0
 80089e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80089e2:	e00d      	b.n	8008a00 <__sflush_r+0xac>
 80089e4:	2301      	movs	r3, #1
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b0      	blx	r6
 80089ea:	4602      	mov	r2, r0
 80089ec:	1c50      	adds	r0, r2, #1
 80089ee:	d1c9      	bne.n	8008984 <__sflush_r+0x30>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0c6      	beq.n	8008984 <__sflush_r+0x30>
 80089f6:	2b1d      	cmp	r3, #29
 80089f8:	d001      	beq.n	80089fe <__sflush_r+0xaa>
 80089fa:	2b16      	cmp	r3, #22
 80089fc:	d11d      	bne.n	8008a3a <__sflush_r+0xe6>
 80089fe:	602f      	str	r7, [r5, #0]
 8008a00:	2000      	movs	r0, #0
 8008a02:	e021      	b.n	8008a48 <__sflush_r+0xf4>
 8008a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a08:	b21b      	sxth	r3, r3
 8008a0a:	e01a      	b.n	8008a42 <__sflush_r+0xee>
 8008a0c:	690f      	ldr	r7, [r1, #16]
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	d0f6      	beq.n	8008a00 <__sflush_r+0xac>
 8008a12:	0793      	lsls	r3, r2, #30
 8008a14:	bf18      	it	ne
 8008a16:	2300      	movne	r3, #0
 8008a18:	680e      	ldr	r6, [r1, #0]
 8008a1a:	bf08      	it	eq
 8008a1c:	694b      	ldreq	r3, [r1, #20]
 8008a1e:	1bf6      	subs	r6, r6, r7
 8008a20:	600f      	str	r7, [r1, #0]
 8008a22:	608b      	str	r3, [r1, #8]
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	ddeb      	ble.n	8008a00 <__sflush_r+0xac>
 8008a28:	4633      	mov	r3, r6
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a34:	47e0      	blx	ip
 8008a36:	2800      	cmp	r0, #0
 8008a38:	dc07      	bgt.n	8008a4a <__sflush_r+0xf6>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4a:	4407      	add	r7, r0
 8008a4c:	1a36      	subs	r6, r6, r0
 8008a4e:	e7e9      	b.n	8008a24 <__sflush_r+0xd0>
 8008a50:	dfbffffe 	.word	0xdfbffffe

08008a54 <_fflush_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	690b      	ldr	r3, [r1, #16]
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b913      	cbnz	r3, 8008a64 <_fflush_r+0x10>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	4628      	mov	r0, r5
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	b118      	cbz	r0, 8008a6e <_fflush_r+0x1a>
 8008a66:	6a03      	ldr	r3, [r0, #32]
 8008a68:	b90b      	cbnz	r3, 8008a6e <_fflush_r+0x1a>
 8008a6a:	f7fe fa0f 	bl	8006e8c <__sinit>
 8008a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0f3      	beq.n	8008a5e <_fflush_r+0xa>
 8008a76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a78:	07d0      	lsls	r0, r2, #31
 8008a7a:	d404      	bmi.n	8008a86 <_fflush_r+0x32>
 8008a7c:	0599      	lsls	r1, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_fflush_r+0x32>
 8008a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a82:	f7fe fb2e 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8008a86:	4628      	mov	r0, r5
 8008a88:	4621      	mov	r1, r4
 8008a8a:	f7ff ff63 	bl	8008954 <__sflush_r>
 8008a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a90:	4605      	mov	r5, r0
 8008a92:	07da      	lsls	r2, r3, #31
 8008a94:	d4e4      	bmi.n	8008a60 <_fflush_r+0xc>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	059b      	lsls	r3, r3, #22
 8008a9a:	d4e1      	bmi.n	8008a60 <_fflush_r+0xc>
 8008a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a9e:	f7fe fb21 	bl	80070e4 <__retarget_lock_release_recursive>
 8008aa2:	e7dd      	b.n	8008a60 <_fflush_r+0xc>

08008aa4 <memmove>:
 8008aa4:	4288      	cmp	r0, r1
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	eb01 0402 	add.w	r4, r1, r2
 8008aac:	d902      	bls.n	8008ab4 <memmove+0x10>
 8008aae:	4284      	cmp	r4, r0
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	d807      	bhi.n	8008ac4 <memmove+0x20>
 8008ab4:	1e43      	subs	r3, r0, #1
 8008ab6:	42a1      	cmp	r1, r4
 8008ab8:	d008      	beq.n	8008acc <memmove+0x28>
 8008aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ac2:	e7f8      	b.n	8008ab6 <memmove+0x12>
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	4402      	add	r2, r0
 8008ac8:	428a      	cmp	r2, r1
 8008aca:	d100      	bne.n	8008ace <memmove+0x2a>
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ad6:	e7f7      	b.n	8008ac8 <memmove+0x24>

08008ad8 <_sbrk_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	2300      	movs	r3, #0
 8008adc:	4d05      	ldr	r5, [pc, #20]	@ (8008af4 <_sbrk_r+0x1c>)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7fa f80e 	bl	8002b04 <_sbrk>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_sbrk_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_sbrk_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	200005e8 	.word	0x200005e8

08008af8 <memcpy>:
 8008af8:	440a      	add	r2, r1
 8008afa:	4291      	cmp	r1, r2
 8008afc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b00:	d100      	bne.n	8008b04 <memcpy+0xc>
 8008b02:	4770      	bx	lr
 8008b04:	b510      	push	{r4, lr}
 8008b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b0a:	4291      	cmp	r1, r2
 8008b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b10:	d1f9      	bne.n	8008b06 <memcpy+0xe>
 8008b12:	bd10      	pop	{r4, pc}

08008b14 <__assert_func>:
 8008b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b16:	4614      	mov	r4, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4b09      	ldr	r3, [pc, #36]	@ (8008b40 <__assert_func+0x2c>)
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68d8      	ldr	r0, [r3, #12]
 8008b22:	b954      	cbnz	r4, 8008b3a <__assert_func+0x26>
 8008b24:	4b07      	ldr	r3, [pc, #28]	@ (8008b44 <__assert_func+0x30>)
 8008b26:	461c      	mov	r4, r3
 8008b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b2c:	9100      	str	r1, [sp, #0]
 8008b2e:	462b      	mov	r3, r5
 8008b30:	4905      	ldr	r1, [pc, #20]	@ (8008b48 <__assert_func+0x34>)
 8008b32:	f000 f86f 	bl	8008c14 <fiprintf>
 8008b36:	f000 f87f 	bl	8008c38 <abort>
 8008b3a:	4b04      	ldr	r3, [pc, #16]	@ (8008b4c <__assert_func+0x38>)
 8008b3c:	e7f4      	b.n	8008b28 <__assert_func+0x14>
 8008b3e:	bf00      	nop
 8008b40:	2000001c 	.word	0x2000001c
 8008b44:	08009546 	.word	0x08009546
 8008b48:	08009518 	.word	0x08009518
 8008b4c:	0800950b 	.word	0x0800950b

08008b50 <_calloc_r>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	fba1 5402 	umull	r5, r4, r1, r2
 8008b56:	b93c      	cbnz	r4, 8008b68 <_calloc_r+0x18>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7ff f997 	bl	8007e8c <_malloc_r>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	b928      	cbnz	r0, 8008b6e <_calloc_r+0x1e>
 8008b62:	2600      	movs	r6, #0
 8008b64:	4630      	mov	r0, r6
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	220c      	movs	r2, #12
 8008b6a:	6002      	str	r2, [r0, #0]
 8008b6c:	e7f9      	b.n	8008b62 <_calloc_r+0x12>
 8008b6e:	462a      	mov	r2, r5
 8008b70:	4621      	mov	r1, r4
 8008b72:	f7fe fa38 	bl	8006fe6 <memset>
 8008b76:	e7f5      	b.n	8008b64 <_calloc_r+0x14>

08008b78 <__ascii_mbtowc>:
 8008b78:	b082      	sub	sp, #8
 8008b7a:	b901      	cbnz	r1, 8008b7e <__ascii_mbtowc+0x6>
 8008b7c:	a901      	add	r1, sp, #4
 8008b7e:	b142      	cbz	r2, 8008b92 <__ascii_mbtowc+0x1a>
 8008b80:	b14b      	cbz	r3, 8008b96 <__ascii_mbtowc+0x1e>
 8008b82:	7813      	ldrb	r3, [r2, #0]
 8008b84:	600b      	str	r3, [r1, #0]
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	1e10      	subs	r0, r2, #0
 8008b8a:	bf18      	it	ne
 8008b8c:	2001      	movne	r0, #1
 8008b8e:	b002      	add	sp, #8
 8008b90:	4770      	bx	lr
 8008b92:	4610      	mov	r0, r2
 8008b94:	e7fb      	b.n	8008b8e <__ascii_mbtowc+0x16>
 8008b96:	f06f 0001 	mvn.w	r0, #1
 8008b9a:	e7f8      	b.n	8008b8e <__ascii_mbtowc+0x16>

08008b9c <_realloc_r>:
 8008b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	4615      	mov	r5, r2
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	b921      	cbnz	r1, 8008bb2 <_realloc_r+0x16>
 8008ba8:	4611      	mov	r1, r2
 8008baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	f7ff b96d 	b.w	8007e8c <_malloc_r>
 8008bb2:	b92a      	cbnz	r2, 8008bc0 <_realloc_r+0x24>
 8008bb4:	f7ff f8f8 	bl	8007da8 <_free_r>
 8008bb8:	2400      	movs	r4, #0
 8008bba:	4620      	mov	r0, r4
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	f000 f841 	bl	8008c46 <_malloc_usable_size_r>
 8008bc4:	4285      	cmp	r5, r0
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	d802      	bhi.n	8008bd0 <_realloc_r+0x34>
 8008bca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bce:	d8f4      	bhi.n	8008bba <_realloc_r+0x1e>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	f7ff f95a 	bl	8007e8c <_malloc_r>
 8008bd8:	4607      	mov	r7, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0ec      	beq.n	8008bb8 <_realloc_r+0x1c>
 8008bde:	42b5      	cmp	r5, r6
 8008be0:	462a      	mov	r2, r5
 8008be2:	4621      	mov	r1, r4
 8008be4:	bf28      	it	cs
 8008be6:	4632      	movcs	r2, r6
 8008be8:	f7ff ff86 	bl	8008af8 <memcpy>
 8008bec:	4621      	mov	r1, r4
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f7ff f8da 	bl	8007da8 <_free_r>
 8008bf4:	463c      	mov	r4, r7
 8008bf6:	e7e0      	b.n	8008bba <_realloc_r+0x1e>

08008bf8 <__ascii_wctomb>:
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	b141      	cbz	r1, 8008c10 <__ascii_wctomb+0x18>
 8008bfe:	2aff      	cmp	r2, #255	@ 0xff
 8008c00:	d904      	bls.n	8008c0c <__ascii_wctomb+0x14>
 8008c02:	228a      	movs	r2, #138	@ 0x8a
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	4770      	bx	lr
 8008c0c:	2001      	movs	r0, #1
 8008c0e:	700a      	strb	r2, [r1, #0]
 8008c10:	4770      	bx	lr
	...

08008c14 <fiprintf>:
 8008c14:	b40e      	push	{r1, r2, r3}
 8008c16:	b503      	push	{r0, r1, lr}
 8008c18:	4601      	mov	r1, r0
 8008c1a:	ab03      	add	r3, sp, #12
 8008c1c:	4805      	ldr	r0, [pc, #20]	@ (8008c34 <fiprintf+0x20>)
 8008c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c22:	6800      	ldr	r0, [r0, #0]
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	f000 f83d 	bl	8008ca4 <_vfiprintf_r>
 8008c2a:	b002      	add	sp, #8
 8008c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c30:	b003      	add	sp, #12
 8008c32:	4770      	bx	lr
 8008c34:	2000001c 	.word	0x2000001c

08008c38 <abort>:
 8008c38:	2006      	movs	r0, #6
 8008c3a:	b508      	push	{r3, lr}
 8008c3c:	f000 fa06 	bl	800904c <raise>
 8008c40:	2001      	movs	r0, #1
 8008c42:	f7f9 feea 	bl	8002a1a <_exit>

08008c46 <_malloc_usable_size_r>:
 8008c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4a:	1f18      	subs	r0, r3, #4
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfbc      	itt	lt
 8008c50:	580b      	ldrlt	r3, [r1, r0]
 8008c52:	18c0      	addlt	r0, r0, r3
 8008c54:	4770      	bx	lr

08008c56 <__sfputc_r>:
 8008c56:	6893      	ldr	r3, [r2, #8]
 8008c58:	b410      	push	{r4}
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	6093      	str	r3, [r2, #8]
 8008c60:	da07      	bge.n	8008c72 <__sfputc_r+0x1c>
 8008c62:	6994      	ldr	r4, [r2, #24]
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	db01      	blt.n	8008c6c <__sfputc_r+0x16>
 8008c68:	290a      	cmp	r1, #10
 8008c6a:	d102      	bne.n	8008c72 <__sfputc_r+0x1c>
 8008c6c:	bc10      	pop	{r4}
 8008c6e:	f000 b931 	b.w	8008ed4 <__swbuf_r>
 8008c72:	6813      	ldr	r3, [r2, #0]
 8008c74:	1c58      	adds	r0, r3, #1
 8008c76:	6010      	str	r0, [r2, #0]
 8008c78:	7019      	strb	r1, [r3, #0]
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	bc10      	pop	{r4}
 8008c7e:	4770      	bx	lr

08008c80 <__sfputs_r>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	4614      	mov	r4, r2
 8008c88:	18d5      	adds	r5, r2, r3
 8008c8a:	42ac      	cmp	r4, r5
 8008c8c:	d101      	bne.n	8008c92 <__sfputs_r+0x12>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e007      	b.n	8008ca2 <__sfputs_r+0x22>
 8008c92:	463a      	mov	r2, r7
 8008c94:	4630      	mov	r0, r6
 8008c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9a:	f7ff ffdc 	bl	8008c56 <__sfputc_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d1f3      	bne.n	8008c8a <__sfputs_r+0xa>
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ca4 <_vfiprintf_r>:
 8008ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	460d      	mov	r5, r1
 8008caa:	4614      	mov	r4, r2
 8008cac:	4698      	mov	r8, r3
 8008cae:	4606      	mov	r6, r0
 8008cb0:	b09d      	sub	sp, #116	@ 0x74
 8008cb2:	b118      	cbz	r0, 8008cbc <_vfiprintf_r+0x18>
 8008cb4:	6a03      	ldr	r3, [r0, #32]
 8008cb6:	b90b      	cbnz	r3, 8008cbc <_vfiprintf_r+0x18>
 8008cb8:	f7fe f8e8 	bl	8006e8c <__sinit>
 8008cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cbe:	07d9      	lsls	r1, r3, #31
 8008cc0:	d405      	bmi.n	8008cce <_vfiprintf_r+0x2a>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d402      	bmi.n	8008cce <_vfiprintf_r+0x2a>
 8008cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cca:	f7fe fa0a 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	071b      	lsls	r3, r3, #28
 8008cd2:	d501      	bpl.n	8008cd8 <_vfiprintf_r+0x34>
 8008cd4:	692b      	ldr	r3, [r5, #16]
 8008cd6:	b99b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x5c>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f000 f938 	bl	8008f50 <__swsetup_r>
 8008ce0:	b170      	cbz	r0, 8008d00 <_vfiprintf_r+0x5c>
 8008ce2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ce4:	07dc      	lsls	r4, r3, #31
 8008ce6:	d504      	bpl.n	8008cf2 <_vfiprintf_r+0x4e>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cec:	b01d      	add	sp, #116	@ 0x74
 8008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	0598      	lsls	r0, r3, #22
 8008cf6:	d4f7      	bmi.n	8008ce8 <_vfiprintf_r+0x44>
 8008cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cfa:	f7fe f9f3 	bl	80070e4 <__retarget_lock_release_recursive>
 8008cfe:	e7f3      	b.n	8008ce8 <_vfiprintf_r+0x44>
 8008d00:	2300      	movs	r3, #0
 8008d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d04:	2320      	movs	r3, #32
 8008d06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d0a:	2330      	movs	r3, #48	@ 0x30
 8008d0c:	f04f 0901 	mov.w	r9, #1
 8008d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008ec0 <_vfiprintf_r+0x21c>
 8008d18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	469a      	mov	sl, r3
 8008d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d24:	b10a      	cbz	r2, 8008d2a <_vfiprintf_r+0x86>
 8008d26:	2a25      	cmp	r2, #37	@ 0x25
 8008d28:	d1f9      	bne.n	8008d1e <_vfiprintf_r+0x7a>
 8008d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d2e:	d00b      	beq.n	8008d48 <_vfiprintf_r+0xa4>
 8008d30:	465b      	mov	r3, fp
 8008d32:	4622      	mov	r2, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ffa2 	bl	8008c80 <__sfputs_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f000 80a7 	beq.w	8008e90 <_vfiprintf_r+0x1ec>
 8008d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d44:	445a      	add	r2, fp
 8008d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d48:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 809f 	beq.w	8008e90 <_vfiprintf_r+0x1ec>
 8008d52:	2300      	movs	r3, #0
 8008d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5c:	f10a 0a01 	add.w	sl, sl, #1
 8008d60:	9304      	str	r3, [sp, #16]
 8008d62:	9307      	str	r3, [sp, #28]
 8008d64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d68:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d6a:	4654      	mov	r4, sl
 8008d6c:	2205      	movs	r2, #5
 8008d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d72:	4853      	ldr	r0, [pc, #332]	@ (8008ec0 <_vfiprintf_r+0x21c>)
 8008d74:	f7fe f9b7 	bl	80070e6 <memchr>
 8008d78:	9a04      	ldr	r2, [sp, #16]
 8008d7a:	b9d8      	cbnz	r0, 8008db4 <_vfiprintf_r+0x110>
 8008d7c:	06d1      	lsls	r1, r2, #27
 8008d7e:	bf44      	itt	mi
 8008d80:	2320      	movmi	r3, #32
 8008d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d86:	0713      	lsls	r3, r2, #28
 8008d88:	bf44      	itt	mi
 8008d8a:	232b      	movmi	r3, #43	@ 0x2b
 8008d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d90:	f89a 3000 	ldrb.w	r3, [sl]
 8008d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d96:	d015      	beq.n	8008dc4 <_vfiprintf_r+0x120>
 8008d98:	4654      	mov	r4, sl
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	f04f 0c0a 	mov.w	ip, #10
 8008da0:	9a07      	ldr	r2, [sp, #28]
 8008da2:	4621      	mov	r1, r4
 8008da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da8:	3b30      	subs	r3, #48	@ 0x30
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d94b      	bls.n	8008e46 <_vfiprintf_r+0x1a2>
 8008dae:	b1b0      	cbz	r0, 8008dde <_vfiprintf_r+0x13a>
 8008db0:	9207      	str	r2, [sp, #28]
 8008db2:	e014      	b.n	8008dde <_vfiprintf_r+0x13a>
 8008db4:	eba0 0308 	sub.w	r3, r0, r8
 8008db8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	46a2      	mov	sl, r4
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	e7d2      	b.n	8008d6a <_vfiprintf_r+0xc6>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	1d19      	adds	r1, r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	9103      	str	r1, [sp, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfbb      	ittet	lt
 8008dd0:	425b      	neglt	r3, r3
 8008dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd6:	9307      	strge	r3, [sp, #28]
 8008dd8:	9307      	strlt	r3, [sp, #28]
 8008dda:	bfb8      	it	lt
 8008ddc:	9204      	strlt	r2, [sp, #16]
 8008dde:	7823      	ldrb	r3, [r4, #0]
 8008de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008de2:	d10a      	bne.n	8008dfa <_vfiprintf_r+0x156>
 8008de4:	7863      	ldrb	r3, [r4, #1]
 8008de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de8:	d132      	bne.n	8008e50 <_vfiprintf_r+0x1ac>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	3402      	adds	r4, #2
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9203      	str	r2, [sp, #12]
 8008df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008df8:	9305      	str	r3, [sp, #20]
 8008dfa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008ec4 <_vfiprintf_r+0x220>
 8008dfe:	2203      	movs	r2, #3
 8008e00:	4650      	mov	r0, sl
 8008e02:	7821      	ldrb	r1, [r4, #0]
 8008e04:	f7fe f96f 	bl	80070e6 <memchr>
 8008e08:	b138      	cbz	r0, 8008e1a <_vfiprintf_r+0x176>
 8008e0a:	2240      	movs	r2, #64	@ 0x40
 8008e0c:	9b04      	ldr	r3, [sp, #16]
 8008e0e:	eba0 000a 	sub.w	r0, r0, sl
 8008e12:	4082      	lsls	r2, r0
 8008e14:	4313      	orrs	r3, r2
 8008e16:	3401      	adds	r4, #1
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1e:	2206      	movs	r2, #6
 8008e20:	4829      	ldr	r0, [pc, #164]	@ (8008ec8 <_vfiprintf_r+0x224>)
 8008e22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e26:	f7fe f95e 	bl	80070e6 <memchr>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d03f      	beq.n	8008eae <_vfiprintf_r+0x20a>
 8008e2e:	4b27      	ldr	r3, [pc, #156]	@ (8008ecc <_vfiprintf_r+0x228>)
 8008e30:	bb1b      	cbnz	r3, 8008e7a <_vfiprintf_r+0x1d6>
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	3307      	adds	r3, #7
 8008e36:	f023 0307 	bic.w	r3, r3, #7
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e40:	443b      	add	r3, r7
 8008e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e44:	e76a      	b.n	8008d1c <_vfiprintf_r+0x78>
 8008e46:	460c      	mov	r4, r1
 8008e48:	2001      	movs	r0, #1
 8008e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e4e:	e7a8      	b.n	8008da2 <_vfiprintf_r+0xfe>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f04f 0c0a 	mov.w	ip, #10
 8008e56:	4619      	mov	r1, r3
 8008e58:	3401      	adds	r4, #1
 8008e5a:	9305      	str	r3, [sp, #20]
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e62:	3a30      	subs	r2, #48	@ 0x30
 8008e64:	2a09      	cmp	r2, #9
 8008e66:	d903      	bls.n	8008e70 <_vfiprintf_r+0x1cc>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0c6      	beq.n	8008dfa <_vfiprintf_r+0x156>
 8008e6c:	9105      	str	r1, [sp, #20]
 8008e6e:	e7c4      	b.n	8008dfa <_vfiprintf_r+0x156>
 8008e70:	4604      	mov	r4, r0
 8008e72:	2301      	movs	r3, #1
 8008e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e78:	e7f0      	b.n	8008e5c <_vfiprintf_r+0x1b8>
 8008e7a:	ab03      	add	r3, sp, #12
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4630      	mov	r0, r6
 8008e82:	4b13      	ldr	r3, [pc, #76]	@ (8008ed0 <_vfiprintf_r+0x22c>)
 8008e84:	a904      	add	r1, sp, #16
 8008e86:	f7fd fbb7 	bl	80065f8 <_printf_float>
 8008e8a:	4607      	mov	r7, r0
 8008e8c:	1c78      	adds	r0, r7, #1
 8008e8e:	d1d6      	bne.n	8008e3e <_vfiprintf_r+0x19a>
 8008e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e92:	07d9      	lsls	r1, r3, #31
 8008e94:	d405      	bmi.n	8008ea2 <_vfiprintf_r+0x1fe>
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	059a      	lsls	r2, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_vfiprintf_r+0x1fe>
 8008e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e9e:	f7fe f921 	bl	80070e4 <__retarget_lock_release_recursive>
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	065b      	lsls	r3, r3, #25
 8008ea6:	f53f af1f 	bmi.w	8008ce8 <_vfiprintf_r+0x44>
 8008eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eac:	e71e      	b.n	8008cec <_vfiprintf_r+0x48>
 8008eae:	ab03      	add	r3, sp, #12
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <_vfiprintf_r+0x22c>)
 8008eb8:	a904      	add	r1, sp, #16
 8008eba:	f7fd fe3b 	bl	8006b34 <_printf_i>
 8008ebe:	e7e4      	b.n	8008e8a <_vfiprintf_r+0x1e6>
 8008ec0:	080094f0 	.word	0x080094f0
 8008ec4:	080094f6 	.word	0x080094f6
 8008ec8:	080094fa 	.word	0x080094fa
 8008ecc:	080065f9 	.word	0x080065f9
 8008ed0:	08008c81 	.word	0x08008c81

08008ed4 <__swbuf_r>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	460e      	mov	r6, r1
 8008ed8:	4614      	mov	r4, r2
 8008eda:	4605      	mov	r5, r0
 8008edc:	b118      	cbz	r0, 8008ee6 <__swbuf_r+0x12>
 8008ede:	6a03      	ldr	r3, [r0, #32]
 8008ee0:	b90b      	cbnz	r3, 8008ee6 <__swbuf_r+0x12>
 8008ee2:	f7fd ffd3 	bl	8006e8c <__sinit>
 8008ee6:	69a3      	ldr	r3, [r4, #24]
 8008ee8:	60a3      	str	r3, [r4, #8]
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	071a      	lsls	r2, r3, #28
 8008eee:	d501      	bpl.n	8008ef4 <__swbuf_r+0x20>
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	b943      	cbnz	r3, 8008f06 <__swbuf_r+0x32>
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 f82a 	bl	8008f50 <__swsetup_r>
 8008efc:	b118      	cbz	r0, 8008f06 <__swbuf_r+0x32>
 8008efe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008f02:	4638      	mov	r0, r7
 8008f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	6922      	ldr	r2, [r4, #16]
 8008f0a:	b2f6      	uxtb	r6, r6
 8008f0c:	1a98      	subs	r0, r3, r2
 8008f0e:	6963      	ldr	r3, [r4, #20]
 8008f10:	4637      	mov	r7, r6
 8008f12:	4283      	cmp	r3, r0
 8008f14:	dc05      	bgt.n	8008f22 <__swbuf_r+0x4e>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7ff fd9b 	bl	8008a54 <_fflush_r>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d1ed      	bne.n	8008efe <__swbuf_r+0x2a>
 8008f22:	68a3      	ldr	r3, [r4, #8]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	60a3      	str	r3, [r4, #8]
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	6022      	str	r2, [r4, #0]
 8008f2e:	701e      	strb	r6, [r3, #0]
 8008f30:	6962      	ldr	r2, [r4, #20]
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d004      	beq.n	8008f42 <__swbuf_r+0x6e>
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	07db      	lsls	r3, r3, #31
 8008f3c:	d5e1      	bpl.n	8008f02 <__swbuf_r+0x2e>
 8008f3e:	2e0a      	cmp	r6, #10
 8008f40:	d1df      	bne.n	8008f02 <__swbuf_r+0x2e>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f7ff fd85 	bl	8008a54 <_fflush_r>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0d9      	beq.n	8008f02 <__swbuf_r+0x2e>
 8008f4e:	e7d6      	b.n	8008efe <__swbuf_r+0x2a>

08008f50 <__swsetup_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4b29      	ldr	r3, [pc, #164]	@ (8008ff8 <__swsetup_r+0xa8>)
 8008f54:	4605      	mov	r5, r0
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	460c      	mov	r4, r1
 8008f5a:	b118      	cbz	r0, 8008f64 <__swsetup_r+0x14>
 8008f5c:	6a03      	ldr	r3, [r0, #32]
 8008f5e:	b90b      	cbnz	r3, 8008f64 <__swsetup_r+0x14>
 8008f60:	f7fd ff94 	bl	8006e8c <__sinit>
 8008f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f68:	0719      	lsls	r1, r3, #28
 8008f6a:	d422      	bmi.n	8008fb2 <__swsetup_r+0x62>
 8008f6c:	06da      	lsls	r2, r3, #27
 8008f6e:	d407      	bmi.n	8008f80 <__swsetup_r+0x30>
 8008f70:	2209      	movs	r2, #9
 8008f72:	602a      	str	r2, [r5, #0]
 8008f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	e033      	b.n	8008fe8 <__swsetup_r+0x98>
 8008f80:	0758      	lsls	r0, r3, #29
 8008f82:	d512      	bpl.n	8008faa <__swsetup_r+0x5a>
 8008f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f86:	b141      	cbz	r1, 8008f9a <__swsetup_r+0x4a>
 8008f88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <__swsetup_r+0x46>
 8008f90:	4628      	mov	r0, r5
 8008f92:	f7fe ff09 	bl	8007da8 <_free_r>
 8008f96:	2300      	movs	r3, #0
 8008f98:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6063      	str	r3, [r4, #4]
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f043 0308 	orr.w	r3, r3, #8
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	6923      	ldr	r3, [r4, #16]
 8008fb4:	b94b      	cbnz	r3, 8008fca <__swsetup_r+0x7a>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc0:	d003      	beq.n	8008fca <__swsetup_r+0x7a>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f000 f882 	bl	80090ce <__smakebuf_r>
 8008fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fce:	f013 0201 	ands.w	r2, r3, #1
 8008fd2:	d00a      	beq.n	8008fea <__swsetup_r+0x9a>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	60a2      	str	r2, [r4, #8]
 8008fd8:	6962      	ldr	r2, [r4, #20]
 8008fda:	4252      	negs	r2, r2
 8008fdc:	61a2      	str	r2, [r4, #24]
 8008fde:	6922      	ldr	r2, [r4, #16]
 8008fe0:	b942      	cbnz	r2, 8008ff4 <__swsetup_r+0xa4>
 8008fe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fe6:	d1c5      	bne.n	8008f74 <__swsetup_r+0x24>
 8008fe8:	bd38      	pop	{r3, r4, r5, pc}
 8008fea:	0799      	lsls	r1, r3, #30
 8008fec:	bf58      	it	pl
 8008fee:	6962      	ldrpl	r2, [r4, #20]
 8008ff0:	60a2      	str	r2, [r4, #8]
 8008ff2:	e7f4      	b.n	8008fde <__swsetup_r+0x8e>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7f7      	b.n	8008fe8 <__swsetup_r+0x98>
 8008ff8:	2000001c 	.word	0x2000001c

08008ffc <_raise_r>:
 8008ffc:	291f      	cmp	r1, #31
 8008ffe:	b538      	push	{r3, r4, r5, lr}
 8009000:	4605      	mov	r5, r0
 8009002:	460c      	mov	r4, r1
 8009004:	d904      	bls.n	8009010 <_raise_r+0x14>
 8009006:	2316      	movs	r3, #22
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009012:	b112      	cbz	r2, 800901a <_raise_r+0x1e>
 8009014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009018:	b94b      	cbnz	r3, 800902e <_raise_r+0x32>
 800901a:	4628      	mov	r0, r5
 800901c:	f000 f830 	bl	8009080 <_getpid_r>
 8009020:	4622      	mov	r2, r4
 8009022:	4601      	mov	r1, r0
 8009024:	4628      	mov	r0, r5
 8009026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800902a:	f000 b817 	b.w	800905c <_kill_r>
 800902e:	2b01      	cmp	r3, #1
 8009030:	d00a      	beq.n	8009048 <_raise_r+0x4c>
 8009032:	1c59      	adds	r1, r3, #1
 8009034:	d103      	bne.n	800903e <_raise_r+0x42>
 8009036:	2316      	movs	r3, #22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	2001      	movs	r0, #1
 800903c:	e7e7      	b.n	800900e <_raise_r+0x12>
 800903e:	2100      	movs	r1, #0
 8009040:	4620      	mov	r0, r4
 8009042:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009046:	4798      	blx	r3
 8009048:	2000      	movs	r0, #0
 800904a:	e7e0      	b.n	800900e <_raise_r+0x12>

0800904c <raise>:
 800904c:	4b02      	ldr	r3, [pc, #8]	@ (8009058 <raise+0xc>)
 800904e:	4601      	mov	r1, r0
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	f7ff bfd3 	b.w	8008ffc <_raise_r>
 8009056:	bf00      	nop
 8009058:	2000001c 	.word	0x2000001c

0800905c <_kill_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	2300      	movs	r3, #0
 8009060:	4d06      	ldr	r5, [pc, #24]	@ (800907c <_kill_r+0x20>)
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	4611      	mov	r1, r2
 8009068:	602b      	str	r3, [r5, #0]
 800906a:	f7f9 fcc6 	bl	80029fa <_kill>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d102      	bne.n	8009078 <_kill_r+0x1c>
 8009072:	682b      	ldr	r3, [r5, #0]
 8009074:	b103      	cbz	r3, 8009078 <_kill_r+0x1c>
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	bd38      	pop	{r3, r4, r5, pc}
 800907a:	bf00      	nop
 800907c:	200005e8 	.word	0x200005e8

08009080 <_getpid_r>:
 8009080:	f7f9 bcb4 	b.w	80029ec <_getpid>

08009084 <__swhatbuf_r>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	460c      	mov	r4, r1
 8009088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908c:	4615      	mov	r5, r2
 800908e:	2900      	cmp	r1, #0
 8009090:	461e      	mov	r6, r3
 8009092:	b096      	sub	sp, #88	@ 0x58
 8009094:	da0c      	bge.n	80090b0 <__swhatbuf_r+0x2c>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	2100      	movs	r1, #0
 800909a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800909e:	bf14      	ite	ne
 80090a0:	2340      	movne	r3, #64	@ 0x40
 80090a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090a6:	2000      	movs	r0, #0
 80090a8:	6031      	str	r1, [r6, #0]
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	b016      	add	sp, #88	@ 0x58
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	466a      	mov	r2, sp
 80090b2:	f000 f849 	bl	8009148 <_fstat_r>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	dbed      	blt.n	8009096 <__swhatbuf_r+0x12>
 80090ba:	9901      	ldr	r1, [sp, #4]
 80090bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090c4:	4259      	negs	r1, r3
 80090c6:	4159      	adcs	r1, r3
 80090c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090cc:	e7eb      	b.n	80090a6 <__swhatbuf_r+0x22>

080090ce <__smakebuf_r>:
 80090ce:	898b      	ldrh	r3, [r1, #12]
 80090d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d2:	079d      	lsls	r5, r3, #30
 80090d4:	4606      	mov	r6, r0
 80090d6:	460c      	mov	r4, r1
 80090d8:	d507      	bpl.n	80090ea <__smakebuf_r+0x1c>
 80090da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090de:	6023      	str	r3, [r4, #0]
 80090e0:	6123      	str	r3, [r4, #16]
 80090e2:	2301      	movs	r3, #1
 80090e4:	6163      	str	r3, [r4, #20]
 80090e6:	b003      	add	sp, #12
 80090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ea:	466a      	mov	r2, sp
 80090ec:	ab01      	add	r3, sp, #4
 80090ee:	f7ff ffc9 	bl	8009084 <__swhatbuf_r>
 80090f2:	9f00      	ldr	r7, [sp, #0]
 80090f4:	4605      	mov	r5, r0
 80090f6:	4639      	mov	r1, r7
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7fe fec7 	bl	8007e8c <_malloc_r>
 80090fe:	b948      	cbnz	r0, 8009114 <__smakebuf_r+0x46>
 8009100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009104:	059a      	lsls	r2, r3, #22
 8009106:	d4ee      	bmi.n	80090e6 <__smakebuf_r+0x18>
 8009108:	f023 0303 	bic.w	r3, r3, #3
 800910c:	f043 0302 	orr.w	r3, r3, #2
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	e7e2      	b.n	80090da <__smakebuf_r+0xc>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800911a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	9b01      	ldr	r3, [sp, #4]
 8009122:	6020      	str	r0, [r4, #0]
 8009124:	b15b      	cbz	r3, 800913e <__smakebuf_r+0x70>
 8009126:	4630      	mov	r0, r6
 8009128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800912c:	f000 f81e 	bl	800916c <_isatty_r>
 8009130:	b128      	cbz	r0, 800913e <__smakebuf_r+0x70>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f023 0303 	bic.w	r3, r3, #3
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	431d      	orrs	r5, r3
 8009142:	81a5      	strh	r5, [r4, #12]
 8009144:	e7cf      	b.n	80090e6 <__smakebuf_r+0x18>
	...

08009148 <_fstat_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	2300      	movs	r3, #0
 800914c:	4d06      	ldr	r5, [pc, #24]	@ (8009168 <_fstat_r+0x20>)
 800914e:	4604      	mov	r4, r0
 8009150:	4608      	mov	r0, r1
 8009152:	4611      	mov	r1, r2
 8009154:	602b      	str	r3, [r5, #0]
 8009156:	f7f9 fcaf 	bl	8002ab8 <_fstat>
 800915a:	1c43      	adds	r3, r0, #1
 800915c:	d102      	bne.n	8009164 <_fstat_r+0x1c>
 800915e:	682b      	ldr	r3, [r5, #0]
 8009160:	b103      	cbz	r3, 8009164 <_fstat_r+0x1c>
 8009162:	6023      	str	r3, [r4, #0]
 8009164:	bd38      	pop	{r3, r4, r5, pc}
 8009166:	bf00      	nop
 8009168:	200005e8 	.word	0x200005e8

0800916c <_isatty_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	2300      	movs	r3, #0
 8009170:	4d05      	ldr	r5, [pc, #20]	@ (8009188 <_isatty_r+0x1c>)
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	f7f9 fcad 	bl	8002ad6 <_isatty>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_isatty_r+0x1a>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_isatty_r+0x1a>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	200005e8 	.word	0x200005e8

0800918c <_init>:
 800918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918e:	bf00      	nop
 8009190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009192:	bc08      	pop	{r3}
 8009194:	469e      	mov	lr, r3
 8009196:	4770      	bx	lr

08009198 <_fini>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr
